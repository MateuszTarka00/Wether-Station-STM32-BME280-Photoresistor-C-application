
Wether Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080090b0  080090b0  000190b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009594  08009594  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009594  08009594  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009594  08009594  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009594  08009594  00019594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009598  08009598  00019598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800959c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001dc  08009778  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08009778  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c59  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003085  00000000  00000000  00036e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00039ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea49  00000000  00000000  0003c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001754c  00000000  00000000  0005ad31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afdea  00000000  00000000  0007227d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f4c  00000000  00000000  001220bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009094 	.word	0x08009094

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009094 	.word	0x08009094

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000bc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bc6:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bcc:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd8:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000c1a:	f001 fc5f 	bl	80024dc <HAL_ADC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000c24:	f001 f9d6 	bl	8001fd4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_ADC1_Init+0xb4>)
 8000c46:	f001 ff01 	bl	8002a4c <HAL_ADC_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c50:	f001 f9c0 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000254 	.word	0x20000254

08000c60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c80:	d124      	bne.n	8000ccc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_ADC_MspInit+0x74>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <HAL_ADC_MspInit+0x74>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6153      	str	r3, [r2, #20]
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_ADC_MspInit+0x74>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_ADC_MspInit+0x74>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_ADC_MspInit+0x74>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	6153      	str	r3, [r2, #20]
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_ADC_MspInit+0x74>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f002 fb16 	bl	80032f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    int8_t rslt =  BME280_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73bb      	strb	r3, [r7, #14]

    /* chip id read try count */
    uint8_t try_count = 5;
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	73fb      	strb	r3, [r7, #15]
    uint8_t chip_id = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fe86 	bl	80019fe <null_ptr_check>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73bb      	strb	r3, [r7, #14]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d133      	bne.n	8000d66 <bme280_init+0x8e>
    {
        while (try_count)
 8000cfe:	e028      	b.n	8000d52 <bme280_init+0x7a>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000d00:	f107 010d 	add.w	r1, r7, #13
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	20d0      	movs	r0, #208	; 0xd0
 8000d0a:	f000 f831 	bl	8000d70 <bme280_get_regs>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	73bb      	strb	r3, [r7, #14]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8000d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d114      	bne.n	8000d44 <bme280_init+0x6c>
 8000d1a:	7b7b      	ldrb	r3, [r7, #13]
 8000d1c:	2b60      	cmp	r3, #96	; 0x60
 8000d1e:	d111      	bne.n	8000d44 <bme280_init+0x6c>
            {
                dev->chip_id = chip_id;
 8000d20:	7b7a      	ldrb	r2, [r7, #13]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f977 	bl	800101a <bme280_soft_reset>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	73bb      	strb	r3, [r7, #14]
                if (rslt == BME280_OK)
 8000d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d110      	bne.n	8000d5a <bme280_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 fcd6 	bl	80016ea <get_calib_data>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	73bb      	strb	r3, [r7, #14]
                }
                break;
 8000d42:	e00a      	b.n	8000d5a <bme280_init+0x82>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	2001      	movs	r0, #1
 8000d4a:	4798      	blx	r3
            --try_count;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
        while (try_count)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1d3      	bne.n	8000d00 <bme280_init+0x28>
 8000d58:	e000      	b.n	8000d5c <bme280_init+0x84>
                break;
 8000d5a:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <bme280_init+0x8e>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8000d62:	23fe      	movs	r3, #254	; 0xfe
 8000d64:	73bb      	strb	r3, [r7, #14]
        }
    }

    return BME280_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 fe3b 	bl	80019fe <null_ptr_check>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d117      	bne.n	8000dc4 <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	789b      	ldrb	r3, [r3, #2]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d003      	beq.n	8000da4 <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000da2:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685c      	ldr	r4, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7858      	ldrb	r0, [r3, #1]
 8000dac:	89bb      	ldrh	r3, [r7, #12]
 8000dae:	7bf9      	ldrb	r1, [r7, #15]
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	47a0      	blx	r4
 8000db4:	4603      	mov	r3, r0
 8000db6:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8000db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 8000dc0:	23fc      	movs	r3, #252	; 0xfc
 8000dc2:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8000dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	371c      	adds	r7, #28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}

08000dd0 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b08d      	sub	sp, #52	; 0x34
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b0a      	cmp	r3, #10
 8000de4:	d901      	bls.n	8000dea <bme280_set_regs+0x1a>
    {
        len = 10;
 8000de6:	230a      	movs	r3, #10
 8000de8:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f000 fe07 	bl	80019fe <null_ptr_check>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000df6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d156      	bne.n	8000eac <bme280_set_regs+0xdc>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d053      	beq.n	8000eac <bme280_set_regs+0xdc>
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d050      	beq.n	8000eac <bme280_set_regs+0xdc>
    {
        if (len != 0)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d049      	beq.n	8000ea4 <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	789b      	ldrb	r3, [r3, #2]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d01a      	beq.n	8000e54 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000e24:	e011      	b.n	8000e4a <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000e26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e34:	68f9      	ldr	r1, [r7, #12]
 8000e36:	440b      	add	r3, r1
 8000e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000e40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e44:	3301      	adds	r3, #1
 8000e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000e4a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d3e8      	bcc.n	8000e26 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d90d      	bls.n	8000e76 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f107 0114 	add.w	r1, r7, #20
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 fc86 	bl	8001774 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3b01      	subs	r3, #1
 8000e72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000e74:	e001      	b.n	8000e7a <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689c      	ldr	r4, [r3, #8]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	7858      	ldrb	r0, [r3, #1]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	7819      	ldrb	r1, [r3, #0]
 8000e86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e88:	f107 0214 	add.w	r2, r7, #20
 8000e8c:	47a0      	blx	r4
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 8000e94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00b      	beq.n	8000eb4 <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 8000e9c:	23fc      	movs	r3, #252	; 0xfc
 8000e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8000ea2:	e007      	b.n	8000eb4 <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8000ea4:	23fd      	movs	r3, #253	; 0xfd
 8000ea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8000eaa:	e003      	b.n	8000eb4 <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8000eac:	23ff      	movs	r3, #255	; 0xff
 8000eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000eb2:	e000      	b.n	8000eb6 <bme280_set_regs+0xe6>
        if (len != 0)
 8000eb4:	bf00      	nop
    }

    return rslt;
 8000eb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3734      	adds	r7, #52	; 0x34
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd90      	pop	{r4, r7, pc}

08000ec2 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	6039      	str	r1, [r7, #0]
 8000ecc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000ece:	6838      	ldr	r0, [r7, #0]
 8000ed0:	f000 fd95 	bl	80019fe <null_ptr_check>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d13f      	bne.n	8000f60 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8000ee0:	f107 030e 	add.w	r3, r7, #14
 8000ee4:	6839      	ldr	r1, [r7, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f874 	bl	8000fd4 <bme280_get_sensor_mode>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8000ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d107      	bne.n	8000f08 <bme280_set_sensor_settings+0x46>
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d004      	beq.n	8000f08 <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8000efe:	6838      	ldr	r0, [r7, #0]
 8000f00:	f000 fba6 	bl	8001650 <put_device_to_sleep>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 8000f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d127      	bne.n	8000f60 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4619      	mov	r1, r3
 8000f14:	2007      	movs	r0, #7
 8000f16:	f000 fd56 	bl	80019c6 <are_settings_changed>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d009      	beq.n	8000f34 <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f9e2 	bl	80012f4 <set_osr_settings>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d111      	bne.n	8000f60 <bme280_set_sensor_settings+0x9e>
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	2018      	movs	r0, #24
 8000f42:	f000 fd40 	bl	80019c6 <are_settings_changed>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fa69 	bl	800142e <set_filter_standby_settings>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f78:	6838      	ldr	r0, [r7, #0]
 8000f7a:	f000 fd40 	bl	80019fe <null_ptr_check>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d11e      	bne.n	8000fc8 <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8000f8a:	f107 030e 	add.w	r3, r7, #14
 8000f8e:	6839      	ldr	r1, [r7, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f81f 	bl	8000fd4 <bme280_get_sensor_mode>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d107      	bne.n	8000fb2 <bme280_set_sensor_mode+0x46>
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f000 fb51 	bl	8001650 <put_device_to_sleep>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d106      	bne.n	8000fc8 <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fb13 	bl	80015ea <write_power_mode>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000fde:	6838      	ldr	r0, [r7, #0]
 8000fe0:	f000 fd0d 	bl	80019fe <null_ptr_check>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10e      	bne.n	800100e <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	20f4      	movs	r0, #244	; 0xf4
 8000ff8:	f7ff feba 	bl	8000d70 <bme280_get_regs>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	b2da      	uxtb	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001022:	23e0      	movs	r3, #224	; 0xe0
 8001024:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 800102a:	2305      	movs	r3, #5
 800102c:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 800102e:	23b6      	movs	r3, #182	; 0xb6
 8001030:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fce3 	bl	80019fe <null_ptr_check>
 8001038:	4603      	mov	r3, r0
 800103a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d12f      	bne.n	80010a4 <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001044:	f107 010b 	add.w	r1, r7, #11
 8001048:	f107 000d 	add.w	r0, r7, #13
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f7ff febe 	bl	8000dd0 <bme280_set_regs>
 8001054:	4603      	mov	r3, r0
 8001056:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d121      	bne.n	80010a4 <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2002      	movs	r0, #2
 8001066:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8001068:	f107 010c 	add.w	r1, r7, #12
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	20f3      	movs	r0, #243	; 0xf3
 8001072:	f7ff fe7d 	bl	8000d70 <bme280_get_regs>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d109      	bne.n	8001096 <bme280_soft_reset+0x7c>
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	1e5a      	subs	r2, r3, #1
 8001086:	73ba      	strb	r2, [r7, #14]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <bme280_soft_reset+0x7c>
 800108c:	7b3b      	ldrb	r3, [r7, #12]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1e4      	bne.n	8001060 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8001096:	7b3b      	ldrb	r3, [r7, #12]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 80010a0:	23fa      	movs	r3, #250	; 0xfa
 80010a2:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 fc90 	bl	80019fe <null_ptr_check>
 80010de:	4603      	mov	r3, r0
 80010e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 80010e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d124      	bne.n	8001136 <bme280_get_sensor_data+0x86>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d021      	beq.n	8001136 <bme280_get_sensor_data+0x86>
    {
        /* Read the pressure and temperature data from the sensor */
       rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80010f2:	f107 011c 	add.w	r1, r7, #28
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2208      	movs	r2, #8
 80010fa:	20f7      	movs	r0, #247	; 0xf7
 80010fc:	f7ff fe38 	bl	8000d70 <bme280_get_regs>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8001106:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800110a:	2b00      	cmp	r3, #0
 800110c:	d116      	bne.n	800113c <bme280_get_sensor_data+0x8c>
       {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 800110e:	f107 0210 	add.w	r2, r7, #16
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f815 	bl	8001148 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
           rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3310      	adds	r3, #16
 8001122:	f107 0110 	add.w	r1, r7, #16
 8001126:	7bf8      	ldrb	r0, [r7, #15]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	f000 f853 	bl	80011d4 <bme280_compensate_data>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8001134:	e002      	b.n	800113c <bme280_get_sensor_data+0x8c>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001136:	23ff      	movs	r3, #255	; 0xff
 8001138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800113c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001140:	4618      	mov	r0, r3
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	031b      	lsls	r3, r3, #12
 8001158:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3302      	adds	r3, #2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	b2db      	uxtb	r3, r3
 800116e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	431a      	orrs	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	431a      	orrs	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3303      	adds	r3, #3
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	031b      	lsls	r3, r3, #12
 8001186:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3304      	adds	r3, #4
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3305      	adds	r3, #5
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	b2db      	uxtb	r3, r3
 800119c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	431a      	orrs	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_lsb = (uint32_t)reg_data[6] << 8;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3306      	adds	r3, #6
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[7];
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3307      	adds	r3, #7
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	617b      	str	r3, [r7, #20]
    uncomp_data->humidity = data_msb | data_lsb;
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	609a      	str	r2, [r3, #8]
}
 80011c8:	bf00      	nop
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 80011d4:	b4b0      	push	{r4, r5, r7}
 80011d6:	b0ab      	sub	sp, #172	; 0xac
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    uint32_t temperatura[12] = {2030,2031,2029,2031,2032,2028,2034,2040,2035,2032,2031,2034};
 80011ea:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <bme280_compensate_data+0x110>)
 80011ec:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80011f0:	461d      	mov	r5, r3
 80011f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int32_t cisnienie[12] = {10003414,10002324,10002364,10002414,10002324,10002324,10002315,10002311,10002414,10002313,10002311,10002324};
 8001202:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <bme280_compensate_data+0x114>)
 8001204:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001208:	461d      	mov	r5, r3
 800120a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001212:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t wilgotnosc[12] = {5342,5340,5348,5347,5342,5344,5348,5342,5346,5341,5344,5342};
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <bme280_compensate_data+0x118>)
 800121c:	f107 0414 	add.w	r4, r7, #20
 8001220:	461d      	mov	r5, r3
 8001222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800122e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d03e      	beq.n	80012b6 <bme280_compensate_data+0xe2>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d03b      	beq.n	80012b6 <bme280_compensate_data+0xe2>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d038      	beq.n	80012b6 <bme280_compensate_data+0xe2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00a      	beq.n	8001276 <bme280_compensate_data+0xa2>
        {
            /* Compensate the temperature data */
            comp_data->temperature = temperatura[data];
 8001260:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <bme280_compensate_data+0x11c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800126a:	4413      	add	r3, r2
 800126c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	605a      	str	r2, [r3, #4]
        }
        if (sensor_comp & BME280_PRESS)
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00a      	beq.n	8001296 <bme280_compensate_data+0xc2>
        {
            /* Compensate the pressure data */
            comp_data->pressure = cisnienie[data];
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <bme280_compensate_data+0x11c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800128a:	4413      	add	r3, r2
 800128c:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
        }
        if (sensor_comp & BME280_HUM)
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00d      	beq.n	80012bc <bme280_compensate_data+0xe8>
        {
            /* Compensate the humidity data */
            comp_data->humidity = wilgotnosc[data];
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <bme280_compensate_data+0x11c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80012aa:	4413      	add	r3, r2
 80012ac:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 80012b4:	e002      	b.n	80012bc <bme280_compensate_data+0xe8>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80012b6:	23ff      	movs	r3, #255	; 0xff
 80012b8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    }

    data++;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <bme280_compensate_data+0x11c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <bme280_compensate_data+0x11c>)
 80012c4:	6013      	str	r3, [r2, #0]
    if(data == 12)
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <bme280_compensate_data+0x11c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	d102      	bne.n	80012d4 <bme280_compensate_data+0x100>
    	data = 0;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <bme280_compensate_data+0x11c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

    return rslt;
 80012d4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 80012d8:	4618      	mov	r0, r3
 80012da:	37ac      	adds	r7, #172	; 0xac
 80012dc:	46bd      	mov	sp, r7
 80012de:	bcb0      	pop	{r4, r5, r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	080090b0 	.word	0x080090b0
 80012e8:	080090e0 	.word	0x080090e0
 80012ec:	08009110 	.word	0x08009110
 80012f0:	200002a4 	.word	0x200002a4

080012f4 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	68b8      	ldr	r0, [r7, #8]
 8001314:	f000 f815 	bl	8001342 <set_osr_humidity_settings>
 8001318:	4603      	mov	r3, r0
 800131a:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f842 	bl	80013b6 <set_osr_press_temp_settings>
 8001332:	4603      	mov	r3, r0
 8001334:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001336:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800134c:	23f2      	movs	r3, #242	; 0xf2
 800134e:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	789b      	ldrb	r3, [r3, #2]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	b2db      	uxtb	r3, r3
 800135a:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800135c:	f107 010e 	add.w	r1, r7, #14
 8001360:	f107 000c 	add.w	r0, r7, #12
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	f7ff fd32 	bl	8000dd0 <bme280_set_regs>
 800136c:	4603      	mov	r3, r0
 800136e:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d118      	bne.n	80013aa <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8001378:	23f4      	movs	r3, #244	; 0xf4
 800137a:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800137c:	7b38      	ldrb	r0, [r7, #12]
 800137e:	f107 010d 	add.w	r1, r7, #13
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	f7ff fcf3 	bl	8000d70 <bme280_get_regs>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001396:	f107 010d 	add.w	r1, r7, #13
 800139a:	f107 000c 	add.w	r0, r7, #12
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f7ff fd15 	bl	8000dd0 <bme280_set_regs>
 80013a6:	4603      	mov	r3, r0
 80013a8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80013c4:	23f4      	movs	r3, #244	; 0xf4
 80013c6:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80013c8:	7db8      	ldrb	r0, [r7, #22]
 80013ca:	f107 0115 	add.w	r1, r7, #21
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f7ff fccd 	bl	8000d70 <bme280_get_regs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 80013da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d11f      	bne.n	8001422 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 80013ec:	f107 0315 	add.w	r3, r7, #21
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f88e 	bl	8001514 <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8001402:	f107 0315 	add.w	r3, r7, #21
 8001406:	68b9      	ldr	r1, [r7, #8]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f8a0 	bl	800154e <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800140e:	f107 0115 	add.w	r1, r7, #21
 8001412:	f107 0016 	add.w	r0, r7, #22
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f7ff fcd9 	bl	8000dd0 <bme280_set_regs>
 800141e:	4603      	mov	r3, r0
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001422:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800143c:	23f5      	movs	r3, #245	; 0xf5
 800143e:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001440:	7db8      	ldrb	r0, [r7, #22]
 8001442:	f107 0115 	add.w	r1, r7, #21
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f7ff fc91 	bl	8000d70 <bme280_get_regs>
 800144e:	4603      	mov	r3, r0
 8001450:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8001452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d11f      	bne.n	800149a <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8001464:	f107 0315 	add.w	r3, r7, #21
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f81b 	bl	80014a6 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 800147a:	f107 0315 	add.w	r3, r7, #21
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f82d 	bl	80014e0 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001486:	f107 0115 	add.w	r1, r7, #21
 800148a:	f107 0016 	add.w	r0, r7, #22
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f7ff fc9d 	bl	8000dd0 <bme280_set_regs>
 8001496:	4603      	mov	r3, r0
 8001498:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800149a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	f023 031c 	bic.w	r3, r3, #28
 80014ba:	b25a      	sxtb	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	78db      	ldrb	r3, [r3, #3]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	f003 031c 	and.w	r3, r3, #28
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	701a      	strb	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	b25a      	sxtb	r2, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	791b      	ldrb	r3, [r3, #4]
 80014fa:	015b      	lsls	r3, r3, #5
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b25b      	sxtb	r3, r3
 8001502:	b2da      	uxtb	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	701a      	strb	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b25b      	sxtb	r3, r3
 8001524:	f023 031c 	bic.w	r3, r3, #28
 8001528:	b25a      	sxtb	r2, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	b25b      	sxtb	r3, r3
 8001532:	f003 031c 	and.w	r3, r3, #28
 8001536:	b25b      	sxtb	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b25b      	sxtb	r3, r3
 800153c:	b2da      	uxtb	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	701a      	strb	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b25b      	sxtb	r3, r3
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	b25a      	sxtb	r2, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	015b      	lsls	r3, r3, #5
 800156a:	b25b      	sxtb	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b25b      	sxtb	r3, r3
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	701a      	strb	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	b2da      	uxtb	r2, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3302      	adds	r3, #2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	109b      	asrs	r3, r3, #2
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3302      	adds	r3, #2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	095b      	lsrs	r3, r3, #5
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3303      	adds	r3, #3
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	109b      	asrs	r3, r3, #2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3303      	adds	r3, #3
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	711a      	strb	r2, [r3, #4]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	6039      	str	r1, [r7, #0]
 80015f4:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80015f6:	23f4      	movs	r3, #244	; 0xf4
 80015f8:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80015fa:	7bb8      	ldrb	r0, [r7, #14]
 80015fc:	f107 010d 	add.w	r1, r7, #13
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2201      	movs	r2, #1
 8001604:	f7ff fbb4 	bl	8000d70 <bme280_get_regs>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d117      	bne.n	8001644 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001614:	7b7b      	ldrb	r3, [r7, #13]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	f023 0303 	bic.w	r3, r3, #3
 800161c:	b25a      	sxtb	r2, r3
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	b25b      	sxtb	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b25b      	sxtb	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001630:	f107 010d 	add.w	r1, r7, #13
 8001634:	f107 000e 	add.w	r0, r7, #14
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	f7ff fbc8 	bl	8000dd0 <bme280_set_regs>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001658:	f107 0110 	add.w	r1, r7, #16
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2204      	movs	r2, #4
 8001660:	20f2      	movs	r0, #242	; 0xf2
 8001662:	f7ff fb85 	bl	8000d70 <bme280_get_regs>
 8001666:	4603      	mov	r3, r0
 8001668:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 800166a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8001672:	f107 0208 	add.w	r2, r7, #8
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff80 	bl	8001582 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fcc9 	bl	800101a <bme280_soft_reset>
 8001688:	4603      	mov	r3, r0
 800168a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 800168c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f808 	bl	80016b0 <reload_device_settings>
 80016a0:	4603      	mov	r3, r0
 80016a2:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80016a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	201f      	movs	r0, #31
 80016c0:	f7ff fe18 	bl	80012f4 <set_osr_settings>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 80016c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	201f      	movs	r0, #31
 80016d6:	f7ff feaa 	bl	800142e <set_filter_standby_settings>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b08a      	sub	sp, #40	; 0x28
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80016f2:	2388      	movs	r3, #136	; 0x88
 80016f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800170e:	f107 010c 	add.w	r1, r7, #12
 8001712:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	221a      	movs	r2, #26
 800171a:	f7ff fb29 	bl	8000d70 <bme280_get_regs>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BME280_OK)
 8001724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001728:	2b00      	cmp	r3, #0
 800172a:	d11d      	bne.n	8001768 <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f84a 	bl	80017cc <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8001738:	23e1      	movs	r3, #225	; 0xe1
 800173a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800173e:	f107 010c 	add.w	r1, r7, #12
 8001742:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2207      	movs	r2, #7
 800174a:	f7ff fb11 	bl	8000d70 <bme280_get_regs>
 800174e:	4603      	mov	r3, r0
 8001750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8001754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f8e1 	bl	800192a <parse_humidity_calib_data>
        }
    }

    return rslt;
 8001768:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800176c:	4618      	mov	r0, r3
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001782:	2301      	movs	r3, #1
 8001784:	75fb      	strb	r3, [r7, #23]
 8001786:	e016      	b.n	80017b6 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	441a      	add	r2, r3
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	440b      	add	r3, r1
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	441a      	add	r2, r3
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4619      	mov	r1, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	440b      	add	r3, r1
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	3301      	adds	r3, #1
 80017b4:	75fb      	strb	r3, [r7, #23]
 80017b6:	7dfa      	ldrb	r2, [r7, #23]
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3e4      	bcc.n	8001788 <interleave_reg_addr+0x14>
    }
}
 80017be:	bf00      	nop
 80017c0:	bf00      	nop
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	3310      	adds	r3, #16
 80017da:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3301      	adds	r3, #1
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3303      	adds	r3, #3
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21a      	sxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3302      	adds	r3, #2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b21b      	sxth	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b21a      	sxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3305      	adds	r3, #5
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b21b      	sxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	b21a      	sxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3307      	adds	r3, #7
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21a      	sxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3306      	adds	r3, #6
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b21b      	sxth	r3, r3
 800183c:	4313      	orrs	r3, r2
 800183e:	b21b      	sxth	r3, r3
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3309      	adds	r3, #9
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21a      	sxth	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3308      	adds	r3, #8
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b21b      	sxth	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	b21a      	sxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	330b      	adds	r3, #11
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	330a      	adds	r3, #10
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b21b      	sxth	r3, r3
 8001872:	4313      	orrs	r3, r2
 8001874:	b21a      	sxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	330d      	adds	r3, #13
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b21a      	sxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	330c      	adds	r3, #12
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b21b      	sxth	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b21a      	sxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	330f      	adds	r3, #15
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	b21a      	sxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	330e      	adds	r3, #14
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3311      	adds	r3, #17
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3310      	adds	r3, #16
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b21b      	sxth	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3313      	adds	r3, #19
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3312      	adds	r3, #18
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21a      	sxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3315      	adds	r3, #21
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3314      	adds	r3, #20
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3317      	adds	r3, #23
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	b21a      	sxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3316      	adds	r3, #22
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21a      	sxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7e5a      	ldrb	r2, [r3, #25]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	761a      	strb	r2, [r3, #24]
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800192a:	b480      	push	{r7}
 800192c:	b087      	sub	sp, #28
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3310      	adds	r3, #16
 8001938:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3301      	adds	r3, #1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b21a      	sxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b21b      	sxth	r3, r3
 800194a:	4313      	orrs	r3, r2
 800194c:	b21a      	sxth	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	789a      	ldrb	r2, [r3, #2]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3303      	adds	r3, #3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b25b      	sxtb	r3, r3
 8001962:	b29b      	uxth	r3, r3
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	b29b      	uxth	r3, r3
 8001968:	827b      	strh	r3, [r7, #18]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3304      	adds	r3, #4
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b21b      	sxth	r3, r3
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	823b      	strh	r3, [r7, #16]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8001978:	8a7a      	ldrh	r2, [r7, #18]
 800197a:	8a3b      	ldrh	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	b21a      	sxth	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3305      	adds	r3, #5
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b25b      	sxtb	r3, r3
 800198c:	b29b      	uxth	r3, r3
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	b29b      	uxth	r3, r3
 8001992:	81fb      	strh	r3, [r7, #14]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3304      	adds	r3, #4
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	b2db      	uxtb	r3, r3
 800199e:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80019a0:	89fa      	ldrh	r2, [r7, #14]
 80019a2:	89bb      	ldrh	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3306      	adds	r3, #6
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b25a      	sxtb	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	460a      	mov	r2, r1
 80019d0:	71fb      	strb	r3, [r7, #7]
 80019d2:	4613      	mov	r3, r2
 80019d4:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	4013      	ands	r3, r2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e001      	b.n	80019f0 <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00b      	beq.n	8001a24 <null_ptr_check+0x26>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <null_ptr_check+0x26>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <null_ptr_check+0x26>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8001a24:	23ff      	movs	r3, #255	; 0xff
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e001      	b.n	8001a2e <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <BME280_init>:

static struct bme280_dev bme; //generacja struktury czujnika
static struct bme280_data comp_data; // generacja struktury danych z czujnika
static int8_t init_done; //dane informacyjne o inicjalizacji

int8_t BME280_init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0

	//podstawowe dane inicjalizujące
	int8_t rslt = BME280_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]
	uint8_t settings_sel;
	init_done = BME280_E_DEV_NOT_FOUND;
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <BME280_init+0xc0>)
 8001a4c:	22fe      	movs	r2, #254	; 0xfe
 8001a4e:	701a      	strb	r2, [r3, #0]

	//przypisywanie danych oraz funkcji do sruktury czujnika
	bme.dev_id = (BME280_I2C_ADDR_SEC<<1);
 8001a50:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <BME280_init+0xc4>)
 8001a52:	22ee      	movs	r2, #238	; 0xee
 8001a54:	705a      	strb	r2, [r3, #1]
	bme.intf = BME280_I2C_INTF;
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <BME280_init+0xc4>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	709a      	strb	r2, [r3, #2]
	bme.read = i2c_read;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <BME280_init+0xc4>)
 8001a5e:	4a2a      	ldr	r2, [pc, #168]	; (8001b08 <BME280_init+0xc8>)
 8001a60:	605a      	str	r2, [r3, #4]
	bme.write = i2c_write;
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <BME280_init+0xc4>)
 8001a64:	4a29      	ldr	r2, [pc, #164]	; (8001b0c <BME280_init+0xcc>)
 8001a66:	609a      	str	r2, [r3, #8]
	bme.delay_ms = delay_ms;
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <BME280_init+0xc4>)
 8001a6a:	4a29      	ldr	r2, [pc, #164]	; (8001b10 <BME280_init+0xd0>)
 8001a6c:	60da      	str	r2, [r3, #12]

	//inicjalizacja
	rslt = bme280_init(&bme);
 8001a6e:	4825      	ldr	r0, [pc, #148]	; (8001b04 <BME280_init+0xc4>)
 8001a70:	f7ff f932 	bl	8000cd8 <bme280_init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]

	//konfiguracja ustawień czujnika
	bme.settings.osr_h = BME280_OVERSAMPLING_1X;
 8001a78:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <BME280_init+0xc4>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	bme.settings.osr_p = BME280_OVERSAMPLING_16X;
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <BME280_init+0xc4>)
 8001a82:	2205      	movs	r2, #5
 8001a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	bme.settings.osr_t = BME280_OVERSAMPLING_2X;
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <BME280_init+0xc4>)
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	bme.settings.filter = BME280_FILTER_COEFF_16;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <BME280_init+0xc4>)
 8001a92:	2204      	movs	r2, #4
 8001a94:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	bme.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <BME280_init+0xc4>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	// jeśli inicjalizacja zadziałała to ustawienia są zapisywane w czujniku
	if(rslt == BME280_OK)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d125      	bne.n	8001af4 <BME280_init+0xb4>
	{
		//ustawiene bitów rejestru ustawień
		settings_sel = BME280_OSR_PRESS_SEL;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	71bb      	strb	r3, [r7, #6]
		settings_sel |= BME280_OSR_TEMP_SEL;
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	71bb      	strb	r3, [r7, #6]
		settings_sel |= BME280_OSR_HUM_SEL;
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	71bb      	strb	r3, [r7, #6]
		settings_sel |= BME280_STANDBY_SEL;
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	f043 0310 	orr.w	r3, r3, #16
 8001ac2:	71bb      	strb	r3, [r7, #6]
		settings_sel |= BME280_FILTER_SEL;
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	f043 0308 	orr.w	r3, r3, #8
 8001aca:	71bb      	strb	r3, [r7, #6]

		rslt = bme280_set_sensor_settings(settings_sel, &bme);
 8001acc:	79bb      	ldrb	r3, [r7, #6]
 8001ace:	490d      	ldr	r1, [pc, #52]	; (8001b04 <BME280_init+0xc4>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f9f6 	bl	8000ec2 <bme280_set_sensor_settings>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]

		if(rslt == BME280_OK)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d108      	bne.n	8001af4 <BME280_init+0xb4>
		{
			//po konfiguracji rozpoczęcie pracy czujnika
			rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &bme);
 8001ae2:	4908      	ldr	r1, [pc, #32]	; (8001b04 <BME280_init+0xc4>)
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f7ff fa41 	bl	8000f6c <bme280_set_sensor_mode>
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
			init_done = rslt;
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <BME280_init+0xc0>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	7013      	strb	r3, [r2, #0]
		}
	}

	return rslt;
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000244 	.word	0x20000244
 8001b04:	200001f8 	.word	0x200001f8
 8001b08:	08001bb5 	.word	0x08001bb5
 8001b0c:	08001bfd 	.word	0x08001bfd
 8001b10:	08001b9d 	.word	0x08001b9d

08001b14 <BME280_read_data>:

//funkcja czytająca pomiary z czujnika
int8_t BME280_read_data(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
	int8_t rslt = BME280_E_COMM_FAIL;
 8001b1a:	23fc      	movs	r3, #252	; 0xfc
 8001b1c:	71fb      	strb	r3, [r7, #7]

	if(init_done == BME280_OK)
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <BME280_read_data+0x3c>)
 8001b20:	f993 3000 	ldrsb.w	r3, [r3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <BME280_read_data+0x30>
	{
		// Pobranie danych z czujnika i wyswietlenie
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme);
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <BME280_read_data+0x40>)
 8001b2a:	490b      	ldr	r1, [pc, #44]	; (8001b58 <BME280_read_data+0x44>)
 8001b2c:	2007      	movs	r0, #7
 8001b2e:	f7ff fabf 	bl	80010b0 <bme280_get_sensor_data>
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
		bme.delay_ms(70);
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <BME280_read_data+0x40>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2046      	movs	r0, #70	; 0x46
 8001b3c:	4798      	blx	r3
		print_sensor_data(&comp_data);
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <BME280_read_data+0x44>)
 8001b40:	f000 f80c 	bl	8001b5c <print_sensor_data>
	}

	return rslt;
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000244 	.word	0x20000244
 8001b54:	200001f8 	.word	0x200001f8
 8001b58:	20000238 	.word	0x20000238

08001b5c <print_sensor_data>:

//Wysyłanie danych przez usart
void print_sensor_data(struct bme280_data *comp_data) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08c      	sub	sp, #48	; 0x30
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	6078      	str	r0, [r7, #4]
	char msg[30];
	sprintf(msg,"%d %d %d",comp_data->temperature, comp_data->pressure, comp_data->humidity);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f107 0008 	add.w	r0, r7, #8
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	460b      	mov	r3, r1
 8001b78:	4906      	ldr	r1, [pc, #24]	; (8001b94 <print_sensor_data+0x38>)
 8001b7a:	f005 f861 	bl	8006c40 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,sizeof(msg),30);
 8001b7e:	f107 0108 	add.w	r1, r7, #8
 8001b82:	231e      	movs	r3, #30
 8001b84:	221e      	movs	r2, #30
 8001b86:	4804      	ldr	r0, [pc, #16]	; (8001b98 <print_sensor_data+0x3c>)
 8001b88:	f004 f88c 	bl	8005ca4 <HAL_UART_Transmit>
}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	08009140 	.word	0x08009140
 8001b98:	20000340 	.word	0x20000340

08001b9c <delay_ms>:

// funkcja opóźniająca
void delay_ms(uint32_t period) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fc75 	bl	8002494 <HAL_Delay>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <i2c_read>:

//funkcja czytająca dane z magistrali I2C
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af04      	add	r7, sp, #16
 8001bba:	603a      	str	r2, [r7, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	71bb      	strb	r3, [r7, #6]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, dev_id, reg_addr, 1, reg_data, len, 100);
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	b299      	uxth	r1, r3
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	2364      	movs	r3, #100	; 0x64
 8001bd8:	9302      	str	r3, [sp, #8]
 8001bda:	88bb      	ldrh	r3, [r7, #4]
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2301      	movs	r3, #1
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <i2c_read+0x44>)
 8001be6:	f001 feb5 	bl	8003954 <HAL_I2C_Mem_Read>
    return rslt;
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200002a8 	.word	0x200002a8

08001bfc <i2c_write>:

//funkcja zapisujące dane w czujniku
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af04      	add	r7, sp, #16
 8001c02:	603a      	str	r2, [r7, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	71bb      	strb	r3, [r7, #6]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(&hi2c1, dev_id, reg_addr, 1, reg_data, len, 100);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	b299      	uxth	r1, r3
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	9302      	str	r3, [sp, #8]
 8001c22:	88bb      	ldrh	r3, [r7, #4]
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	4804      	ldr	r0, [pc, #16]	; (8001c40 <i2c_write+0x44>)
 8001c2e:	f001 fd7d 	bl	800372c <HAL_I2C_Mem_Write>
    return rslt;
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200002a8 	.word	0x200002a8

08001c44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	4a23      	ldr	r2, [pc, #140]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001c60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c64:	6153      	str	r3, [r2, #20]
 8001c66:	4b21      	ldr	r3, [pc, #132]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001c78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c7c:	6153      	str	r3, [r2, #20]
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	4a17      	ldr	r2, [pc, #92]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	6153      	str	r3, [r2, #20]
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	4a11      	ldr	r2, [pc, #68]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cac:	6153      	str	r3, [r2, #20]
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_GPIO_Init+0xa8>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2160      	movs	r1, #96	; 0x60
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc2:	f001 fc8b 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_6;
 8001cc6:	2360      	movs	r3, #96	; 0x60
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce0:	f001 fb0a 	bl	80032f8 <HAL_GPIO_Init>

}
 8001ce4:	bf00      	nop
 8001ce6:	3728      	adds	r7, #40	; 0x28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000

08001cf0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <MX_I2C1_Init+0x78>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <MX_I2C1_Init+0x7c>)
 8001cfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d2a:	480e      	ldr	r0, [pc, #56]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d2c:	f001 fc6e 	bl	800360c <HAL_I2C_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d36:	f000 f94d 	bl	8001fd4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d3e:	f002 f93f 	bl	8003fc0 <HAL_I2CEx_ConfigAnalogFilter>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d48:	f000 f944 	bl	8001fd4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_I2C1_Init+0x74>)
 8001d50:	f002 f981 	bl	8004056 <HAL_I2CEx_ConfigDigitalFilter>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d5a:	f000 f93b 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200002a8 	.word	0x200002a8
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	2000090e 	.word	0x2000090e

08001d70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <HAL_I2C_MspInit+0xb8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d145      	bne.n	8001e1e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	4a25      	ldr	r2, [pc, #148]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	6153      	str	r3, [r2, #20]
 8001d9e:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db4:	6153      	str	r3, [r2, #20]
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc8:	2312      	movs	r3, #18
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de2:	f001 fa89 	bl	80032f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dea:	2312      	movs	r3, #18
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001df6:	2304      	movs	r3, #4
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480b      	ldr	r0, [pc, #44]	; (8001e30 <HAL_I2C_MspInit+0xc0>)
 8001e02:	f001 fa79 	bl	80032f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_I2C_MspInit+0xbc>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	; 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40005400 	.word	0x40005400
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000400 	.word	0x48000400

08001e34 <main>:
#include <stdio.h>

void SystemClock_Config(void);

int main(void)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b08f      	sub	sp, #60	; 0x3c
 8001e38:	af00      	add	r7, sp, #0
//funkcje inicjalizujące zegar, wejść i wyjść oraz funkcji pinów
  HAL_Init();
 8001e3a:	f000 faf5 	bl	8002428 <HAL_Init>
  SystemClock_Config();
 8001e3e:	f000 f85f 	bl	8001f00 <SystemClock_Config>
  MX_GPIO_Init();
 8001e42:	f7ff feff 	bl	8001c44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e46:	f7fe feaf 	bl	8000ba8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001e4a:	f7ff ff51 	bl	8001cf0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001e4e:	f000 fa4f 	bl	80022f0 <MX_USART2_UART_Init>

  if(BME280_init() != BME280_OK) //Załączenie pracy czujnika
 8001e52:	f7ff fdf5 	bl	8001a40 <BME280_init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d011      	beq.n	8001e80 <main+0x4c>
  {
	 char msg_init[15] = "error init\n\r"; // W momencie błędu, wysyłany o tym jest komunikat do komputera
 8001e5c:	4b23      	ldr	r3, [pc, #140]	; (8001eec <main+0xb8>)
 8001e5e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e64:	c407      	stmia	r4!, {r0, r1, r2}
 8001e66:	7023      	strb	r3, [r4, #0]
 8001e68:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	801a      	strh	r2, [r3, #0]
	 HAL_UART_Transmit(&huart2,(uint8_t*)msg_init,sizeof(msg_init),1000);
 8001e70:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e78:	220f      	movs	r2, #15
 8001e7a:	481d      	ldr	r0, [pc, #116]	; (8001ef0 <main+0xbc>)
 8001e7c:	f003 ff12 	bl	8005ca4 <HAL_UART_Transmit>

  uint16_t raw; // napięcie pobierane z dzielnika z rezystorem i fotorezystorem

  while (1) // głowna pętla programu
  {
	 if(BME280_read_data() != BME280_OK) // funkcja pobierające przetworzone dane z czujnika
 8001e80:	f7ff fe48 	bl	8001b14 <BME280_read_data>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d010      	beq.n	8001eac <main+0x78>
	 {
		 char msg_read[20] = "read error \r\n"; // W momencie błędu, wysyłany jest o tym komunikat do komputera
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <main+0xc0>)
 8001e8c:	1d3c      	adds	r4, r7, #4
 8001e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e90:	c407      	stmia	r4!, {r0, r1, r2}
 8001e92:	8023      	strh	r3, [r4, #0]
 8001e94:	f107 0312 	add.w	r3, r7, #18
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	809a      	strh	r2, [r3, #4]
		 HAL_UART_Transmit(&huart2,(uint8_t*)msg_read,sizeof(msg_read),1000);
 8001e9e:	1d39      	adds	r1, r7, #4
 8001ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea4:	2214      	movs	r2, #20
 8001ea6:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <main+0xbc>)
 8001ea8:	f003 fefc 	bl	8005ca4 <HAL_UART_Transmit>
	 }

	  char msg[10];
	  HAL_ADC_Start(&hadc1); // inicjalizacja przetwarzania ADC
 8001eac:	4812      	ldr	r0, [pc, #72]	; (8001ef8 <main+0xc4>)
 8001eae:	f000 fc9b 	bl	80027e8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // pobranie przetworzonego napięcia do handlera
 8001eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb6:	4810      	ldr	r0, [pc, #64]	; (8001ef8 <main+0xc4>)
 8001eb8:	f000 fd04 	bl	80028c4 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1); // pobranie danych do zmiennej
 8001ebc:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <main+0xc4>)
 8001ebe:	f000 fdb7 	bl	8002a30 <HAL_ADC_GetValue>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	86fb      	strh	r3, [r7, #54]	; 0x36

	  sprintf(msg, " %d\r\n", raw); // konwersja napięcia na string
 8001ec6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ec8:	f107 0318 	add.w	r3, r7, #24
 8001ecc:	490b      	ldr	r1, [pc, #44]	; (8001efc <main+0xc8>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 feb6 	bl	8006c40 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), HAL_MAX_DELAY);
 8001ed4:	f107 0118 	add.w	r1, r7, #24
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	220a      	movs	r2, #10
 8001ede:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <main+0xbc>)
 8001ee0:	f003 fee0 	bl	8005ca4 <HAL_UART_Transmit>
	  HAL_Delay(250); //opóźnienie następnego poboru danych
 8001ee4:	20fa      	movs	r0, #250	; 0xfa
 8001ee6:	f000 fad5 	bl	8002494 <HAL_Delay>
  {
 8001eea:	e7c9      	b.n	8001e80 <main+0x4c>
 8001eec:	08009154 	.word	0x08009154
 8001ef0:	20000340 	.word	0x20000340
 8001ef4:	08009164 	.word	0x08009164
 8001ef8:	20000254 	.word	0x20000254
 8001efc:	0800914c 	.word	0x0800914c

08001f00 <SystemClock_Config>:

}


void SystemClock_Config(void) //konfiguracja  sygnału zegarowego
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b09c      	sub	sp, #112	; 0x70
 8001f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f0a:	2228      	movs	r2, #40	; 0x28
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fa24 	bl	800635c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f24:	463b      	mov	r3, r7
 8001f26:	2234      	movs	r2, #52	; 0x34
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 fa16 	bl	800635c <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f30:	2302      	movs	r3, #2
 8001f32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f34:	2301      	movs	r3, #1
 8001f36:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f38:	2310      	movs	r3, #16
 8001f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f40:	2300      	movs	r3, #0
 8001f42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001f44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 f8ce 	bl	80040f0 <HAL_RCC_OscConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001f5a:	f000 f83b 	bl	8001fd4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f5e:	230f      	movs	r3, #15
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f62:	2300      	movs	r3, #0
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f66:	2300      	movs	r3, #0
 8001f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 ffc1 	bl	8004f00 <HAL_RCC_ClockConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001f84:	f000 f826 	bl	8001fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 8001f88:	23a0      	movs	r3, #160	; 0xa0
 8001f8a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f94:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f96:	463b      	mov	r3, r7
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 fa19 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001fa4:	f000 f816 	bl	8001fd4 <Error_Handler>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3770      	adds	r7, #112	; 0x70
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fc2:	f000 fa47 	bl	8002454 <HAL_IncTick>
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40012c00 	.word	0x40012c00

08001fd4 <Error_Handler>:

void Error_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop
  __disable_irq();
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <Error_Handler+0x8>
	...

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_MspInit+0x44>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <HAL_MspInit+0x44>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6193      	str	r3, [r2, #24]
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_MspInit+0x44>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_MspInit+0x44>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <HAL_MspInit+0x44>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_MspInit+0x44>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	; 0x30
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8002038:	2200      	movs	r2, #0
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	2019      	movs	r0, #25
 800203e:	f001 f931 	bl	80032a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002042:	2019      	movs	r0, #25
 8002044:	f001 f94a 	bl	80032dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <HAL_InitTick+0x9c>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <HAL_InitTick+0x9c>)
 800204e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_InitTick+0x9c>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002060:	f107 0210 	add.w	r2, r7, #16
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f003 f97e 	bl	800536c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002070:	f003 f95a 	bl	8005328 <HAL_RCC_GetPCLK2Freq>
 8002074:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <HAL_InitTick+0xa0>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0c9b      	lsrs	r3, r3, #18
 8002080:	3b01      	subs	r3, #1
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_InitTick+0xa4>)
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <HAL_InitTick+0xa8>)
 8002088:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_InitTick+0xa4>)
 800208c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002090:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002092:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_InitTick+0xa4>)
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_InitTick+0xa4>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_InitTick+0xa4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80020a4:	4809      	ldr	r0, [pc, #36]	; (80020cc <HAL_InitTick+0xa4>)
 80020a6:	f003 fb25 	bl	80056f4 <HAL_TIM_Base_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d104      	bne.n	80020ba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80020b0:	4806      	ldr	r0, [pc, #24]	; (80020cc <HAL_InitTick+0xa4>)
 80020b2:	f003 fb81 	bl	80057b8 <HAL_TIM_Base_Start_IT>
 80020b6:	4603      	mov	r3, r0
 80020b8:	e000      	b.n	80020bc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3730      	adds	r7, #48	; 0x30
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	431bde83 	.word	0x431bde83
 80020cc:	200002f4 	.word	0x200002f4
 80020d0:	40012c00 	.word	0x40012c00

080020d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <NMI_Handler+0x4>

080020da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <HardFault_Handler+0x4>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <MemManage_Handler+0x4>

080020e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <BusFault_Handler+0x4>

080020ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <UsageFault_Handler+0x4>

080020f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002132:	f003 fb95 	bl	8005860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200002f4 	.word	0x200002f4

08002140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
	return 1;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_kill>:

int _kill(int pid, int sig)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800215a:	f004 f8d5 	bl	8006308 <__errno>
 800215e:	4603      	mov	r3, r0
 8002160:	2216      	movs	r2, #22
 8002162:	601a      	str	r2, [r3, #0]
	return -1;
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_exit>:

void _exit (int status)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002178:	f04f 31ff 	mov.w	r1, #4294967295
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ffe7 	bl	8002150 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002182:	e7fe      	b.n	8002182 <_exit+0x12>

08002184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	e00a      	b.n	80021ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002196:	f3af 8000 	nop.w
 800219a:	4601      	mov	r1, r0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	60ba      	str	r2, [r7, #8]
 80021a2:	b2ca      	uxtb	r2, r1
 80021a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dbf0      	blt.n	8002196 <_read+0x12>
	}

return len;
 80021b4:	687b      	ldr	r3, [r7, #4]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e009      	b.n	80021e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	3301      	adds	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	dbf1      	blt.n	80021d0 <_write+0x12>
	}
	return len;
 80021ec:	687b      	ldr	r3, [r7, #4]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <_close>:

int _close(int file)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
	return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800221e:	605a      	str	r2, [r3, #4]
	return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_isatty>:

int _isatty(int file)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
	return 1;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
	return 0;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <_sbrk+0x5c>)
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <_sbrk+0x60>)
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <_sbrk+0x64>)
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <_sbrk+0x68>)
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	429a      	cmp	r2, r3
 800228e:	d207      	bcs.n	80022a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002290:	f004 f83a 	bl	8006308 <__errno>
 8002294:	4603      	mov	r3, r0
 8002296:	220c      	movs	r2, #12
 8002298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	e009      	b.n	80022b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <_sbrk+0x64>)
 80022b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20004000 	.word	0x20004000
 80022c0:	00000400 	.word	0x00000400
 80022c4:	20000248 	.word	0x20000248
 80022c8:	200003d8 	.word	0x200003d8

080022cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <SystemInit+0x20>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <SystemInit+0x20>)
 80022d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_USART2_UART_Init+0x58>)
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <MX_USART2_UART_Init+0x5c>)
 80022f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <MX_USART2_UART_Init+0x58>)
 80022fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800232e:	2200      	movs	r2, #0
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002334:	f003 fc68 	bl	8005c08 <HAL_UART_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800233e:	f7ff fe49 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000340 	.word	0x20000340
 800234c:	40004400 	.word	0x40004400

08002350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_UART_MspInit+0x7c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d128      	bne.n	80023c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <HAL_UART_MspInit+0x80>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <HAL_UART_MspInit+0x80>)
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	61d3      	str	r3, [r2, #28]
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_UART_MspInit+0x80>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_UART_MspInit+0x80>)
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_UART_MspInit+0x80>)
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	6153      	str	r3, [r2, #20]
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_UART_MspInit+0x80>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023a2:	230c      	movs	r3, #12
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b2:	2307      	movs	r3, #7
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f000 ff9a 	bl	80032f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40004400 	.word	0x40004400
 80023d0:	40021000 	.word	0x40021000

080023d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <LoopForever+0x6>)
  ldr r1, =_edata
 80023da:	490e      	ldr	r1, [pc, #56]	; (8002414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <LoopForever+0xe>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f0:	4c0b      	ldr	r4, [pc, #44]	; (8002420 <LoopForever+0x16>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023fe:	f7ff ff65 	bl	80022cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f003 ff87 	bl	8006314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002406:	f7ff fd15 	bl	8001e34 <main>

0800240a <LoopForever>:

LoopForever:
    b LoopForever
 800240a:	e7fe      	b.n	800240a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800240c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002418:	0800959c 	.word	0x0800959c
  ldr r2, =_sbss
 800241c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002420:	200003d8 	.word	0x200003d8

08002424 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC1_IRQHandler>
	...

08002428 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_Init+0x28>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_Init+0x28>)
 8002432:	f043 0310 	orr.w	r3, r3, #16
 8002436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 ff28 	bl	800328e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	2000      	movs	r0, #0
 8002440:	f7ff fdf2 	bl	8002028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002444:	f7ff fdcc 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40022000 	.word	0x40022000

08002454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_IncTick+0x20>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x24>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_IncTick+0x24>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000008 	.word	0x20000008
 8002478:	200003c4 	.word	0x200003c4

0800247c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_GetTick+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	200003c4 	.word	0x200003c4

08002494 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff ffee 	bl	800247c <HAL_GetTick>
 80024a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d005      	beq.n	80024ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_Delay+0x44>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80024ba:	bf00      	nop
 80024bc:	f7ff ffde 	bl	800247c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d8f7      	bhi.n	80024bc <HAL_Delay+0x28>
  {
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000008 	.word	0x20000008

080024dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b09a      	sub	sp, #104	; 0x68
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e169      	b.n	80027d0 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	d176      	bne.n	80025fc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d152      	bne.n	80025bc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fe fb95 	bl	8000c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d13b      	bne.n	80025bc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fd95 	bl	8003074 <ADC_Disable>
 800254a:	4603      	mov	r3, r0
 800254c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d12f      	bne.n	80025bc <HAL_ADC_Init+0xe0>
 800255c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002560:	2b00      	cmp	r3, #0
 8002562:	d12b      	bne.n	80025bc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800256c:	f023 0302 	bic.w	r3, r3, #2
 8002570:	f043 0202 	orr.w	r2, r3, #2
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002586:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002596:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002598:	4b8f      	ldr	r3, [pc, #572]	; (80027d8 <HAL_ADC_Init+0x2fc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a8f      	ldr	r2, [pc, #572]	; (80027dc <HAL_ADC_Init+0x300>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0c9a      	lsrs	r2, r3, #18
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025ae:	e002      	b.n	80025b6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f9      	bne.n	80025b0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80025d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025d8:	d110      	bne.n	80025fc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f023 0312 	bic.w	r3, r3, #18
 80025e2:	f043 0210 	orr.w	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 80d6 	bne.w	80027b6 <HAL_ADC_Init+0x2da>
 800260a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 80d1 	bne.w	80027b6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 80c9 	bne.w	80027b6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800262c:	f043 0202 	orr.w	r2, r3, #2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002634:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <HAL_ADC_Init+0x304>)
 8002636:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d108      	bne.n	800265c <HAL_ADC_Init+0x180>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_ADC_Init+0x180>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_ADC_Init+0x182>
 800265c:	2300      	movs	r3, #0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11c      	bne.n	800269c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002662:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002664:	2b00      	cmp	r3, #0
 8002666:	d010      	beq.n	800268a <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_ADC_Init+0x1a8>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_ADC_Init+0x1a8>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_ADC_Init+0x1aa>
 8002684:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002686:	2b00      	cmp	r3, #0
 8002688:	d108      	bne.n	800269c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800268a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	431a      	orrs	r2, r3
 8002698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7e5b      	ldrb	r3, [r3, #25]
 80026a0:	035b      	lsls	r3, r3, #13
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026a6:	2a01      	cmp	r2, #1
 80026a8:	d002      	beq.n	80026b0 <HAL_ADC_Init+0x1d4>
 80026aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ae:	e000      	b.n	80026b2 <HAL_ADC_Init+0x1d6>
 80026b0:	2200      	movs	r2, #0
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4313      	orrs	r3, r2
 80026c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026c2:	4313      	orrs	r3, r2
 80026c4:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d11b      	bne.n	8002708 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7e5b      	ldrb	r3, [r3, #25]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	3b01      	subs	r3, #1
 80026de:	045a      	lsls	r2, r3, #17
 80026e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	663b      	str	r3, [r7, #96]	; 0x60
 80026ea:	e00d      	b.n	8002708 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	2b01      	cmp	r3, #1
 800270e:	d007      	beq.n	8002720 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	4313      	orrs	r3, r2
 800271a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800271c:	4313      	orrs	r3, r2
 800271e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b00      	cmp	r3, #0
 800272c:	d114      	bne.n	8002758 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800273c:	f023 0302 	bic.w	r3, r3, #2
 8002740:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7e1b      	ldrb	r3, [r3, #24]
 8002746:	039a      	lsls	r2, r3, #14
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4313      	orrs	r3, r2
 8002752:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002754:	4313      	orrs	r3, r2
 8002756:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_ADC_Init+0x308>)
 8002760:	4013      	ands	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002768:	430b      	orrs	r3, r1
 800276a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d10c      	bne.n	800278e <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f023 010f 	bic.w	r1, r3, #15
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	1e5a      	subs	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
 800278c:	e007      	b.n	800279e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 020f 	bic.w	r2, r2, #15
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f023 0303 	bic.w	r3, r3, #3
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
 80027b4:	e00a      	b.n	80027cc <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f023 0312 	bic.w	r3, r3, #18
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80027cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3768      	adds	r7, #104	; 0x68
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000000 	.word	0x20000000
 80027dc:	431bde83 	.word	0x431bde83
 80027e0:	50000300 	.word	0x50000300
 80027e4:	fff0c007 	.word	0xfff0c007

080027e8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d158      	bne.n	80028b4 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_ADC_Start+0x28>
 800280c:	2302      	movs	r3, #2
 800280e:	e054      	b.n	80028ba <HAL_ADC_Start+0xd2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fbcd 	bl	8002fb8 <ADC_Enable>
 800281e:	4603      	mov	r3, r0
 8002820:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d140      	bne.n	80028aa <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800285e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002872:	d106      	bne.n	8002882 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f023 0206 	bic.w	r2, r3, #6
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
 8002880:	e002      	b.n	8002888 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	221c      	movs	r2, #28
 8002896:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0204 	orr.w	r2, r2, #4
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	e006      	b.n	80028b8 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028b2:	e001      	b.n	80028b8 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
 80028b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d102      	bne.n	80028e0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80028da:	2308      	movs	r3, #8
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e02e      	b.n	800293e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <HAL_ADC_PollForConversion+0x168>)
 80028e2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d112      	bne.n	8002916 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d11d      	bne.n	800293a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e086      	b.n	8002a24 <HAL_ADC_PollForConversion+0x160>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e074      	b.n	8002a24 <HAL_ADC_PollForConversion+0x160>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800293a:	230c      	movs	r3, #12
 800293c:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002946:	f7ff fd99 	bl	800247c <HAL_GetTick>
 800294a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800294c:	e01a      	b.n	8002984 <HAL_ADC_PollForConversion+0xc0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d016      	beq.n	8002984 <HAL_ADC_PollForConversion+0xc0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_ADC_PollForConversion+0xa8>
 800295c:	f7ff fd8e 	bl	800247c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d20b      	bcs.n	8002984 <HAL_ADC_PollForConversion+0xc0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0204 	orr.w	r2, r3, #4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e04f      	b.n	8002a24 <HAL_ADC_PollForConversion+0x160>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0dd      	beq.n	800294e <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d131      	bne.n	8002a10 <HAL_ADC_PollForConversion+0x14c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d12c      	bne.n	8002a10 <HAL_ADC_PollForConversion+0x14c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d125      	bne.n	8002a10 <HAL_ADC_PollForConversion+0x14c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d112      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x134>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d112      	bne.n	8002a10 <HAL_ADC_PollForConversion+0x14c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
 80029f6:	e00b      	b.n	8002a10 <HAL_ADC_PollForConversion+0x14c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <HAL_ADC_PollForConversion+0x15e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	50000300 	.word	0x50000300

08002a30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b09b      	sub	sp, #108	; 0x6c
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x22>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e299      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x556>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 827d 	bne.w	8002f80 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d81c      	bhi.n	8002ac8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	231f      	movs	r3, #31
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	4019      	ands	r1, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fa00 f203 	lsl.w	r2, r0, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac6:	e063      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	d81e      	bhi.n	8002b0e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	3b1e      	subs	r3, #30
 8002ae4:	221f      	movs	r2, #31
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	4019      	ands	r1, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	3b1e      	subs	r3, #30
 8002b00:	fa00 f203 	lsl.w	r2, r0, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	635a      	str	r2, [r3, #52]	; 0x34
 8002b0c:	e040      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b0e      	cmp	r3, #14
 8002b14:	d81e      	bhi.n	8002b54 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	3b3c      	subs	r3, #60	; 0x3c
 8002b2a:	221f      	movs	r2, #31
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	4019      	ands	r1, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	3b3c      	subs	r3, #60	; 0x3c
 8002b46:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
 8002b52:	e01d      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	3b5a      	subs	r3, #90	; 0x5a
 8002b68:	221f      	movs	r2, #31
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	4019      	ands	r1, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	3b5a      	subs	r3, #90	; 0x5a
 8002b84:	fa00 f203 	lsl.w	r2, r0, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 80e5 	bne.w	8002d6a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b09      	cmp	r3, #9
 8002ba6:	d91c      	bls.n	8002be2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6999      	ldr	r1, [r3, #24]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b1e      	subs	r3, #30
 8002bba:	2207      	movs	r2, #7
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	4019      	ands	r1, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6898      	ldr	r0, [r3, #8]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b1e      	subs	r3, #30
 8002bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	619a      	str	r2, [r3, #24]
 8002be0:	e019      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6959      	ldr	r1, [r3, #20]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	4019      	ands	r1, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6898      	ldr	r0, [r3, #8]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	08db      	lsrs	r3, r3, #3
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d84f      	bhi.n	8002cd8 <HAL_ADC_ConfigChannel+0x28c>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <HAL_ADC_ConfigChannel+0x1f4>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c73 	.word	0x08002c73
 8002c48:	08002c95 	.word	0x08002c95
 8002c4c:	08002cb7 	.word	0x08002cb7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c56:	4b99      	ldr	r3, [pc, #612]	; (8002ebc <HAL_ADC_ConfigChannel+0x470>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	0691      	lsls	r1, r2, #26
 8002c60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c62:	430a      	orrs	r2, r1
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c70:	e07e      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c78:	4b90      	ldr	r3, [pc, #576]	; (8002ebc <HAL_ADC_ConfigChannel+0x470>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	0691      	lsls	r1, r2, #26
 8002c82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c84:	430a      	orrs	r2, r1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c90:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c92:	e06d      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c9a:	4b88      	ldr	r3, [pc, #544]	; (8002ebc <HAL_ADC_ConfigChannel+0x470>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	0691      	lsls	r1, r2, #26
 8002ca4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cb2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cb4:	e05c      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cbc:	4b7f      	ldr	r3, [pc, #508]	; (8002ebc <HAL_ADC_ConfigChannel+0x470>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	0691      	lsls	r1, r2, #26
 8002cc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cd4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cd6:	e04b      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	069b      	lsls	r3, r3, #26
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d107      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cfa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	069b      	lsls	r3, r3, #26
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d107      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d1e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	069b      	lsls	r3, r3, #26
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d42:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	069b      	lsls	r3, r3, #26
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d10a      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d66:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002d68:	e001      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002d6a:	bf00      	nop
 8002d6c:	e000      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002d6e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d108      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x344>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x344>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x346>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 80ff 	bne.w	8002f96 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d00f      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	400a      	ands	r2, r1
 8002dba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002dbe:	e049      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b09      	cmp	r3, #9
 8002de0:	d91c      	bls.n	8002e1c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6999      	ldr	r1, [r3, #24]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	3b1b      	subs	r3, #27
 8002df4:	2207      	movs	r2, #7
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	4019      	ands	r1, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6898      	ldr	r0, [r3, #8]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b1b      	subs	r3, #27
 8002e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	619a      	str	r2, [r3, #24]
 8002e1a:	e01b      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6959      	ldr	r1, [r3, #20]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	2207      	movs	r2, #7
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	4019      	ands	r1, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6898      	ldr	r0, [r3, #8]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	fa00 f203 	lsl.w	r2, r0, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <HAL_ADC_ConfigChannel+0x474>)
 8002e56:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d105      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d014      	beq.n	8002e96 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e70:	2b11      	cmp	r3, #17
 8002e72:	d105      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e84:	2b12      	cmp	r3, #18
 8002e86:	f040 8086 	bne.w	8002f96 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d17f      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x478>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d106      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x478>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e005      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x47a>
 8002eba:	bf00      	nop
 8002ebc:	83fff000 	.word	0x83fff000
 8002ec0:	50000300 	.word	0x50000300
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d150      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002eca:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d010      	beq.n	8002ef2 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d107      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x4a0>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x4a0>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_ADC_ConfigChannel+0x4a2>
 8002eec:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d13c      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d11d      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x4ea>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f02:	d118      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f0e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_ADC_ConfigChannel+0x564>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <HAL_ADC_ConfigChannel+0x568>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0c9a      	lsrs	r2, r3, #18
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f26:	e002      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f9      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f34:	e02e      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b11      	cmp	r3, #17
 8002f3c:	d10b      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x50a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f46:	d106      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f52:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f54:	e01e      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b12      	cmp	r3, #18
 8002f5c:	d11a      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f68:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f6a:	e013      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f7e:	e00a      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f043 0220 	orr.w	r2, r3, #32
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f92:	e000      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f94:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	376c      	adds	r7, #108	; 0x6c
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	431bde83 	.word	0x431bde83

08002fb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d108      	bne.n	8002fe4 <ADC_Enable+0x2c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <ADC_Enable+0x2c>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <ADC_Enable+0x2e>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d13c      	bne.n	8003064 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <ADC_Enable+0xb8>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00d      	beq.n	8003014 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f043 0210 	orr.w	r2, r3, #16
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e028      	b.n	8003066 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003024:	f7ff fa2a 	bl	800247c <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800302a:	e014      	b.n	8003056 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800302c:	f7ff fa26 	bl	800247c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d90d      	bls.n	8003056 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f043 0210 	orr.w	r2, r3, #16
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e007      	b.n	8003066 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d1e3      	bne.n	800302c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	8000003f 	.word	0x8000003f

08003074 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d108      	bne.n	80030a0 <ADC_Disable+0x2c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <ADC_Disable+0x2c>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <ADC_Disable+0x2e>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d040      	beq.n	8003128 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030d 	and.w	r3, r3, #13
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10f      	bne.n	80030d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0202 	orr.w	r2, r2, #2
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2203      	movs	r2, #3
 80030ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80030cc:	f7ff f9d6 	bl	800247c <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030d2:	e022      	b.n	800311a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f043 0210 	orr.w	r2, r3, #16
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e01c      	b.n	800312a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030f0:	f7ff f9c4 	bl	800247c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d90d      	bls.n	800311a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f043 0210 	orr.w	r2, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e007      	b.n	800312a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d0e3      	beq.n	80030f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800315c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	60d3      	str	r3, [r2, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <__NVIC_GetPriorityGrouping+0x18>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 0307 	and.w	r3, r3, #7
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	db0b      	blt.n	80031c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	f003 021f 	and.w	r2, r3, #31
 80031b0:	4907      	ldr	r1, [pc, #28]	; (80031d0 <__NVIC_EnableIRQ+0x38>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2001      	movs	r0, #1
 80031ba:	fa00 f202 	lsl.w	r2, r0, r2
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000e100 	.word	0xe000e100

080031d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	db0a      	blt.n	80031fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	490c      	ldr	r1, [pc, #48]	; (8003220 <__NVIC_SetPriority+0x4c>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	440b      	add	r3, r1
 80031f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031fc:	e00a      	b.n	8003214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4908      	ldr	r1, [pc, #32]	; (8003224 <__NVIC_SetPriority+0x50>)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	3b04      	subs	r3, #4
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	440b      	add	r3, r1
 8003212:	761a      	strb	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000e100 	.word	0xe000e100
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f1c3 0307 	rsb	r3, r3, #7
 8003242:	2b04      	cmp	r3, #4
 8003244:	bf28      	it	cs
 8003246:	2304      	movcs	r3, #4
 8003248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3304      	adds	r3, #4
 800324e:	2b06      	cmp	r3, #6
 8003250:	d902      	bls.n	8003258 <NVIC_EncodePriority+0x30>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3b03      	subs	r3, #3
 8003256:	e000      	b.n	800325a <NVIC_EncodePriority+0x32>
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	401a      	ands	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003270:	f04f 31ff 	mov.w	r1, #4294967295
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43d9      	mvns	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	4313      	orrs	r3, r2
         );
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ff4c 	bl	8003134 <__NVIC_SetPriorityGrouping>
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b6:	f7ff ff61 	bl	800317c <__NVIC_GetPriorityGrouping>
 80032ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	6978      	ldr	r0, [r7, #20]
 80032c2:	f7ff ffb1 	bl	8003228 <NVIC_EncodePriority>
 80032c6:	4602      	mov	r2, r0
 80032c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff80 	bl	80031d4 <__NVIC_SetPriority>
}
 80032d4:	bf00      	nop
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ff54 	bl	8003198 <__NVIC_EnableIRQ>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003306:	e14e      	b.n	80035a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	2101      	movs	r1, #1
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8140 	beq.w	80035a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d00b      	beq.n	8003340 <HAL_GPIO_Init+0x48>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d007      	beq.n	8003340 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003334:	2b11      	cmp	r3, #17
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b12      	cmp	r3, #18
 800333e:	d130      	bne.n	80033a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003376:	2201      	movs	r2, #1
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	f003 0201 	and.w	r2, r3, #1
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	2203      	movs	r2, #3
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0xea>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b12      	cmp	r3, #18
 80033e0:	d123      	bne.n	800342a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	08da      	lsrs	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3208      	adds	r2, #8
 80033ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	220f      	movs	r2, #15
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	08da      	lsrs	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3208      	adds	r2, #8
 8003424:	6939      	ldr	r1, [r7, #16]
 8003426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2203      	movs	r2, #3
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0203 	and.w	r2, r3, #3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 809a 	beq.w	80035a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346c:	4b55      	ldr	r3, [pc, #340]	; (80035c4 <HAL_GPIO_Init+0x2cc>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	4a54      	ldr	r2, [pc, #336]	; (80035c4 <HAL_GPIO_Init+0x2cc>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6193      	str	r3, [r2, #24]
 8003478:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <HAL_GPIO_Init+0x2cc>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003484:	4a50      	ldr	r2, [pc, #320]	; (80035c8 <HAL_GPIO_Init+0x2d0>)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034ae:	d013      	beq.n	80034d8 <HAL_GPIO_Init+0x1e0>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a46      	ldr	r2, [pc, #280]	; (80035cc <HAL_GPIO_Init+0x2d4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00d      	beq.n	80034d4 <HAL_GPIO_Init+0x1dc>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a45      	ldr	r2, [pc, #276]	; (80035d0 <HAL_GPIO_Init+0x2d8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <HAL_GPIO_Init+0x1d8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a44      	ldr	r2, [pc, #272]	; (80035d4 <HAL_GPIO_Init+0x2dc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_GPIO_Init+0x1d4>
 80034c8:	2303      	movs	r3, #3
 80034ca:	e006      	b.n	80034da <HAL_GPIO_Init+0x1e2>
 80034cc:	2305      	movs	r3, #5
 80034ce:	e004      	b.n	80034da <HAL_GPIO_Init+0x1e2>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e002      	b.n	80034da <HAL_GPIO_Init+0x1e2>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_GPIO_Init+0x1e2>
 80034d8:	2300      	movs	r3, #0
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	f002 0203 	and.w	r2, r2, #3
 80034e0:	0092      	lsls	r2, r2, #2
 80034e2:	4093      	lsls	r3, r2
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ea:	4937      	ldr	r1, [pc, #220]	; (80035c8 <HAL_GPIO_Init+0x2d0>)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	3302      	adds	r3, #2
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f8:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <HAL_GPIO_Init+0x2e0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43db      	mvns	r3, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800351c:	4a2e      	ldr	r2, [pc, #184]	; (80035d8 <HAL_GPIO_Init+0x2e0>)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_GPIO_Init+0x2e0>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003546:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <HAL_GPIO_Init+0x2e0>)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <HAL_GPIO_Init+0x2e0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_GPIO_Init+0x2e0>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <HAL_GPIO_Init+0x2e0>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	43db      	mvns	r3, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4013      	ands	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800359a:	4a0f      	ldr	r2, [pc, #60]	; (80035d8 <HAL_GPIO_Init+0x2e0>)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3301      	adds	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f aea9 	bne.w	8003308 <HAL_GPIO_Init+0x10>
  }
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40010000 	.word	0x40010000
 80035cc:	48000400 	.word	0x48000400
 80035d0:	48000800 	.word	0x48000800
 80035d4:	48000c00 	.word	0x48000c00
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
 80035e8:	4613      	mov	r3, r2
 80035ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ec:	787b      	ldrb	r3, [r7, #1]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035f8:	e002      	b.n	8003600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e081      	b.n	8003722 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fe fb9c 	bl	8001d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2224      	movs	r2, #36	; 0x24
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800365c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800366c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	e006      	b.n	8003694 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003692:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d104      	bne.n	80036a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	ea42 0103 	orr.w	r1, r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	021a      	lsls	r2, r3, #8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69d9      	ldr	r1, [r3, #28]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1a      	ldr	r2, [r3, #32]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	461a      	mov	r2, r3
 800373a:	4603      	mov	r3, r0
 800373c:	817b      	strh	r3, [r7, #10]
 800373e:	460b      	mov	r3, r1
 8003740:	813b      	strh	r3, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b20      	cmp	r3, #32
 8003750:	f040 80f9 	bne.w	8003946 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_I2C_Mem_Write+0x34>
 800375a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0ed      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_I2C_Mem_Write+0x4e>
 8003776:	2302      	movs	r3, #2
 8003778:	e0e6      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003782:	f7fe fe7b 	bl	800247c <HAL_GetTick>
 8003786:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2319      	movs	r3, #25
 800378e:	2201      	movs	r2, #1
 8003790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fac3 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0d1      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2221      	movs	r2, #33	; 0x21
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037cc:	88f8      	ldrh	r0, [r7, #6]
 80037ce:	893a      	ldrh	r2, [r7, #8]
 80037d0:	8979      	ldrh	r1, [r7, #10]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	4603      	mov	r3, r0
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f9d3 	bl	8003b88 <I2C_RequestMemoryWrite>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0a9      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2bff      	cmp	r3, #255	; 0xff
 80037fc:	d90e      	bls.n	800381c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	22ff      	movs	r2, #255	; 0xff
 8003802:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	b2da      	uxtb	r2, r3
 800380a:	8979      	ldrh	r1, [r7, #10]
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fba5 	bl	8003f64 <I2C_TransferConfig>
 800381a:	e00f      	b.n	800383c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	b2da      	uxtb	r2, r3
 800382c:	8979      	ldrh	r1, [r7, #10]
 800382e:	2300      	movs	r3, #0
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fb94 	bl	8003f64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 faad 	bl	8003da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e07b      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d034      	beq.n	80038f4 <HAL_I2C_Mem_Write+0x1c8>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	d130      	bne.n	80038f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	2200      	movs	r2, #0
 800389a:	2180      	movs	r1, #128	; 0x80
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fa3f 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e04d      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2bff      	cmp	r3, #255	; 0xff
 80038b4:	d90e      	bls.n	80038d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	22ff      	movs	r2, #255	; 0xff
 80038ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	8979      	ldrh	r1, [r7, #10]
 80038c4:	2300      	movs	r3, #0
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fb49 	bl	8003f64 <I2C_TransferConfig>
 80038d2:	e00f      	b.n	80038f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	8979      	ldrh	r1, [r7, #10]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fb38 	bl	8003f64 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d19e      	bne.n	800383c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fa8c 	bl	8003e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e01a      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2220      	movs	r2, #32
 8003918:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_I2C_Mem_Write+0x224>)
 8003926:	400b      	ands	r3, r1
 8003928:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	fe00e800 	.word	0xfe00e800

08003954 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4603      	mov	r3, r0
 8003964:	817b      	strh	r3, [r7, #10]
 8003966:	460b      	mov	r3, r1
 8003968:	813b      	strh	r3, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b20      	cmp	r3, #32
 8003978:	f040 80fd 	bne.w	8003b76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_I2C_Mem_Read+0x34>
 8003982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0f1      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_I2C_Mem_Read+0x4e>
 800399e:	2302      	movs	r3, #2
 80039a0:	e0ea      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039aa:	f7fe fd67 	bl	800247c <HAL_GetTick>
 80039ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2319      	movs	r3, #25
 80039b6:	2201      	movs	r2, #1
 80039b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f9af 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0d5      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2222      	movs	r2, #34	; 0x22
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a3a      	ldr	r2, [r7, #32]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039f4:	88f8      	ldrh	r0, [r7, #6]
 80039f6:	893a      	ldrh	r2, [r7, #8]
 80039f8:	8979      	ldrh	r1, [r7, #10]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	4603      	mov	r3, r0
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f913 	bl	8003c30 <I2C_RequestMemoryRead>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0ad      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2bff      	cmp	r3, #255	; 0xff
 8003a24:	d90e      	bls.n	8003a44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	22ff      	movs	r2, #255	; 0xff
 8003a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	8979      	ldrh	r1, [r7, #10]
 8003a34:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <HAL_I2C_Mem_Read+0x22c>)
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fa91 	bl	8003f64 <I2C_TransferConfig>
 8003a42:	e00f      	b.n	8003a64 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	8979      	ldrh	r1, [r7, #10]
 8003a56:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <HAL_I2C_Mem_Read+0x22c>)
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fa80 	bl	8003f64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f956 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07c      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d034      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x1d0>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d130      	bne.n	8003b24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f927 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e04d      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2bff      	cmp	r3, #255	; 0xff
 8003ae4:	d90e      	bls.n	8003b04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	22ff      	movs	r2, #255	; 0xff
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	8979      	ldrh	r1, [r7, #10]
 8003af4:	2300      	movs	r3, #0
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fa31 	bl	8003f64 <I2C_TransferConfig>
 8003b02:	e00f      	b.n	8003b24 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	8979      	ldrh	r1, [r7, #10]
 8003b16:	2300      	movs	r3, #0
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fa20 	bl	8003f64 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d19a      	bne.n	8003a64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f974 	bl	8003e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e01a      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2220      	movs	r2, #32
 8003b48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_I2C_Mem_Read+0x230>)
 8003b56:	400b      	ands	r3, r1
 8003b58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
  }
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	80002400 	.word	0x80002400
 8003b84:	fe00e800 	.word	0xfe00e800

08003b88 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	813b      	strh	r3, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	8979      	ldrh	r1, [r7, #10]
 8003ba8:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <I2C_RequestMemoryWrite+0xa4>)
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f9d7 	bl	8003f64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	69b9      	ldr	r1, [r7, #24]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f8f0 	bl	8003da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e02c      	b.n	8003c24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd0:	893b      	ldrh	r3, [r7, #8]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
 8003bda:	e015      	b.n	8003c08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	69b9      	ldr	r1, [r7, #24]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f8d6 	bl	8003da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e012      	b.n	8003c24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bfe:	893b      	ldrh	r3, [r7, #8]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f884 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	80002000 	.word	0x80002000

08003c30 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	817b      	strh	r3, [r7, #10]
 8003c42:	460b      	mov	r3, r1
 8003c44:	813b      	strh	r3, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	8979      	ldrh	r1, [r7, #10]
 8003c50:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <I2C_RequestMemoryRead+0xa4>)
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2300      	movs	r3, #0
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f984 	bl	8003f64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	69b9      	ldr	r1, [r7, #24]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f89d 	bl	8003da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e02c      	b.n	8003cca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d105      	bne.n	8003c82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c76:	893b      	ldrh	r3, [r7, #8]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c80:	e015      	b.n	8003cae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c82:	893b      	ldrh	r3, [r7, #8]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	69b9      	ldr	r1, [r7, #24]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f883 	bl	8003da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e012      	b.n	8003cca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca4:	893b      	ldrh	r3, [r7, #8]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2140      	movs	r1, #64	; 0x40
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f831 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	80002000 	.word	0x80002000

08003cd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d103      	bne.n	8003cf6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d007      	beq.n	8003d14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	619a      	str	r2, [r3, #24]
  }
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d30:	e022      	b.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d01e      	beq.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3a:	f7fe fb9f 	bl	800247c <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d113      	bne.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e00f      	b.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4013      	ands	r3, r2
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d0cd      	beq.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dac:	e02c      	b.n	8003e08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f870 	bl	8003e98 <I2C_IsAcknowledgeFailed>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e02a      	b.n	8003e18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d01e      	beq.n	8003e08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dca:	f7fe fb57 	bl	800247c <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d302      	bcc.n	8003de0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d113      	bne.n	8003e08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	f043 0220 	orr.w	r2, r3, #32
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e007      	b.n	8003e18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d1cb      	bne.n	8003dae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e2c:	e028      	b.n	8003e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f830 	bl	8003e98 <I2C_IsAcknowledgeFailed>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e026      	b.n	8003e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe fb1b 	bl	800247c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d113      	bne.n	8003e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e007      	b.n	8003e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d1cf      	bne.n	8003e2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d151      	bne.n	8003f56 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb2:	e022      	b.n	8003efa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	d01e      	beq.n	8003efa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebc:	f7fe fade 	bl	800247c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d302      	bcc.n	8003ed2 <I2C_IsAcknowledgeFailed+0x3a>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d113      	bne.n	8003efa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	f043 0220 	orr.w	r2, r3, #32
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e02e      	b.n	8003f58 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d1d5      	bne.n	8003eb4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2220      	movs	r2, #32
 8003f16:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff fedd 	bl	8003cd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <I2C_IsAcknowledgeFailed+0xc8>)
 8003f2a:	400b      	ands	r3, r1
 8003f2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f043 0204 	orr.w	r2, r3, #4
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	fe00e800 	.word	0xfe00e800

08003f64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	817b      	strh	r3, [r7, #10]
 8003f72:	4613      	mov	r3, r2
 8003f74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	0d5b      	lsrs	r3, r3, #21
 8003f80:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <I2C_TransferConfig+0x58>)
 8003f86:	430b      	orrs	r3, r1
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	ea02 0103 	and.w	r1, r2, r3
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f94:	7a7b      	ldrb	r3, [r7, #9]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	03ff63ff 	.word	0x03ff63ff

08003fc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d138      	bne.n	8004048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e032      	b.n	800404a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	; 0x24
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b20      	cmp	r3, #32
 800406a:	d139      	bne.n	80040e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004076:	2302      	movs	r3, #2
 8004078:	e033      	b.n	80040e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2224      	movs	r2, #36	; 0x24
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e000      	b.n	80040e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
  }
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f000 bef4 	b.w	8004ef2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410a:	1d3b      	adds	r3, r7, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 816a 	beq.w	80043ee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800411a:	4bb3      	ldr	r3, [pc, #716]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b04      	cmp	r3, #4
 8004124:	d00c      	beq.n	8004140 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004126:	4bb0      	ldr	r3, [pc, #704]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b08      	cmp	r3, #8
 8004130:	d159      	bne.n	80041e6 <HAL_RCC_OscConfig+0xf6>
 8004132:	4bad      	ldr	r3, [pc, #692]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413e:	d152      	bne.n	80041e6 <HAL_RCC_OscConfig+0xf6>
 8004140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004144:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004148:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004154:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d102      	bne.n	8004172 <HAL_RCC_OscConfig+0x82>
 800416c:	4b9e      	ldr	r3, [pc, #632]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	e015      	b.n	800419e <HAL_RCC_OscConfig+0xae>
 8004172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004176:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800418a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800418e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800419a:	4b93      	ldr	r3, [pc, #588]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041a2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80041a6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80041aa:	fa92 f2a2 	rbit	r2, r2
 80041ae:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80041b2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80041b6:	fab2 f282 	clz	r2, r2
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	f042 0220 	orr.w	r2, r2, #32
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	f002 021f 	and.w	r2, r2, #31
 80041c6:	2101      	movs	r1, #1
 80041c8:	fa01 f202 	lsl.w	r2, r1, r2
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 810c 	beq.w	80043ec <HAL_RCC_OscConfig+0x2fc>
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f040 8106 	bne.w	80043ec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f000 be86 	b.w	8004ef2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f0:	d106      	bne.n	8004200 <HAL_RCC_OscConfig+0x110>
 80041f2:	4b7d      	ldr	r3, [pc, #500]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a7c      	ldr	r2, [pc, #496]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e030      	b.n	8004262 <HAL_RCC_OscConfig+0x172>
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0x134>
 800420a:	4b77      	ldr	r3, [pc, #476]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a76      	ldr	r2, [pc, #472]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b74      	ldr	r3, [pc, #464]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a73      	ldr	r2, [pc, #460]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 800421c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e01e      	b.n	8004262 <HAL_RCC_OscConfig+0x172>
 8004224:	1d3b      	adds	r3, r7, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800422e:	d10c      	bne.n	800424a <HAL_RCC_OscConfig+0x15a>
 8004230:	4b6d      	ldr	r3, [pc, #436]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a6c      	ldr	r2, [pc, #432]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a69      	ldr	r2, [pc, #420]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	e00b      	b.n	8004262 <HAL_RCC_OscConfig+0x172>
 800424a:	4b67      	ldr	r3, [pc, #412]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a66      	ldr	r2, [pc, #408]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b64      	ldr	r3, [pc, #400]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a63      	ldr	r2, [pc, #396]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 800425c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004260:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004262:	4b61      	ldr	r3, [pc, #388]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	f023 020f 	bic.w	r2, r3, #15
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	495d      	ldr	r1, [pc, #372]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d059      	beq.n	8004334 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe f8fc 	bl	800247c <HAL_GetTick>
 8004284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004288:	e00a      	b.n	80042a0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800428a:	f7fe f8f7 	bl	800247c <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d902      	bls.n	80042a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	f000 be29 	b.w	8004ef2 <HAL_RCC_OscConfig+0xe02>
 80042a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80042ac:	fa93 f3a3 	rbit	r3, r3
 80042b0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80042b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b8:	fab3 f383 	clz	r3, r3
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d102      	bne.n	80042d2 <HAL_RCC_OscConfig+0x1e2>
 80042cc:	4b46      	ldr	r3, [pc, #280]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	e015      	b.n	80042fe <HAL_RCC_OscConfig+0x20e>
 80042d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80042e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80042ee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80042fa:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004302:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004306:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800430a:	fa92 f2a2 	rbit	r2, r2
 800430e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004312:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004316:	fab2 f282 	clz	r2, r2
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	f042 0220 	orr.w	r2, r2, #32
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f002 021f 	and.w	r2, r2, #31
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0ab      	beq.n	800428a <HAL_RCC_OscConfig+0x19a>
 8004332:	e05c      	b.n	80043ee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fe f8a2 	bl	800247c <HAL_GetTick>
 8004338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800433e:	f7fe f89d 	bl	800247c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d902      	bls.n	8004354 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	f000 bdcf 	b.w	8004ef2 <HAL_RCC_OscConfig+0xe02>
 8004354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004358:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004368:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436c:	fab3 f383 	clz	r3, r3
 8004370:	b2db      	uxtb	r3, r3
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d102      	bne.n	8004386 <HAL_RCC_OscConfig+0x296>
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	e015      	b.n	80043b2 <HAL_RCC_OscConfig+0x2c2>
 8004386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800438a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800439a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800439e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80043a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80043a6:	fa93 f3a3 	rbit	r3, r3
 80043aa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_RCC_OscConfig+0x2f8>)
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80043ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80043be:	fa92 f2a2 	rbit	r2, r2
 80043c2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80043c6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80043ca:	fab2 f282 	clz	r2, r2
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	f042 0220 	orr.w	r2, r2, #32
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	f002 021f 	and.w	r2, r2, #31
 80043da:	2101      	movs	r1, #1
 80043dc:	fa01 f202 	lsl.w	r2, r1, r2
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1ab      	bne.n	800433e <HAL_RCC_OscConfig+0x24e>
 80043e6:	e002      	b.n	80043ee <HAL_RCC_OscConfig+0x2fe>
 80043e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 816f 	beq.w	80046dc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043fe:	4bd0      	ldr	r3, [pc, #832]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800440a:	4bcd      	ldr	r3, [pc, #820]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b08      	cmp	r3, #8
 8004414:	d16c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x400>
 8004416:	4bca      	ldr	r3, [pc, #808]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d166      	bne.n	80044f0 <HAL_RCC_OscConfig+0x400>
 8004422:	2302      	movs	r3, #2
 8004424:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004434:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d102      	bne.n	8004452 <HAL_RCC_OscConfig+0x362>
 800444c:	4bbc      	ldr	r3, [pc, #752]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	e013      	b.n	800447a <HAL_RCC_OscConfig+0x38a>
 8004452:	2302      	movs	r3, #2
 8004454:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004464:	2302      	movs	r3, #2
 8004466:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800446a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004476:	4bb2      	ldr	r3, [pc, #712]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	2202      	movs	r2, #2
 800447c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004480:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004484:	fa92 f2a2 	rbit	r2, r2
 8004488:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800448c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004490:	fab2 f282 	clz	r2, r2
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	f042 0220 	orr.w	r2, r2, #32
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	f002 021f 	and.w	r2, r2, #31
 80044a0:	2101      	movs	r1, #1
 80044a2:	fa01 f202 	lsl.w	r2, r1, r2
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <HAL_RCC_OscConfig+0x3cc>
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d002      	beq.n	80044bc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f000 bd1b 	b.w	8004ef2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4ba0      	ldr	r3, [pc, #640]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	21f8      	movs	r1, #248	; 0xf8
 80044cc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80044d4:	fa91 f1a1 	rbit	r1, r1
 80044d8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80044dc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80044e0:	fab1 f181 	clz	r1, r1
 80044e4:	b2c9      	uxtb	r1, r1
 80044e6:	408b      	lsls	r3, r1
 80044e8:	4995      	ldr	r1, [pc, #596]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ee:	e0f5      	b.n	80046dc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044f0:	1d3b      	adds	r3, r7, #4
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 8085 	beq.w	8004606 <HAL_RCC_OscConfig+0x516>
 80044fc:	2301      	movs	r3, #1
 80044fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800450e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004512:	fab3 f383 	clz	r3, r3
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800451c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	461a      	mov	r2, r3
 8004524:	2301      	movs	r3, #1
 8004526:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd ffa8 	bl	800247c <HAL_GetTick>
 800452c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004530:	e00a      	b.n	8004548 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004532:	f7fd ffa3 	bl	800247c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d902      	bls.n	8004548 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	f000 bcd5 	b.w	8004ef2 <HAL_RCC_OscConfig+0xe02>
 8004548:	2302      	movs	r3, #2
 800454a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800455a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d102      	bne.n	8004578 <HAL_RCC_OscConfig+0x488>
 8004572:	4b73      	ldr	r3, [pc, #460]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	e013      	b.n	80045a0 <HAL_RCC_OscConfig+0x4b0>
 8004578:	2302      	movs	r3, #2
 800457a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004582:	fa93 f3a3 	rbit	r3, r3
 8004586:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800458a:	2302      	movs	r3, #2
 800458c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004590:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004594:	fa93 f3a3 	rbit	r3, r3
 8004598:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800459c:	4b68      	ldr	r3, [pc, #416]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	2202      	movs	r2, #2
 80045a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80045a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80045aa:	fa92 f2a2 	rbit	r2, r2
 80045ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80045b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80045b6:	fab2 f282 	clz	r2, r2
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	f042 0220 	orr.w	r2, r2, #32
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	f002 021f 	and.w	r2, r2, #31
 80045c6:	2101      	movs	r1, #1
 80045c8:	fa01 f202 	lsl.w	r2, r1, r2
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0af      	beq.n	8004532 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d2:	4b5b      	ldr	r3, [pc, #364]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045da:	1d3b      	adds	r3, r7, #4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	21f8      	movs	r1, #248	; 0xf8
 80045e2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80045ea:	fa91 f1a1 	rbit	r1, r1
 80045ee:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80045f2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80045f6:	fab1 f181 	clz	r1, r1
 80045fa:	b2c9      	uxtb	r1, r1
 80045fc:	408b      	lsls	r3, r1
 80045fe:	4950      	ldr	r1, [pc, #320]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]
 8004604:	e06a      	b.n	80046dc <HAL_RCC_OscConfig+0x5ec>
 8004606:	2301      	movs	r3, #1
 8004608:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004618:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461c:	fab3 f383 	clz	r3, r3
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004626:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	461a      	mov	r2, r3
 800462e:	2300      	movs	r3, #0
 8004630:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004632:	f7fd ff23 	bl	800247c <HAL_GetTick>
 8004636:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463a:	e00a      	b.n	8004652 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463c:	f7fd ff1e 	bl	800247c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d902      	bls.n	8004652 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	f000 bc50 	b.w	8004ef2 <HAL_RCC_OscConfig+0xe02>
 8004652:	2302      	movs	r3, #2
 8004654:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800465c:	fa93 f3a3 	rbit	r3, r3
 8004660:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004668:	fab3 f383 	clz	r3, r3
 800466c:	b2db      	uxtb	r3, r3
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d102      	bne.n	8004682 <HAL_RCC_OscConfig+0x592>
 800467c:	4b30      	ldr	r3, [pc, #192]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	e013      	b.n	80046aa <HAL_RCC_OscConfig+0x5ba>
 8004682:	2302      	movs	r3, #2
 8004684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004694:	2302      	movs	r3, #2
 8004696:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800469a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800469e:	fa93 f3a3 	rbit	r3, r3
 80046a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046a6:	4b26      	ldr	r3, [pc, #152]	; (8004740 <HAL_RCC_OscConfig+0x650>)
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2202      	movs	r2, #2
 80046ac:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80046b0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80046b4:	fa92 f2a2 	rbit	r2, r2
 80046b8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80046bc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80046c0:	fab2 f282 	clz	r2, r2
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	f042 0220 	orr.w	r2, r2, #32
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	f002 021f 	and.w	r2, r2, #31
 80046d0:	2101      	movs	r1, #1
 80046d2:	fa01 f202 	lsl.w	r2, r1, r2
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1af      	bne.n	800463c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046dc:	1d3b      	adds	r3, r7, #4
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80da 	beq.w	80048a0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ec:	1d3b      	adds	r3, r7, #4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d069      	beq.n	80047ca <HAL_RCC_OscConfig+0x6da>
 80046f6:	2301      	movs	r3, #1
 80046f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004700:	fa93 f3a3 	rbit	r3, r3
 8004704:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470c:	fab3 f383 	clz	r3, r3
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_OscConfig+0x654>)
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	461a      	mov	r2, r3
 800471c:	2301      	movs	r3, #1
 800471e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004720:	f7fd feac 	bl	800247c <HAL_GetTick>
 8004724:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004728:	e00e      	b.n	8004748 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800472a:	f7fd fea7 	bl	800247c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d906      	bls.n	8004748 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e3d9      	b.n	8004ef2 <HAL_RCC_OscConfig+0xe02>
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	10908120 	.word	0x10908120
 8004748:	2302      	movs	r3, #2
 800474a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800475a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800475e:	2202      	movs	r2, #2
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	fa93 f2a3 	rbit	r2, r3
 800476c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004776:	2202      	movs	r2, #2
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	fa93 f2a3 	rbit	r2, r3
 8004784:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004788:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478a:	4ba5      	ldr	r3, [pc, #660]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 800478c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800478e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004792:	2102      	movs	r1, #2
 8004794:	6019      	str	r1, [r3, #0]
 8004796:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	fa93 f1a3 	rbit	r1, r3
 80047a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80047a4:	6019      	str	r1, [r3, #0]
  return result;
 80047a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	2101      	movs	r1, #1
 80047be:	fa01 f303 	lsl.w	r3, r1, r3
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0b0      	beq.n	800472a <HAL_RCC_OscConfig+0x63a>
 80047c8:	e06a      	b.n	80048a0 <HAL_RCC_OscConfig+0x7b0>
 80047ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	fa93 f2a3 	rbit	r2, r3
 80047dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80047e0:	601a      	str	r2, [r3, #0]
  return result;
 80047e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80047e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e8:	fab3 f383 	clz	r3, r3
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	4b8c      	ldr	r3, [pc, #560]	; (8004a24 <HAL_RCC_OscConfig+0x934>)
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	461a      	mov	r2, r3
 80047f8:	2300      	movs	r3, #0
 80047fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fc:	f7fd fe3e 	bl	800247c <HAL_GetTick>
 8004800:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004804:	e009      	b.n	800481a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004806:	f7fd fe39 	bl	800247c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e36b      	b.n	8004ef2 <HAL_RCC_OscConfig+0xe02>
 800481a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800481e:	2202      	movs	r2, #2
 8004820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	fa93 f2a3 	rbit	r2, r3
 800482c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004836:	2202      	movs	r2, #2
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	fa93 f2a3 	rbit	r2, r3
 8004844:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800484e:	2202      	movs	r2, #2
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	fa93 f2a3 	rbit	r2, r3
 800485c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004860:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004862:	4b6f      	ldr	r3, [pc, #444]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 8004864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004866:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800486a:	2102      	movs	r1, #2
 800486c:	6019      	str	r1, [r3, #0]
 800486e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	fa93 f1a3 	rbit	r1, r3
 8004878:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800487c:	6019      	str	r1, [r3, #0]
  return result;
 800487e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	2101      	movs	r1, #1
 8004896:	fa01 f303 	lsl.w	r3, r1, r3
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1b2      	bne.n	8004806 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a0:	1d3b      	adds	r3, r7, #4
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8158 	beq.w	8004b60 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b6:	4b5a      	ldr	r3, [pc, #360]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d112      	bne.n	80048e8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	4b57      	ldr	r3, [pc, #348]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4a56      	ldr	r2, [pc, #344]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048cc:	61d3      	str	r3, [r2, #28]
 80048ce:	4b54      	ldr	r3, [pc, #336]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80048d6:	f107 0308 	add.w	r3, r7, #8
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	f107 0308 	add.w	r3, r7, #8
 80048e0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e8:	4b4f      	ldr	r3, [pc, #316]	; (8004a28 <HAL_RCC_OscConfig+0x938>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d11a      	bne.n	800492a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048f4:	4b4c      	ldr	r3, [pc, #304]	; (8004a28 <HAL_RCC_OscConfig+0x938>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a4b      	ldr	r2, [pc, #300]	; (8004a28 <HAL_RCC_OscConfig+0x938>)
 80048fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004900:	f7fd fdbc 	bl	800247c <HAL_GetTick>
 8004904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004908:	e009      	b.n	800491e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490a:	f7fd fdb7 	bl	800247c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e2e9      	b.n	8004ef2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491e:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <HAL_RCC_OscConfig+0x938>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0ef      	beq.n	800490a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d106      	bne.n	8004942 <HAL_RCC_OscConfig+0x852>
 8004934:	4b3a      	ldr	r3, [pc, #232]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	4a39      	ldr	r2, [pc, #228]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6213      	str	r3, [r2, #32]
 8004940:	e02f      	b.n	80049a2 <HAL_RCC_OscConfig+0x8b2>
 8004942:	1d3b      	adds	r3, r7, #4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10c      	bne.n	8004966 <HAL_RCC_OscConfig+0x876>
 800494c:	4b34      	ldr	r3, [pc, #208]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	4a33      	ldr	r2, [pc, #204]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	6213      	str	r3, [r2, #32]
 8004958:	4b31      	ldr	r3, [pc, #196]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	4a30      	ldr	r2, [pc, #192]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 800495e:	f023 0304 	bic.w	r3, r3, #4
 8004962:	6213      	str	r3, [r2, #32]
 8004964:	e01d      	b.n	80049a2 <HAL_RCC_OscConfig+0x8b2>
 8004966:	1d3b      	adds	r3, r7, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b05      	cmp	r3, #5
 800496e:	d10c      	bne.n	800498a <HAL_RCC_OscConfig+0x89a>
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	6213      	str	r3, [r2, #32]
 800497c:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4a27      	ldr	r2, [pc, #156]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6213      	str	r3, [r2, #32]
 8004988:	e00b      	b.n	80049a2 <HAL_RCC_OscConfig+0x8b2>
 800498a:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	4a24      	ldr	r2, [pc, #144]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	6213      	str	r3, [r2, #32]
 8004996:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a21      	ldr	r2, [pc, #132]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 800499c:	f023 0304 	bic.w	r3, r3, #4
 80049a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d06b      	beq.n	8004a84 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ac:	f7fd fd66 	bl	800247c <HAL_GetTick>
 80049b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b4:	e00b      	b.n	80049ce <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fd fd61 	bl	800247c <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e291      	b.n	8004ef2 <HAL_RCC_OscConfig+0xe02>
 80049ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80049d2:	2202      	movs	r2, #2
 80049d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	fa93 f2a3 	rbit	r2, r3
 80049e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80049ea:	2202      	movs	r2, #2
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	fa93 f2a3 	rbit	r2, r3
 80049f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80049fc:	601a      	str	r2, [r3, #0]
  return result;
 80049fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004a02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	fab3 f383 	clz	r3, r3
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f043 0302 	orr.w	r3, r3, #2
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d109      	bne.n	8004a2c <HAL_RCC_OscConfig+0x93c>
 8004a18:	4b01      	ldr	r3, [pc, #4]	; (8004a20 <HAL_RCC_OscConfig+0x930>)
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	e014      	b.n	8004a48 <HAL_RCC_OscConfig+0x958>
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	10908120 	.word	0x10908120
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004a30:	2202      	movs	r2, #2
 8004a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a34:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	fa93 f2a3 	rbit	r2, r3
 8004a3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	4bbb      	ldr	r3, [pc, #748]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004a4c:	2102      	movs	r1, #2
 8004a4e:	6011      	str	r1, [r2, #0]
 8004a50:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	fa92 f1a2 	rbit	r1, r2
 8004a5a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004a5e:	6011      	str	r1, [r2, #0]
  return result;
 8004a60:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	fab2 f282 	clz	r2, r2
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	f002 021f 	and.w	r2, r2, #31
 8004a76:	2101      	movs	r1, #1
 8004a78:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d099      	beq.n	80049b6 <HAL_RCC_OscConfig+0x8c6>
 8004a82:	e063      	b.n	8004b4c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a84:	f7fd fcfa 	bl	800247c <HAL_GetTick>
 8004a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8c:	e00b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8e:	f7fd fcf5 	bl	800247c <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e225      	b.n	8004ef2 <HAL_RCC_OscConfig+0xe02>
 8004aa6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004aaa:	2202      	movs	r2, #2
 8004aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	fa93 f2a3 	rbit	r2, r3
 8004ab8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	fa93 f2a3 	rbit	r2, r3
 8004ad0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ad4:	601a      	str	r2, [r3, #0]
  return result;
 8004ad6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ada:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f043 0302 	orr.w	r3, r3, #2
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d102      	bne.n	8004af6 <HAL_RCC_OscConfig+0xa06>
 8004af0:	4b90      	ldr	r3, [pc, #576]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	e00d      	b.n	8004b12 <HAL_RCC_OscConfig+0xa22>
 8004af6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004afa:	2202      	movs	r2, #2
 8004afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	fa93 f2a3 	rbit	r2, r3
 8004b08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	4b89      	ldr	r3, [pc, #548]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b16:	2102      	movs	r1, #2
 8004b18:	6011      	str	r1, [r2, #0]
 8004b1a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	fa92 f1a2 	rbit	r1, r2
 8004b24:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004b28:	6011      	str	r1, [r2, #0]
  return result;
 8004b2a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	fab2 f282 	clz	r2, r2
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	f002 021f 	and.w	r2, r2, #31
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f202 	lsl.w	r2, r1, r2
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1a0      	bne.n	8004a8e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d105      	bne.n	8004b60 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b54:	4b77      	ldr	r3, [pc, #476]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	4a76      	ldr	r2, [pc, #472]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 81c2 	beq.w	8004ef0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b6c:	4b71      	ldr	r3, [pc, #452]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	f000 819c 	beq.w	8004eb2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b7a:	1d3b      	adds	r3, r7, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	f040 8114 	bne.w	8004dae <HAL_RCC_OscConfig+0xcbe>
 8004b86:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004b8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	fa93 f2a3 	rbit	r2, r3
 8004b9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004b9e:	601a      	str	r2, [r3, #0]
  return result;
 8004ba0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ba4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fd fc5e 	bl	800247c <HAL_GetTick>
 8004bc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc4:	e009      	b.n	8004bda <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc6:	f7fd fc59 	bl	800247c <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e18b      	b.n	8004ef2 <HAL_RCC_OscConfig+0xe02>
 8004bda:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004bde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	fa93 f2a3 	rbit	r2, r3
 8004bee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004bf2:	601a      	str	r2, [r3, #0]
  return result;
 8004bf4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004bf8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bfa:	fab3 f383 	clz	r3, r3
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d102      	bne.n	8004c14 <HAL_RCC_OscConfig+0xb24>
 8004c0e:	4b49      	ldr	r3, [pc, #292]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	e01b      	b.n	8004c4c <HAL_RCC_OscConfig+0xb5c>
 8004c14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	fa93 f2a3 	rbit	r2, r3
 8004c28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	fa93 f2a3 	rbit	r2, r3
 8004c42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	4b3a      	ldr	r3, [pc, #232]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004c50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c54:	6011      	str	r1, [r2, #0]
 8004c56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	fa92 f1a2 	rbit	r1, r2
 8004c60:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004c64:	6011      	str	r1, [r2, #0]
  return result;
 8004c66:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	fab2 f282 	clz	r2, r2
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	f042 0220 	orr.w	r2, r2, #32
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	f002 021f 	and.w	r2, r2, #31
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d19e      	bne.n	8004bc6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c88:	4b2a      	ldr	r3, [pc, #168]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c96:	1d3b      	adds	r3, r7, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	4925      	ldr	r1, [pc, #148]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]
 8004ca4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ca8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	fa93 f2a3 	rbit	r2, r3
 8004cb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004cbc:	601a      	str	r2, [r3, #0]
  return result;
 8004cbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004cc2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc4:	fab3 f383 	clz	r3, r3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fd fbcf 	bl	800247c <HAL_GetTick>
 8004cde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ce2:	e009      	b.n	8004cf8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fd fbca 	bl	800247c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0fc      	b.n	8004ef2 <HAL_RCC_OscConfig+0xe02>
 8004cf8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	fa93 f2a3 	rbit	r2, r3
 8004d0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d10:	601a      	str	r2, [r3, #0]
  return result;
 8004d12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d18:	fab3 f383 	clz	r3, r3
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d105      	bne.n	8004d38 <HAL_RCC_OscConfig+0xc48>
 8004d2c:	4b01      	ldr	r3, [pc, #4]	; (8004d34 <HAL_RCC_OscConfig+0xc44>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	e01e      	b.n	8004d70 <HAL_RCC_OscConfig+0xc80>
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000
 8004d38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	fa93 f2a3 	rbit	r2, r3
 8004d4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	fa93 f2a3 	rbit	r2, r3
 8004d66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	4b63      	ldr	r3, [pc, #396]	; (8004efc <HAL_RCC_OscConfig+0xe0c>)
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004d74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d78:	6011      	str	r1, [r2, #0]
 8004d7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	fa92 f1a2 	rbit	r1, r2
 8004d84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004d88:	6011      	str	r1, [r2, #0]
  return result;
 8004d8a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	fab2 f282 	clz	r2, r2
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	f042 0220 	orr.w	r2, r2, #32
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	f002 021f 	and.w	r2, r2, #31
 8004da0:	2101      	movs	r1, #1
 8004da2:	fa01 f202 	lsl.w	r2, r1, r2
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d09b      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xbf4>
 8004dac:	e0a0      	b.n	8004ef0 <HAL_RCC_OscConfig+0xe00>
 8004dae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004db2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	fa93 f2a3 	rbit	r2, r3
 8004dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dc6:	601a      	str	r2, [r3, #0]
  return result;
 8004dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dcc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004dd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	461a      	mov	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fd fb4a 	bl	800247c <HAL_GetTick>
 8004de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dec:	e009      	b.n	8004e02 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dee:	f7fd fb45 	bl	800247c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e077      	b.n	8004ef2 <HAL_RCC_OscConfig+0xe02>
 8004e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	fa93 f2a3 	rbit	r2, r3
 8004e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e1a:	601a      	str	r2, [r3, #0]
  return result;
 8004e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d102      	bne.n	8004e3c <HAL_RCC_OscConfig+0xd4c>
 8004e36:	4b31      	ldr	r3, [pc, #196]	; (8004efc <HAL_RCC_OscConfig+0xe0c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	e01b      	b.n	8004e74 <HAL_RCC_OscConfig+0xd84>
 8004e3c:	f107 0320 	add.w	r3, r7, #32
 8004e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	f107 0320 	add.w	r3, r7, #32
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	fa93 f2a3 	rbit	r2, r3
 8004e50:	f107 031c 	add.w	r3, r7, #28
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	f107 0318 	add.w	r3, r7, #24
 8004e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f107 0318 	add.w	r3, r7, #24
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	fa93 f2a3 	rbit	r2, r3
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	4b22      	ldr	r3, [pc, #136]	; (8004efc <HAL_RCC_OscConfig+0xe0c>)
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	f107 0210 	add.w	r2, r7, #16
 8004e78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e7c:	6011      	str	r1, [r2, #0]
 8004e7e:	f107 0210 	add.w	r2, r7, #16
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	fa92 f1a2 	rbit	r1, r2
 8004e88:	f107 020c 	add.w	r2, r7, #12
 8004e8c:	6011      	str	r1, [r2, #0]
  return result;
 8004e8e:	f107 020c 	add.w	r2, r7, #12
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	fab2 f282 	clz	r2, r2
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	f042 0220 	orr.w	r2, r2, #32
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	f002 021f 	and.w	r2, r2, #31
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d19e      	bne.n	8004dee <HAL_RCC_OscConfig+0xcfe>
 8004eb0:	e01e      	b.n	8004ef0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb2:	1d3b      	adds	r3, r7, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e018      	b.n	8004ef2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <HAL_RCC_OscConfig+0xe0c>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ec8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004ecc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ed0:	1d3b      	adds	r3, r7, #4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d108      	bne.n	8004eec <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004eda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000

08004f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b09e      	sub	sp, #120	; 0x78
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e162      	b.n	80051de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f18:	4b90      	ldr	r3, [pc, #576]	; (800515c <HAL_RCC_ClockConfig+0x25c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d910      	bls.n	8004f48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b8d      	ldr	r3, [pc, #564]	; (800515c <HAL_RCC_ClockConfig+0x25c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 0207 	bic.w	r2, r3, #7
 8004f2e:	498b      	ldr	r1, [pc, #556]	; (800515c <HAL_RCC_ClockConfig+0x25c>)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f36:	4b89      	ldr	r3, [pc, #548]	; (800515c <HAL_RCC_ClockConfig+0x25c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e14a      	b.n	80051de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f54:	4b82      	ldr	r3, [pc, #520]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	497f      	ldr	r1, [pc, #508]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80dc 	beq.w	800512c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d13c      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xf6>
 8004f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f84:	fa93 f3a3 	rbit	r3, r3
 8004f88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8c:	fab3 f383 	clz	r3, r3
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d102      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xa6>
 8004fa0:	4b6f      	ldr	r3, [pc, #444]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	e00f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0xc6>
 8004fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004faa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fae:	fa93 f3a3 	rbit	r3, r3
 8004fb2:	667b      	str	r3, [r7, #100]	; 0x64
 8004fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8004fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fbc:	fa93 f3a3 	rbit	r3, r3
 8004fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fc2:	4b67      	ldr	r3, [pc, #412]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fca:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fce:	fa92 f2a2 	rbit	r2, r2
 8004fd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fd6:	fab2 f282 	clz	r2, r2
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	f042 0220 	orr.w	r2, r2, #32
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	f002 021f 	and.w	r2, r2, #31
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d17b      	bne.n	80050ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0f3      	b.n	80051de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d13c      	bne.n	8005078 <HAL_RCC_ClockConfig+0x178>
 8004ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005002:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005006:	fa93 f3a3 	rbit	r3, r3
 800500a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800500c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500e:	fab3 f383 	clz	r3, r3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b01      	cmp	r3, #1
 8005020:	d102      	bne.n	8005028 <HAL_RCC_ClockConfig+0x128>
 8005022:	4b4f      	ldr	r3, [pc, #316]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	e00f      	b.n	8005048 <HAL_RCC_ClockConfig+0x148>
 8005028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800502c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005030:	fa93 f3a3 	rbit	r3, r3
 8005034:	647b      	str	r3, [r7, #68]	; 0x44
 8005036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800503a:	643b      	str	r3, [r7, #64]	; 0x40
 800503c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503e:	fa93 f3a3 	rbit	r3, r3
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005044:	4b46      	ldr	r3, [pc, #280]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800504c:	63ba      	str	r2, [r7, #56]	; 0x38
 800504e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005050:	fa92 f2a2 	rbit	r2, r2
 8005054:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005058:	fab2 f282 	clz	r2, r2
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	f042 0220 	orr.w	r2, r2, #32
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	f002 021f 	and.w	r2, r2, #31
 8005068:	2101      	movs	r1, #1
 800506a:	fa01 f202 	lsl.w	r2, r1, r2
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d13a      	bne.n	80050ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0b2      	b.n	80051de <HAL_RCC_ClockConfig+0x2de>
 8005078:	2302      	movs	r3, #2
 800507a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	fa93 f3a3 	rbit	r3, r3
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	d102      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x1a0>
 800509a:	4b31      	ldr	r3, [pc, #196]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	e00d      	b.n	80050bc <HAL_RCC_ClockConfig+0x1bc>
 80050a0:	2302      	movs	r3, #2
 80050a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	fa93 f3a3 	rbit	r3, r3
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
 80050ac:	2302      	movs	r3, #2
 80050ae:	623b      	str	r3, [r7, #32]
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	fa93 f3a3 	rbit	r3, r3
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	4b29      	ldr	r3, [pc, #164]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	2202      	movs	r2, #2
 80050be:	61ba      	str	r2, [r7, #24]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	fa92 f2a2 	rbit	r2, r2
 80050c6:	617a      	str	r2, [r7, #20]
  return result;
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	fab2 f282 	clz	r2, r2
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	f042 0220 	orr.w	r2, r2, #32
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	f002 021f 	and.w	r2, r2, #31
 80050da:	2101      	movs	r1, #1
 80050dc:	fa01 f202 	lsl.w	r2, r1, r2
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e079      	b.n	80051de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ea:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f023 0203 	bic.w	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	491a      	ldr	r1, [pc, #104]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050fc:	f7fd f9be 	bl	800247c <HAL_GetTick>
 8005100:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	e00a      	b.n	800511a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005104:	f7fd f9ba 	bl	800247c <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e061      	b.n	80051de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	4b11      	ldr	r3, [pc, #68]	; (8005160 <HAL_RCC_ClockConfig+0x260>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 020c 	and.w	r2, r3, #12
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	429a      	cmp	r2, r3
 800512a:	d1eb      	bne.n	8005104 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_ClockConfig+0x25c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d214      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b08      	ldr	r3, [pc, #32]	; (800515c <HAL_RCC_ClockConfig+0x25c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 0207 	bic.w	r2, r3, #7
 8005142:	4906      	ldr	r1, [pc, #24]	; (800515c <HAL_RCC_ClockConfig+0x25c>)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	4313      	orrs	r3, r2
 8005148:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b04      	ldr	r3, [pc, #16]	; (800515c <HAL_RCC_ClockConfig+0x25c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d005      	beq.n	8005164 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e040      	b.n	80051de <HAL_RCC_ClockConfig+0x2de>
 800515c:	40022000 	.word	0x40022000
 8005160:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005170:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <HAL_RCC_ClockConfig+0x2e8>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	491a      	ldr	r1, [pc, #104]	; (80051e8 <HAL_RCC_ClockConfig+0x2e8>)
 800517e:	4313      	orrs	r3, r2
 8005180:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800518e:	4b16      	ldr	r3, [pc, #88]	; (80051e8 <HAL_RCC_ClockConfig+0x2e8>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4912      	ldr	r1, [pc, #72]	; (80051e8 <HAL_RCC_ClockConfig+0x2e8>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80051a2:	f000 f829 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80051a6:	4601      	mov	r1, r0
 80051a8:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <HAL_RCC_ClockConfig+0x2e8>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b0:	22f0      	movs	r2, #240	; 0xf0
 80051b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	fa92 f2a2 	rbit	r2, r2
 80051ba:	60fa      	str	r2, [r7, #12]
  return result;
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	fab2 f282 	clz	r2, r2
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	40d3      	lsrs	r3, r2
 80051c6:	4a09      	ldr	r2, [pc, #36]	; (80051ec <HAL_RCC_ClockConfig+0x2ec>)
 80051c8:	5cd3      	ldrb	r3, [r2, r3]
 80051ca:	fa21 f303 	lsr.w	r3, r1, r3
 80051ce:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <HAL_RCC_ClockConfig+0x2f0>)
 80051d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <HAL_RCC_ClockConfig+0x2f4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fc ff26 	bl	8002028 <HAL_InitTick>
  
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3778      	adds	r7, #120	; 0x78
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40021000 	.word	0x40021000
 80051ec:	08009178 	.word	0x08009178
 80051f0:	20000000 	.word	0x20000000
 80051f4:	20000004 	.word	0x20000004

080051f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b08b      	sub	sp, #44	; 0x2c
 80051fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	2300      	movs	r3, #0
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005212:	4b29      	ldr	r3, [pc, #164]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b04      	cmp	r3, #4
 8005220:	d002      	beq.n	8005228 <HAL_RCC_GetSysClockFreq+0x30>
 8005222:	2b08      	cmp	r3, #8
 8005224:	d003      	beq.n	800522e <HAL_RCC_GetSysClockFreq+0x36>
 8005226:	e03c      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005228:	4b24      	ldr	r3, [pc, #144]	; (80052bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800522a:	623b      	str	r3, [r7, #32]
      break;
 800522c:	e03c      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005234:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005238:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	fa92 f2a2 	rbit	r2, r2
 8005240:	607a      	str	r2, [r7, #4]
  return result;
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	fab2 f282 	clz	r2, r2
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	40d3      	lsrs	r3, r2
 800524c:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800524e:	5cd3      	ldrb	r3, [r2, r3]
 8005250:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005252:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	220f      	movs	r2, #15
 800525c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	fa92 f2a2 	rbit	r2, r2
 8005264:	60fa      	str	r2, [r7, #12]
  return result;
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	fab2 f282 	clz	r2, r2
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	40d3      	lsrs	r3, r2
 8005270:	4a14      	ldr	r2, [pc, #80]	; (80052c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005272:	5cd3      	ldrb	r3, [r2, r3]
 8005274:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005280:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	fbb2 f2f3 	udiv	r2, r2, r3
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	fb02 f303 	mul.w	r3, r2, r3
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	e004      	b.n	800529c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4a0c      	ldr	r2, [pc, #48]	; (80052c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005296:	fb02 f303 	mul.w	r3, r2, r3
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	623b      	str	r3, [r7, #32]
      break;
 80052a0:	e002      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80052a4:	623b      	str	r3, [r7, #32]
      break;
 80052a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a8:	6a3b      	ldr	r3, [r7, #32]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	372c      	adds	r7, #44	; 0x2c
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000
 80052bc:	007a1200 	.word	0x007a1200
 80052c0:	08009190 	.word	0x08009190
 80052c4:	080091a0 	.word	0x080091a0
 80052c8:	003d0900 	.word	0x003d0900

080052cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d0:	4b03      	ldr	r3, [pc, #12]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052d2:	681b      	ldr	r3, [r3, #0]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000000 	.word	0x20000000

080052e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80052ea:	f7ff ffef 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 80052ee:	4601      	mov	r1, r0
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80052fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	fa92 f2a2 	rbit	r2, r2
 8005304:	603a      	str	r2, [r7, #0]
  return result;
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	fab2 f282 	clz	r2, r2
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	40d3      	lsrs	r3, r2
 8005310:	4a04      	ldr	r2, [pc, #16]	; (8005324 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005312:	5cd3      	ldrb	r3, [r2, r3]
 8005314:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40021000 	.word	0x40021000
 8005324:	08009188 	.word	0x08009188

08005328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800532e:	f7ff ffcd 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8005332:	4601      	mov	r1, r0
 8005334:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800533c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005340:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	fa92 f2a2 	rbit	r2, r2
 8005348:	603a      	str	r2, [r7, #0]
  return result;
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	fab2 f282 	clz	r2, r2
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	40d3      	lsrs	r3, r2
 8005354:	4a04      	ldr	r2, [pc, #16]	; (8005368 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005356:	5cd3      	ldrb	r3, [r2, r3]
 8005358:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021000 	.word	0x40021000
 8005368:	08009188 	.word	0x08009188

0800536c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	220f      	movs	r2, #15
 800537a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800537c:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <HAL_RCC_GetClockConfig+0x5c>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 0203 	and.w	r2, r3, #3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <HAL_RCC_GetClockConfig+0x5c>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <HAL_RCC_GetClockConfig+0x5c>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_GetClockConfig+0x5c>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	08db      	lsrs	r3, r3, #3
 80053a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80053ae:	4b07      	ldr	r3, [pc, #28]	; (80053cc <HAL_RCC_GetClockConfig+0x60>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0207 	and.w	r2, r3, #7
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	601a      	str	r2, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40021000 	.word	0x40021000
 80053cc:	40022000 	.word	0x40022000

080053d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b092      	sub	sp, #72	; 0x48
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 80d4 	beq.w	800559c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053f4:	4b4e      	ldr	r3, [pc, #312]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10e      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005400:	4b4b      	ldr	r3, [pc, #300]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	4a4a      	ldr	r2, [pc, #296]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540a:	61d3      	str	r3, [r2, #28]
 800540c:	4b48      	ldr	r3, [pc, #288]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541e:	4b45      	ldr	r3, [pc, #276]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d118      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800542a:	4b42      	ldr	r3, [pc, #264]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a41      	ldr	r2, [pc, #260]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005434:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005436:	f7fd f821 	bl	800247c <HAL_GetTick>
 800543a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543c:	e008      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543e:	f7fd f81d 	bl	800247c <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b64      	cmp	r3, #100	; 0x64
 800544a:	d901      	bls.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e14b      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005450:	4b38      	ldr	r3, [pc, #224]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0f0      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800545c:	4b34      	ldr	r3, [pc, #208]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8084 	beq.w	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005478:	429a      	cmp	r2, r3
 800547a:	d07c      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800547c:	4b2c      	ldr	r3, [pc, #176]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	fa93 f3a3 	rbit	r3, r3
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005496:	fab3 f383 	clz	r3, r3
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	4b26      	ldr	r3, [pc, #152]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	461a      	mov	r2, r3
 80054a6:	2301      	movs	r3, #1
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	fa93 f3a3 	rbit	r3, r3
 80054b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	461a      	mov	r2, r3
 80054ca:	2300      	movs	r3, #0
 80054cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054ce:	4a18      	ldr	r2, [pc, #96]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d04b      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7fc ffcd 	bl	800247c <HAL_GetTick>
 80054e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e4:	e00a      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e6:	f7fc ffc9 	bl	800247c <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d901      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e0f5      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80054fc:	2302      	movs	r3, #2
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	fa93 f3a3 	rbit	r3, r3
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
 8005508:	2302      	movs	r3, #2
 800550a:	623b      	str	r3, [r7, #32]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	fa93 f3a3 	rbit	r3, r3
 8005512:	61fb      	str	r3, [r7, #28]
  return result;
 8005514:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d108      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800552a:	4b01      	ldr	r3, [pc, #4]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	e00d      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005530:	40021000 	.word	0x40021000
 8005534:	40007000 	.word	0x40007000
 8005538:	10908100 	.word	0x10908100
 800553c:	2302      	movs	r3, #2
 800553e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	fa93 f3a3 	rbit	r3, r3
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	4b69      	ldr	r3, [pc, #420]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	2202      	movs	r2, #2
 800554e:	613a      	str	r2, [r7, #16]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	fa92 f2a2 	rbit	r2, r2
 8005556:	60fa      	str	r2, [r7, #12]
  return result;
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	fab2 f282 	clz	r2, r2
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	f002 021f 	and.w	r2, r2, #31
 800556a:	2101      	movs	r1, #1
 800556c:	fa01 f202 	lsl.w	r2, r1, r2
 8005570:	4013      	ands	r3, r2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0b7      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005576:	4b5e      	ldr	r3, [pc, #376]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	495b      	ldr	r1, [pc, #364]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005584:	4313      	orrs	r3, r2
 8005586:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005588:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800558c:	2b01      	cmp	r3, #1
 800558e:	d105      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005590:	4b57      	ldr	r3, [pc, #348]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	4a56      	ldr	r2, [pc, #344]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800559a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055a8:	4b51      	ldr	r3, [pc, #324]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	f023 0203 	bic.w	r2, r3, #3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	494e      	ldr	r1, [pc, #312]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055c6:	4b4a      	ldr	r3, [pc, #296]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	f023 0210 	bic.w	r2, r3, #16
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	4947      	ldr	r1, [pc, #284]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80055e4:	4b42      	ldr	r3, [pc, #264]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	493f      	ldr	r1, [pc, #252]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d008      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005602:	4b3b      	ldr	r3, [pc, #236]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	f023 0220 	bic.w	r2, r3, #32
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	4938      	ldr	r1, [pc, #224]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005610:	4313      	orrs	r3, r2
 8005612:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005620:	4b33      	ldr	r3, [pc, #204]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	4930      	ldr	r1, [pc, #192]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800562e:	4313      	orrs	r3, r2
 8005630:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800563e:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	4929      	ldr	r1, [pc, #164]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800564c:	4313      	orrs	r3, r2
 800564e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800565c:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	4921      	ldr	r1, [pc, #132]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800566a:	4313      	orrs	r3, r2
 800566c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800567a:	4b1d      	ldr	r3, [pc, #116]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	491a      	ldr	r1, [pc, #104]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005688:	4313      	orrs	r3, r2
 800568a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005698:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	4912      	ldr	r1, [pc, #72]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80056b6:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	490b      	ldr	r1, [pc, #44]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	4903      	ldr	r1, [pc, #12]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3748      	adds	r7, #72	; 0x48
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40021000 	.word	0x40021000

080056f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e049      	b.n	800579a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f841 	bl	80057a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 f9dc 	bl	8005af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d001      	beq.n	80057d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e03b      	b.n	8005848 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a19      	ldr	r2, [pc, #100]	; (8005854 <HAL_TIM_Base_Start_IT+0x9c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d009      	beq.n	8005806 <HAL_TIM_Base_Start_IT+0x4e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fa:	d004      	beq.n	8005806 <HAL_TIM_Base_Start_IT+0x4e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a15      	ldr	r2, [pc, #84]	; (8005858 <HAL_TIM_Base_Start_IT+0xa0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d115      	bne.n	8005832 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	4b13      	ldr	r3, [pc, #76]	; (800585c <HAL_TIM_Base_Start_IT+0xa4>)
 800580e:	4013      	ands	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b06      	cmp	r3, #6
 8005816:	d015      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x8c>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581e:	d011      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005830:	e008      	b.n	8005844 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0201 	orr.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e000      	b.n	8005846 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005844:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40014000 	.word	0x40014000
 800585c:	00010007 	.word	0x00010007

08005860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b02      	cmp	r3, #2
 8005874:	d122      	bne.n	80058bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d11b      	bne.n	80058bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0202 	mvn.w	r2, #2
 800588c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f905 	bl	8005ab2 <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f8f7 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f908 	bl	8005ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d122      	bne.n	8005910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d11b      	bne.n	8005910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0204 	mvn.w	r2, #4
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f8db 	bl	8005ab2 <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f8cd 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f8de 	bl	8005ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b08      	cmp	r3, #8
 800591c:	d122      	bne.n	8005964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b08      	cmp	r3, #8
 800592a:	d11b      	bne.n	8005964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0208 	mvn.w	r2, #8
 8005934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2204      	movs	r2, #4
 800593a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8b1 	bl	8005ab2 <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f8a3 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f8b4 	bl	8005ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b10      	cmp	r3, #16
 8005970:	d122      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b10      	cmp	r3, #16
 800597e:	d11b      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0210 	mvn.w	r2, #16
 8005988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2208      	movs	r2, #8
 800598e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f887 	bl	8005ab2 <HAL_TIM_IC_CaptureCallback>
 80059a4:	e005      	b.n	80059b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f879 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f88a 	bl	8005ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d10e      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d107      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0201 	mvn.w	r2, #1
 80059dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fc fae6 	bl	8001fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ee:	2b80      	cmp	r3, #128	; 0x80
 80059f0:	d10e      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d107      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8e8 	bl	8005be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1e:	d10e      	bne.n	8005a3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b80      	cmp	r3, #128	; 0x80
 8005a2c:	d107      	bne.n	8005a3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f8db 	bl	8005bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	d10e      	bne.n	8005a6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a56:	2b40      	cmp	r3, #64	; 0x40
 8005a58:	d107      	bne.n	8005a6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f838 	bl	8005ada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d10e      	bne.n	8005a96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d107      	bne.n	8005a96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f06f 0220 	mvn.w	r2, #32
 8005a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f89b 	bl	8005bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a96:	bf00      	nop
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a2e      	ldr	r2, [pc, #184]	; (8005bbc <TIM_Base_SetConfig+0xcc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_Base_SetConfig+0x20>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0e:	d108      	bne.n	8005b22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a25      	ldr	r2, [pc, #148]	; (8005bbc <TIM_Base_SetConfig+0xcc>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00f      	beq.n	8005b4a <TIM_Base_SetConfig+0x5a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b30:	d00b      	beq.n	8005b4a <TIM_Base_SetConfig+0x5a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a22      	ldr	r2, [pc, #136]	; (8005bc0 <TIM_Base_SetConfig+0xd0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <TIM_Base_SetConfig+0x5a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a21      	ldr	r2, [pc, #132]	; (8005bc4 <TIM_Base_SetConfig+0xd4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_Base_SetConfig+0x5a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <TIM_Base_SetConfig+0xd8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d108      	bne.n	8005b5c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <TIM_Base_SetConfig+0xcc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00b      	beq.n	8005ba0 <TIM_Base_SetConfig+0xb0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <TIM_Base_SetConfig+0xd0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_Base_SetConfig+0xb0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a0c      	ldr	r2, [pc, #48]	; (8005bc4 <TIM_Base_SetConfig+0xd4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_Base_SetConfig+0xb0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a0b      	ldr	r2, [pc, #44]	; (8005bc8 <TIM_Base_SetConfig+0xd8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d103      	bne.n	8005ba8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	615a      	str	r2, [r3, #20]
}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40014400 	.word	0x40014400
 8005bc8:	40014800 	.word	0x40014800

08005bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e040      	b.n	8005c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fc fb90 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	; 0x24
 8005c34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8c0 	bl	8005dcc <UART_SetConfig>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e022      	b.n	8005c9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f9ea 	bl	8006038 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fa71 	bl	800617c <UART_CheckIdleState>
 8005c9a:	4603      	mov	r3, r0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	; 0x28
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	f040 8082 	bne.w	8005dc2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_UART_Transmit+0x26>
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e07a      	b.n	8005dc4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_UART_Transmit+0x38>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e073      	b.n	8005dc4 <HAL_UART_Transmit+0x120>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2221      	movs	r2, #33	; 0x21
 8005cf0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cf2:	f7fc fbc3 	bl	800247c <HAL_GetTick>
 8005cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	88fa      	ldrh	r2, [r7, #6]
 8005d04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d10:	d108      	bne.n	8005d24 <HAL_UART_Transmit+0x80>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d104      	bne.n	8005d24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	e003      	b.n	8005d2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005d34:	e02d      	b.n	8005d92 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2180      	movs	r1, #128	; 0x80
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fa64 	bl	800620e <UART_WaitOnFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e039      	b.n	8005dc4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10b      	bne.n	8005d6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	881a      	ldrh	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d62:	b292      	uxth	r2, r2
 8005d64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	3302      	adds	r3, #2
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	e008      	b.n	8005d80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	781a      	ldrb	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	b292      	uxth	r2, r2
 8005d78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1cb      	bne.n	8005d36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2200      	movs	r2, #0
 8005da6:	2140      	movs	r1, #64	; 0x40
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fa30 	bl	800620e <UART_WaitOnFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e005      	b.n	8005dc4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e000      	b.n	8005dc4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005dc2:	2302      	movs	r3, #2
  }
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b8a      	ldr	r3, [pc, #552]	; (8006020 <UART_SetConfig+0x254>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	6979      	ldr	r1, [r7, #20]
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a78      	ldr	r2, [pc, #480]	; (8006024 <UART_SetConfig+0x258>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d120      	bne.n	8005e8a <UART_SetConfig+0xbe>
 8005e48:	4b77      	ldr	r3, [pc, #476]	; (8006028 <UART_SetConfig+0x25c>)
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d817      	bhi.n	8005e84 <UART_SetConfig+0xb8>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <UART_SetConfig+0x90>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005e6d 	.word	0x08005e6d
 8005e60:	08005e79 	.word	0x08005e79
 8005e64:	08005e7f 	.word	0x08005e7f
 8005e68:	08005e73 	.word	0x08005e73
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	77fb      	strb	r3, [r7, #31]
 8005e70:	e01d      	b.n	8005eae <UART_SetConfig+0xe2>
 8005e72:	2302      	movs	r3, #2
 8005e74:	77fb      	strb	r3, [r7, #31]
 8005e76:	e01a      	b.n	8005eae <UART_SetConfig+0xe2>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e017      	b.n	8005eae <UART_SetConfig+0xe2>
 8005e7e:	2308      	movs	r3, #8
 8005e80:	77fb      	strb	r3, [r7, #31]
 8005e82:	e014      	b.n	8005eae <UART_SetConfig+0xe2>
 8005e84:	2310      	movs	r3, #16
 8005e86:	77fb      	strb	r3, [r7, #31]
 8005e88:	e011      	b.n	8005eae <UART_SetConfig+0xe2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a67      	ldr	r2, [pc, #412]	; (800602c <UART_SetConfig+0x260>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d102      	bne.n	8005e9a <UART_SetConfig+0xce>
 8005e94:	2300      	movs	r3, #0
 8005e96:	77fb      	strb	r3, [r7, #31]
 8005e98:	e009      	b.n	8005eae <UART_SetConfig+0xe2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a64      	ldr	r2, [pc, #400]	; (8006030 <UART_SetConfig+0x264>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d102      	bne.n	8005eaa <UART_SetConfig+0xde>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e001      	b.n	8005eae <UART_SetConfig+0xe2>
 8005eaa:	2310      	movs	r3, #16
 8005eac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb6:	d15b      	bne.n	8005f70 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005eb8:	7ffb      	ldrb	r3, [r7, #31]
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d827      	bhi.n	8005f0e <UART_SetConfig+0x142>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0xf8>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ef9 	.word	0x08005ef9
 8005ed0:	08005f0f 	.word	0x08005f0f
 8005ed4:	08005eff 	.word	0x08005eff
 8005ed8:	08005f0f 	.word	0x08005f0f
 8005edc:	08005f0f 	.word	0x08005f0f
 8005ee0:	08005f0f 	.word	0x08005f0f
 8005ee4:	08005f07 	.word	0x08005f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee8:	f7ff f9fc 	bl	80052e4 <HAL_RCC_GetPCLK1Freq>
 8005eec:	61b8      	str	r0, [r7, #24]
        break;
 8005eee:	e013      	b.n	8005f18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef0:	f7ff fa1a 	bl	8005328 <HAL_RCC_GetPCLK2Freq>
 8005ef4:	61b8      	str	r0, [r7, #24]
        break;
 8005ef6:	e00f      	b.n	8005f18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef8:	4b4e      	ldr	r3, [pc, #312]	; (8006034 <UART_SetConfig+0x268>)
 8005efa:	61bb      	str	r3, [r7, #24]
        break;
 8005efc:	e00c      	b.n	8005f18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efe:	f7ff f97b 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8005f02:	61b8      	str	r0, [r7, #24]
        break;
 8005f04:	e008      	b.n	8005f18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0a:	61bb      	str	r3, [r7, #24]
        break;
 8005f0c:	e004      	b.n	8005f18 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	77bb      	strb	r3, [r7, #30]
        break;
 8005f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d074      	beq.n	8006008 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	005a      	lsls	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	441a      	add	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b0f      	cmp	r3, #15
 8005f3a:	d916      	bls.n	8005f6a <UART_SetConfig+0x19e>
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f42:	d212      	bcs.n	8005f6a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f023 030f 	bic.w	r3, r3, #15
 8005f4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	89fa      	ldrh	r2, [r7, #14]
 8005f66:	60da      	str	r2, [r3, #12]
 8005f68:	e04e      	b.n	8006008 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	77bb      	strb	r3, [r7, #30]
 8005f6e:	e04b      	b.n	8006008 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f70:	7ffb      	ldrb	r3, [r7, #31]
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d827      	bhi.n	8005fc6 <UART_SetConfig+0x1fa>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0x1b0>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fb1 	.word	0x08005fb1
 8005f88:	08005fc7 	.word	0x08005fc7
 8005f8c:	08005fb7 	.word	0x08005fb7
 8005f90:	08005fc7 	.word	0x08005fc7
 8005f94:	08005fc7 	.word	0x08005fc7
 8005f98:	08005fc7 	.word	0x08005fc7
 8005f9c:	08005fbf 	.word	0x08005fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f7ff f9a0 	bl	80052e4 <HAL_RCC_GetPCLK1Freq>
 8005fa4:	61b8      	str	r0, [r7, #24]
        break;
 8005fa6:	e013      	b.n	8005fd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fa8:	f7ff f9be 	bl	8005328 <HAL_RCC_GetPCLK2Freq>
 8005fac:	61b8      	str	r0, [r7, #24]
        break;
 8005fae:	e00f      	b.n	8005fd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb0:	4b20      	ldr	r3, [pc, #128]	; (8006034 <UART_SetConfig+0x268>)
 8005fb2:	61bb      	str	r3, [r7, #24]
        break;
 8005fb4:	e00c      	b.n	8005fd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fb6:	f7ff f91f 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8005fba:	61b8      	str	r0, [r7, #24]
        break;
 8005fbc:	e008      	b.n	8005fd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc2:	61bb      	str	r3, [r7, #24]
        break;
 8005fc4:	e004      	b.n	8005fd0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8005fce:	bf00      	nop
    }

    if (pclk != 0U)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d018      	beq.n	8006008 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	085a      	lsrs	r2, r3, #1
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	441a      	add	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b0f      	cmp	r3, #15
 8005ff0:	d908      	bls.n	8006004 <UART_SetConfig+0x238>
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff8:	d204      	bcs.n	8006004 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	60da      	str	r2, [r3, #12]
 8006002:	e001      	b.n	8006008 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006014:	7fbb      	ldrb	r3, [r7, #30]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	efff69f3 	.word	0xefff69f3
 8006024:	40013800 	.word	0x40013800
 8006028:	40021000 	.word	0x40021000
 800602c:	40004400 	.word	0x40004400
 8006030:	40004800 	.word	0x40004800
 8006034:	007a1200 	.word	0x007a1200

08006038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01a      	beq.n	800614e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006136:	d10a      	bne.n	800614e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	605a      	str	r2, [r3, #4]
  }
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af02      	add	r7, sp, #8
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800618c:	f7fc f976 	bl	800247c <HAL_GetTick>
 8006190:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b08      	cmp	r3, #8
 800619e:	d10e      	bne.n	80061be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f82d 	bl	800620e <UART_WaitOnFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e023      	b.n	8006206 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d10e      	bne.n	80061ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f817 	bl	800620e <UART_WaitOnFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e00d      	b.n	8006206 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2220      	movs	r2, #32
 80061ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	603b      	str	r3, [r7, #0]
 800621a:	4613      	mov	r3, r2
 800621c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800621e:	e05e      	b.n	80062de <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d05a      	beq.n	80062de <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006228:	f7fc f928 	bl	800247c <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <UART_WaitOnFlagUntilTimeout+0x30>
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d11b      	bne.n	8006276 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800624c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2220      	movs	r2, #32
 8006268:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e043      	b.n	80062fe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d02c      	beq.n	80062de <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800628e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006292:	d124      	bne.n	80062de <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800629c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2220      	movs	r2, #32
 80062c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2220      	movs	r2, #32
 80062c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e00f      	b.n	80062fe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4013      	ands	r3, r2
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	bf0c      	ite	eq
 80062ee:	2301      	moveq	r3, #1
 80062f0:	2300      	movne	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d091      	beq.n	8006220 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <__errno>:
 8006308:	4b01      	ldr	r3, [pc, #4]	; (8006310 <__errno+0x8>)
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	2000000c 	.word	0x2000000c

08006314 <__libc_init_array>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	4d0d      	ldr	r5, [pc, #52]	; (800634c <__libc_init_array+0x38>)
 8006318:	4c0d      	ldr	r4, [pc, #52]	; (8006350 <__libc_init_array+0x3c>)
 800631a:	1b64      	subs	r4, r4, r5
 800631c:	10a4      	asrs	r4, r4, #2
 800631e:	2600      	movs	r6, #0
 8006320:	42a6      	cmp	r6, r4
 8006322:	d109      	bne.n	8006338 <__libc_init_array+0x24>
 8006324:	4d0b      	ldr	r5, [pc, #44]	; (8006354 <__libc_init_array+0x40>)
 8006326:	4c0c      	ldr	r4, [pc, #48]	; (8006358 <__libc_init_array+0x44>)
 8006328:	f002 feb4 	bl	8009094 <_init>
 800632c:	1b64      	subs	r4, r4, r5
 800632e:	10a4      	asrs	r4, r4, #2
 8006330:	2600      	movs	r6, #0
 8006332:	42a6      	cmp	r6, r4
 8006334:	d105      	bne.n	8006342 <__libc_init_array+0x2e>
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	f855 3b04 	ldr.w	r3, [r5], #4
 800633c:	4798      	blx	r3
 800633e:	3601      	adds	r6, #1
 8006340:	e7ee      	b.n	8006320 <__libc_init_array+0xc>
 8006342:	f855 3b04 	ldr.w	r3, [r5], #4
 8006346:	4798      	blx	r3
 8006348:	3601      	adds	r6, #1
 800634a:	e7f2      	b.n	8006332 <__libc_init_array+0x1e>
 800634c:	08009594 	.word	0x08009594
 8006350:	08009594 	.word	0x08009594
 8006354:	08009594 	.word	0x08009594
 8006358:	08009598 	.word	0x08009598

0800635c <memset>:
 800635c:	4402      	add	r2, r0
 800635e:	4603      	mov	r3, r0
 8006360:	4293      	cmp	r3, r2
 8006362:	d100      	bne.n	8006366 <memset+0xa>
 8006364:	4770      	bx	lr
 8006366:	f803 1b01 	strb.w	r1, [r3], #1
 800636a:	e7f9      	b.n	8006360 <memset+0x4>

0800636c <__cvt>:
 800636c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006370:	ec55 4b10 	vmov	r4, r5, d0
 8006374:	2d00      	cmp	r5, #0
 8006376:	460e      	mov	r6, r1
 8006378:	4619      	mov	r1, r3
 800637a:	462b      	mov	r3, r5
 800637c:	bfbb      	ittet	lt
 800637e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006382:	461d      	movlt	r5, r3
 8006384:	2300      	movge	r3, #0
 8006386:	232d      	movlt	r3, #45	; 0x2d
 8006388:	700b      	strb	r3, [r1, #0]
 800638a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800638c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006390:	4691      	mov	r9, r2
 8006392:	f023 0820 	bic.w	r8, r3, #32
 8006396:	bfbc      	itt	lt
 8006398:	4622      	movlt	r2, r4
 800639a:	4614      	movlt	r4, r2
 800639c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063a0:	d005      	beq.n	80063ae <__cvt+0x42>
 80063a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063a6:	d100      	bne.n	80063aa <__cvt+0x3e>
 80063a8:	3601      	adds	r6, #1
 80063aa:	2102      	movs	r1, #2
 80063ac:	e000      	b.n	80063b0 <__cvt+0x44>
 80063ae:	2103      	movs	r1, #3
 80063b0:	ab03      	add	r3, sp, #12
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	ab02      	add	r3, sp, #8
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	ec45 4b10 	vmov	d0, r4, r5
 80063bc:	4653      	mov	r3, sl
 80063be:	4632      	mov	r2, r6
 80063c0:	f000 fcea 	bl	8006d98 <_dtoa_r>
 80063c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063c8:	4607      	mov	r7, r0
 80063ca:	d102      	bne.n	80063d2 <__cvt+0x66>
 80063cc:	f019 0f01 	tst.w	r9, #1
 80063d0:	d022      	beq.n	8006418 <__cvt+0xac>
 80063d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063d6:	eb07 0906 	add.w	r9, r7, r6
 80063da:	d110      	bne.n	80063fe <__cvt+0x92>
 80063dc:	783b      	ldrb	r3, [r7, #0]
 80063de:	2b30      	cmp	r3, #48	; 0x30
 80063e0:	d10a      	bne.n	80063f8 <__cvt+0x8c>
 80063e2:	2200      	movs	r2, #0
 80063e4:	2300      	movs	r3, #0
 80063e6:	4620      	mov	r0, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7fa fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80063ee:	b918      	cbnz	r0, 80063f8 <__cvt+0x8c>
 80063f0:	f1c6 0601 	rsb	r6, r6, #1
 80063f4:	f8ca 6000 	str.w	r6, [sl]
 80063f8:	f8da 3000 	ldr.w	r3, [sl]
 80063fc:	4499      	add	r9, r3
 80063fe:	2200      	movs	r2, #0
 8006400:	2300      	movs	r3, #0
 8006402:	4620      	mov	r0, r4
 8006404:	4629      	mov	r1, r5
 8006406:	f7fa fb5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800640a:	b108      	cbz	r0, 8006410 <__cvt+0xa4>
 800640c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006410:	2230      	movs	r2, #48	; 0x30
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	454b      	cmp	r3, r9
 8006416:	d307      	bcc.n	8006428 <__cvt+0xbc>
 8006418:	9b03      	ldr	r3, [sp, #12]
 800641a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800641c:	1bdb      	subs	r3, r3, r7
 800641e:	4638      	mov	r0, r7
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	b004      	add	sp, #16
 8006424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006428:	1c59      	adds	r1, r3, #1
 800642a:	9103      	str	r1, [sp, #12]
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e7f0      	b.n	8006412 <__cvt+0xa6>

08006430 <__exponent>:
 8006430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006432:	4603      	mov	r3, r0
 8006434:	2900      	cmp	r1, #0
 8006436:	bfb8      	it	lt
 8006438:	4249      	neglt	r1, r1
 800643a:	f803 2b02 	strb.w	r2, [r3], #2
 800643e:	bfb4      	ite	lt
 8006440:	222d      	movlt	r2, #45	; 0x2d
 8006442:	222b      	movge	r2, #43	; 0x2b
 8006444:	2909      	cmp	r1, #9
 8006446:	7042      	strb	r2, [r0, #1]
 8006448:	dd2a      	ble.n	80064a0 <__exponent+0x70>
 800644a:	f10d 0407 	add.w	r4, sp, #7
 800644e:	46a4      	mov	ip, r4
 8006450:	270a      	movs	r7, #10
 8006452:	46a6      	mov	lr, r4
 8006454:	460a      	mov	r2, r1
 8006456:	fb91 f6f7 	sdiv	r6, r1, r7
 800645a:	fb07 1516 	mls	r5, r7, r6, r1
 800645e:	3530      	adds	r5, #48	; 0x30
 8006460:	2a63      	cmp	r2, #99	; 0x63
 8006462:	f104 34ff 	add.w	r4, r4, #4294967295
 8006466:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800646a:	4631      	mov	r1, r6
 800646c:	dcf1      	bgt.n	8006452 <__exponent+0x22>
 800646e:	3130      	adds	r1, #48	; 0x30
 8006470:	f1ae 0502 	sub.w	r5, lr, #2
 8006474:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006478:	1c44      	adds	r4, r0, #1
 800647a:	4629      	mov	r1, r5
 800647c:	4561      	cmp	r1, ip
 800647e:	d30a      	bcc.n	8006496 <__exponent+0x66>
 8006480:	f10d 0209 	add.w	r2, sp, #9
 8006484:	eba2 020e 	sub.w	r2, r2, lr
 8006488:	4565      	cmp	r5, ip
 800648a:	bf88      	it	hi
 800648c:	2200      	movhi	r2, #0
 800648e:	4413      	add	r3, r2
 8006490:	1a18      	subs	r0, r3, r0
 8006492:	b003      	add	sp, #12
 8006494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800649a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800649e:	e7ed      	b.n	800647c <__exponent+0x4c>
 80064a0:	2330      	movs	r3, #48	; 0x30
 80064a2:	3130      	adds	r1, #48	; 0x30
 80064a4:	7083      	strb	r3, [r0, #2]
 80064a6:	70c1      	strb	r1, [r0, #3]
 80064a8:	1d03      	adds	r3, r0, #4
 80064aa:	e7f1      	b.n	8006490 <__exponent+0x60>

080064ac <_printf_float>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	ed2d 8b02 	vpush	{d8}
 80064b4:	b08d      	sub	sp, #52	; 0x34
 80064b6:	460c      	mov	r4, r1
 80064b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064bc:	4616      	mov	r6, r2
 80064be:	461f      	mov	r7, r3
 80064c0:	4605      	mov	r5, r0
 80064c2:	f001 fa55 	bl	8007970 <_localeconv_r>
 80064c6:	f8d0 a000 	ldr.w	sl, [r0]
 80064ca:	4650      	mov	r0, sl
 80064cc:	f7f9 fe80 	bl	80001d0 <strlen>
 80064d0:	2300      	movs	r3, #0
 80064d2:	930a      	str	r3, [sp, #40]	; 0x28
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	9305      	str	r3, [sp, #20]
 80064d8:	f8d8 3000 	ldr.w	r3, [r8]
 80064dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064e0:	3307      	adds	r3, #7
 80064e2:	f023 0307 	bic.w	r3, r3, #7
 80064e6:	f103 0208 	add.w	r2, r3, #8
 80064ea:	f8c8 2000 	str.w	r2, [r8]
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80064fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064fe:	9307      	str	r3, [sp, #28]
 8006500:	f8cd 8018 	str.w	r8, [sp, #24]
 8006504:	ee08 0a10 	vmov	s16, r0
 8006508:	4b9f      	ldr	r3, [pc, #636]	; (8006788 <_printf_float+0x2dc>)
 800650a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800650e:	f04f 32ff 	mov.w	r2, #4294967295
 8006512:	f7fa fb0b 	bl	8000b2c <__aeabi_dcmpun>
 8006516:	bb88      	cbnz	r0, 800657c <_printf_float+0xd0>
 8006518:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800651c:	4b9a      	ldr	r3, [pc, #616]	; (8006788 <_printf_float+0x2dc>)
 800651e:	f04f 32ff 	mov.w	r2, #4294967295
 8006522:	f7fa fae5 	bl	8000af0 <__aeabi_dcmple>
 8006526:	bb48      	cbnz	r0, 800657c <_printf_float+0xd0>
 8006528:	2200      	movs	r2, #0
 800652a:	2300      	movs	r3, #0
 800652c:	4640      	mov	r0, r8
 800652e:	4649      	mov	r1, r9
 8006530:	f7fa fad4 	bl	8000adc <__aeabi_dcmplt>
 8006534:	b110      	cbz	r0, 800653c <_printf_float+0x90>
 8006536:	232d      	movs	r3, #45	; 0x2d
 8006538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653c:	4b93      	ldr	r3, [pc, #588]	; (800678c <_printf_float+0x2e0>)
 800653e:	4894      	ldr	r0, [pc, #592]	; (8006790 <_printf_float+0x2e4>)
 8006540:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006544:	bf94      	ite	ls
 8006546:	4698      	movls	r8, r3
 8006548:	4680      	movhi	r8, r0
 800654a:	2303      	movs	r3, #3
 800654c:	6123      	str	r3, [r4, #16]
 800654e:	9b05      	ldr	r3, [sp, #20]
 8006550:	f023 0204 	bic.w	r2, r3, #4
 8006554:	6022      	str	r2, [r4, #0]
 8006556:	f04f 0900 	mov.w	r9, #0
 800655a:	9700      	str	r7, [sp, #0]
 800655c:	4633      	mov	r3, r6
 800655e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006560:	4621      	mov	r1, r4
 8006562:	4628      	mov	r0, r5
 8006564:	f000 f9d8 	bl	8006918 <_printf_common>
 8006568:	3001      	adds	r0, #1
 800656a:	f040 8090 	bne.w	800668e <_printf_float+0x1e2>
 800656e:	f04f 30ff 	mov.w	r0, #4294967295
 8006572:	b00d      	add	sp, #52	; 0x34
 8006574:	ecbd 8b02 	vpop	{d8}
 8006578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	4640      	mov	r0, r8
 8006582:	4649      	mov	r1, r9
 8006584:	f7fa fad2 	bl	8000b2c <__aeabi_dcmpun>
 8006588:	b140      	cbz	r0, 800659c <_printf_float+0xf0>
 800658a:	464b      	mov	r3, r9
 800658c:	2b00      	cmp	r3, #0
 800658e:	bfbc      	itt	lt
 8006590:	232d      	movlt	r3, #45	; 0x2d
 8006592:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006596:	487f      	ldr	r0, [pc, #508]	; (8006794 <_printf_float+0x2e8>)
 8006598:	4b7f      	ldr	r3, [pc, #508]	; (8006798 <_printf_float+0x2ec>)
 800659a:	e7d1      	b.n	8006540 <_printf_float+0x94>
 800659c:	6863      	ldr	r3, [r4, #4]
 800659e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065a2:	9206      	str	r2, [sp, #24]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	d13f      	bne.n	8006628 <_printf_float+0x17c>
 80065a8:	2306      	movs	r3, #6
 80065aa:	6063      	str	r3, [r4, #4]
 80065ac:	9b05      	ldr	r3, [sp, #20]
 80065ae:	6861      	ldr	r1, [r4, #4]
 80065b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065b4:	2300      	movs	r3, #0
 80065b6:	9303      	str	r3, [sp, #12]
 80065b8:	ab0a      	add	r3, sp, #40	; 0x28
 80065ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065be:	ab09      	add	r3, sp, #36	; 0x24
 80065c0:	ec49 8b10 	vmov	d0, r8, r9
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	6022      	str	r2, [r4, #0]
 80065c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065cc:	4628      	mov	r0, r5
 80065ce:	f7ff fecd 	bl	800636c <__cvt>
 80065d2:	9b06      	ldr	r3, [sp, #24]
 80065d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065d6:	2b47      	cmp	r3, #71	; 0x47
 80065d8:	4680      	mov	r8, r0
 80065da:	d108      	bne.n	80065ee <_printf_float+0x142>
 80065dc:	1cc8      	adds	r0, r1, #3
 80065de:	db02      	blt.n	80065e6 <_printf_float+0x13a>
 80065e0:	6863      	ldr	r3, [r4, #4]
 80065e2:	4299      	cmp	r1, r3
 80065e4:	dd41      	ble.n	800666a <_printf_float+0x1be>
 80065e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80065ea:	fa5f fb8b 	uxtb.w	fp, fp
 80065ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065f2:	d820      	bhi.n	8006636 <_printf_float+0x18a>
 80065f4:	3901      	subs	r1, #1
 80065f6:	465a      	mov	r2, fp
 80065f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065fc:	9109      	str	r1, [sp, #36]	; 0x24
 80065fe:	f7ff ff17 	bl	8006430 <__exponent>
 8006602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006604:	1813      	adds	r3, r2, r0
 8006606:	2a01      	cmp	r2, #1
 8006608:	4681      	mov	r9, r0
 800660a:	6123      	str	r3, [r4, #16]
 800660c:	dc02      	bgt.n	8006614 <_printf_float+0x168>
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	07d2      	lsls	r2, r2, #31
 8006612:	d501      	bpl.n	8006618 <_printf_float+0x16c>
 8006614:	3301      	adds	r3, #1
 8006616:	6123      	str	r3, [r4, #16]
 8006618:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800661c:	2b00      	cmp	r3, #0
 800661e:	d09c      	beq.n	800655a <_printf_float+0xae>
 8006620:	232d      	movs	r3, #45	; 0x2d
 8006622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006626:	e798      	b.n	800655a <_printf_float+0xae>
 8006628:	9a06      	ldr	r2, [sp, #24]
 800662a:	2a47      	cmp	r2, #71	; 0x47
 800662c:	d1be      	bne.n	80065ac <_printf_float+0x100>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1bc      	bne.n	80065ac <_printf_float+0x100>
 8006632:	2301      	movs	r3, #1
 8006634:	e7b9      	b.n	80065aa <_printf_float+0xfe>
 8006636:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800663a:	d118      	bne.n	800666e <_printf_float+0x1c2>
 800663c:	2900      	cmp	r1, #0
 800663e:	6863      	ldr	r3, [r4, #4]
 8006640:	dd0b      	ble.n	800665a <_printf_float+0x1ae>
 8006642:	6121      	str	r1, [r4, #16]
 8006644:	b913      	cbnz	r3, 800664c <_printf_float+0x1a0>
 8006646:	6822      	ldr	r2, [r4, #0]
 8006648:	07d0      	lsls	r0, r2, #31
 800664a:	d502      	bpl.n	8006652 <_printf_float+0x1a6>
 800664c:	3301      	adds	r3, #1
 800664e:	440b      	add	r3, r1
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	65a1      	str	r1, [r4, #88]	; 0x58
 8006654:	f04f 0900 	mov.w	r9, #0
 8006658:	e7de      	b.n	8006618 <_printf_float+0x16c>
 800665a:	b913      	cbnz	r3, 8006662 <_printf_float+0x1b6>
 800665c:	6822      	ldr	r2, [r4, #0]
 800665e:	07d2      	lsls	r2, r2, #31
 8006660:	d501      	bpl.n	8006666 <_printf_float+0x1ba>
 8006662:	3302      	adds	r3, #2
 8006664:	e7f4      	b.n	8006650 <_printf_float+0x1a4>
 8006666:	2301      	movs	r3, #1
 8006668:	e7f2      	b.n	8006650 <_printf_float+0x1a4>
 800666a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800666e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006670:	4299      	cmp	r1, r3
 8006672:	db05      	blt.n	8006680 <_printf_float+0x1d4>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	6121      	str	r1, [r4, #16]
 8006678:	07d8      	lsls	r0, r3, #31
 800667a:	d5ea      	bpl.n	8006652 <_printf_float+0x1a6>
 800667c:	1c4b      	adds	r3, r1, #1
 800667e:	e7e7      	b.n	8006650 <_printf_float+0x1a4>
 8006680:	2900      	cmp	r1, #0
 8006682:	bfd4      	ite	le
 8006684:	f1c1 0202 	rsble	r2, r1, #2
 8006688:	2201      	movgt	r2, #1
 800668a:	4413      	add	r3, r2
 800668c:	e7e0      	b.n	8006650 <_printf_float+0x1a4>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	055a      	lsls	r2, r3, #21
 8006692:	d407      	bmi.n	80066a4 <_printf_float+0x1f8>
 8006694:	6923      	ldr	r3, [r4, #16]
 8006696:	4642      	mov	r2, r8
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	d12c      	bne.n	80066fc <_printf_float+0x250>
 80066a2:	e764      	b.n	800656e <_printf_float+0xc2>
 80066a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066a8:	f240 80e0 	bls.w	800686c <_printf_float+0x3c0>
 80066ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066b0:	2200      	movs	r2, #0
 80066b2:	2300      	movs	r3, #0
 80066b4:	f7fa fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d034      	beq.n	8006726 <_printf_float+0x27a>
 80066bc:	4a37      	ldr	r2, [pc, #220]	; (800679c <_printf_float+0x2f0>)
 80066be:	2301      	movs	r3, #1
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	f43f af51 	beq.w	800656e <_printf_float+0xc2>
 80066cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066d0:	429a      	cmp	r2, r3
 80066d2:	db02      	blt.n	80066da <_printf_float+0x22e>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	07d8      	lsls	r0, r3, #31
 80066d8:	d510      	bpl.n	80066fc <_printf_float+0x250>
 80066da:	ee18 3a10 	vmov	r3, s16
 80066de:	4652      	mov	r2, sl
 80066e0:	4631      	mov	r1, r6
 80066e2:	4628      	mov	r0, r5
 80066e4:	47b8      	blx	r7
 80066e6:	3001      	adds	r0, #1
 80066e8:	f43f af41 	beq.w	800656e <_printf_float+0xc2>
 80066ec:	f04f 0800 	mov.w	r8, #0
 80066f0:	f104 091a 	add.w	r9, r4, #26
 80066f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f6:	3b01      	subs	r3, #1
 80066f8:	4543      	cmp	r3, r8
 80066fa:	dc09      	bgt.n	8006710 <_printf_float+0x264>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	079b      	lsls	r3, r3, #30
 8006700:	f100 8105 	bmi.w	800690e <_printf_float+0x462>
 8006704:	68e0      	ldr	r0, [r4, #12]
 8006706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006708:	4298      	cmp	r0, r3
 800670a:	bfb8      	it	lt
 800670c:	4618      	movlt	r0, r3
 800670e:	e730      	b.n	8006572 <_printf_float+0xc6>
 8006710:	2301      	movs	r3, #1
 8006712:	464a      	mov	r2, r9
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	f43f af27 	beq.w	800656e <_printf_float+0xc2>
 8006720:	f108 0801 	add.w	r8, r8, #1
 8006724:	e7e6      	b.n	80066f4 <_printf_float+0x248>
 8006726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006728:	2b00      	cmp	r3, #0
 800672a:	dc39      	bgt.n	80067a0 <_printf_float+0x2f4>
 800672c:	4a1b      	ldr	r2, [pc, #108]	; (800679c <_printf_float+0x2f0>)
 800672e:	2301      	movs	r3, #1
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f43f af19 	beq.w	800656e <_printf_float+0xc2>
 800673c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006740:	4313      	orrs	r3, r2
 8006742:	d102      	bne.n	800674a <_printf_float+0x29e>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	07d9      	lsls	r1, r3, #31
 8006748:	d5d8      	bpl.n	80066fc <_printf_float+0x250>
 800674a:	ee18 3a10 	vmov	r3, s16
 800674e:	4652      	mov	r2, sl
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	f43f af09 	beq.w	800656e <_printf_float+0xc2>
 800675c:	f04f 0900 	mov.w	r9, #0
 8006760:	f104 0a1a 	add.w	sl, r4, #26
 8006764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006766:	425b      	negs	r3, r3
 8006768:	454b      	cmp	r3, r9
 800676a:	dc01      	bgt.n	8006770 <_printf_float+0x2c4>
 800676c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800676e:	e792      	b.n	8006696 <_printf_float+0x1ea>
 8006770:	2301      	movs	r3, #1
 8006772:	4652      	mov	r2, sl
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f aef7 	beq.w	800656e <_printf_float+0xc2>
 8006780:	f109 0901 	add.w	r9, r9, #1
 8006784:	e7ee      	b.n	8006764 <_printf_float+0x2b8>
 8006786:	bf00      	nop
 8006788:	7fefffff 	.word	0x7fefffff
 800678c:	080091b4 	.word	0x080091b4
 8006790:	080091b8 	.word	0x080091b8
 8006794:	080091c0 	.word	0x080091c0
 8006798:	080091bc 	.word	0x080091bc
 800679c:	080091c4 	.word	0x080091c4
 80067a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067a4:	429a      	cmp	r2, r3
 80067a6:	bfa8      	it	ge
 80067a8:	461a      	movge	r2, r3
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	4691      	mov	r9, r2
 80067ae:	dc37      	bgt.n	8006820 <_printf_float+0x374>
 80067b0:	f04f 0b00 	mov.w	fp, #0
 80067b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067b8:	f104 021a 	add.w	r2, r4, #26
 80067bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067be:	9305      	str	r3, [sp, #20]
 80067c0:	eba3 0309 	sub.w	r3, r3, r9
 80067c4:	455b      	cmp	r3, fp
 80067c6:	dc33      	bgt.n	8006830 <_printf_float+0x384>
 80067c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067cc:	429a      	cmp	r2, r3
 80067ce:	db3b      	blt.n	8006848 <_printf_float+0x39c>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	07da      	lsls	r2, r3, #31
 80067d4:	d438      	bmi.n	8006848 <_printf_float+0x39c>
 80067d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067d8:	9b05      	ldr	r3, [sp, #20]
 80067da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	eba2 0901 	sub.w	r9, r2, r1
 80067e2:	4599      	cmp	r9, r3
 80067e4:	bfa8      	it	ge
 80067e6:	4699      	movge	r9, r3
 80067e8:	f1b9 0f00 	cmp.w	r9, #0
 80067ec:	dc35      	bgt.n	800685a <_printf_float+0x3ae>
 80067ee:	f04f 0800 	mov.w	r8, #0
 80067f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067f6:	f104 0a1a 	add.w	sl, r4, #26
 80067fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	eba3 0309 	sub.w	r3, r3, r9
 8006804:	4543      	cmp	r3, r8
 8006806:	f77f af79 	ble.w	80066fc <_printf_float+0x250>
 800680a:	2301      	movs	r3, #1
 800680c:	4652      	mov	r2, sl
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	f43f aeaa 	beq.w	800656e <_printf_float+0xc2>
 800681a:	f108 0801 	add.w	r8, r8, #1
 800681e:	e7ec      	b.n	80067fa <_printf_float+0x34e>
 8006820:	4613      	mov	r3, r2
 8006822:	4631      	mov	r1, r6
 8006824:	4642      	mov	r2, r8
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	d1c0      	bne.n	80067b0 <_printf_float+0x304>
 800682e:	e69e      	b.n	800656e <_printf_float+0xc2>
 8006830:	2301      	movs	r3, #1
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	9205      	str	r2, [sp, #20]
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	f43f ae97 	beq.w	800656e <_printf_float+0xc2>
 8006840:	9a05      	ldr	r2, [sp, #20]
 8006842:	f10b 0b01 	add.w	fp, fp, #1
 8006846:	e7b9      	b.n	80067bc <_printf_float+0x310>
 8006848:	ee18 3a10 	vmov	r3, s16
 800684c:	4652      	mov	r2, sl
 800684e:	4631      	mov	r1, r6
 8006850:	4628      	mov	r0, r5
 8006852:	47b8      	blx	r7
 8006854:	3001      	adds	r0, #1
 8006856:	d1be      	bne.n	80067d6 <_printf_float+0x32a>
 8006858:	e689      	b.n	800656e <_printf_float+0xc2>
 800685a:	9a05      	ldr	r2, [sp, #20]
 800685c:	464b      	mov	r3, r9
 800685e:	4442      	add	r2, r8
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	d1c1      	bne.n	80067ee <_printf_float+0x342>
 800686a:	e680      	b.n	800656e <_printf_float+0xc2>
 800686c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800686e:	2a01      	cmp	r2, #1
 8006870:	dc01      	bgt.n	8006876 <_printf_float+0x3ca>
 8006872:	07db      	lsls	r3, r3, #31
 8006874:	d538      	bpl.n	80068e8 <_printf_float+0x43c>
 8006876:	2301      	movs	r3, #1
 8006878:	4642      	mov	r2, r8
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	f43f ae74 	beq.w	800656e <_printf_float+0xc2>
 8006886:	ee18 3a10 	vmov	r3, s16
 800688a:	4652      	mov	r2, sl
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	47b8      	blx	r7
 8006892:	3001      	adds	r0, #1
 8006894:	f43f ae6b 	beq.w	800656e <_printf_float+0xc2>
 8006898:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800689c:	2200      	movs	r2, #0
 800689e:	2300      	movs	r3, #0
 80068a0:	f7fa f912 	bl	8000ac8 <__aeabi_dcmpeq>
 80068a4:	b9d8      	cbnz	r0, 80068de <_printf_float+0x432>
 80068a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a8:	f108 0201 	add.w	r2, r8, #1
 80068ac:	3b01      	subs	r3, #1
 80068ae:	4631      	mov	r1, r6
 80068b0:	4628      	mov	r0, r5
 80068b2:	47b8      	blx	r7
 80068b4:	3001      	adds	r0, #1
 80068b6:	d10e      	bne.n	80068d6 <_printf_float+0x42a>
 80068b8:	e659      	b.n	800656e <_printf_float+0xc2>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4652      	mov	r2, sl
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	f43f ae52 	beq.w	800656e <_printf_float+0xc2>
 80068ca:	f108 0801 	add.w	r8, r8, #1
 80068ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d0:	3b01      	subs	r3, #1
 80068d2:	4543      	cmp	r3, r8
 80068d4:	dcf1      	bgt.n	80068ba <_printf_float+0x40e>
 80068d6:	464b      	mov	r3, r9
 80068d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068dc:	e6dc      	b.n	8006698 <_printf_float+0x1ec>
 80068de:	f04f 0800 	mov.w	r8, #0
 80068e2:	f104 0a1a 	add.w	sl, r4, #26
 80068e6:	e7f2      	b.n	80068ce <_printf_float+0x422>
 80068e8:	2301      	movs	r3, #1
 80068ea:	4642      	mov	r2, r8
 80068ec:	e7df      	b.n	80068ae <_printf_float+0x402>
 80068ee:	2301      	movs	r3, #1
 80068f0:	464a      	mov	r2, r9
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	f43f ae38 	beq.w	800656e <_printf_float+0xc2>
 80068fe:	f108 0801 	add.w	r8, r8, #1
 8006902:	68e3      	ldr	r3, [r4, #12]
 8006904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006906:	1a5b      	subs	r3, r3, r1
 8006908:	4543      	cmp	r3, r8
 800690a:	dcf0      	bgt.n	80068ee <_printf_float+0x442>
 800690c:	e6fa      	b.n	8006704 <_printf_float+0x258>
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	f104 0919 	add.w	r9, r4, #25
 8006916:	e7f4      	b.n	8006902 <_printf_float+0x456>

08006918 <_printf_common>:
 8006918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	4616      	mov	r6, r2
 800691e:	4699      	mov	r9, r3
 8006920:	688a      	ldr	r2, [r1, #8]
 8006922:	690b      	ldr	r3, [r1, #16]
 8006924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006928:	4293      	cmp	r3, r2
 800692a:	bfb8      	it	lt
 800692c:	4613      	movlt	r3, r2
 800692e:	6033      	str	r3, [r6, #0]
 8006930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006934:	4607      	mov	r7, r0
 8006936:	460c      	mov	r4, r1
 8006938:	b10a      	cbz	r2, 800693e <_printf_common+0x26>
 800693a:	3301      	adds	r3, #1
 800693c:	6033      	str	r3, [r6, #0]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	0699      	lsls	r1, r3, #26
 8006942:	bf42      	ittt	mi
 8006944:	6833      	ldrmi	r3, [r6, #0]
 8006946:	3302      	addmi	r3, #2
 8006948:	6033      	strmi	r3, [r6, #0]
 800694a:	6825      	ldr	r5, [r4, #0]
 800694c:	f015 0506 	ands.w	r5, r5, #6
 8006950:	d106      	bne.n	8006960 <_printf_common+0x48>
 8006952:	f104 0a19 	add.w	sl, r4, #25
 8006956:	68e3      	ldr	r3, [r4, #12]
 8006958:	6832      	ldr	r2, [r6, #0]
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	42ab      	cmp	r3, r5
 800695e:	dc26      	bgt.n	80069ae <_printf_common+0x96>
 8006960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006964:	1e13      	subs	r3, r2, #0
 8006966:	6822      	ldr	r2, [r4, #0]
 8006968:	bf18      	it	ne
 800696a:	2301      	movne	r3, #1
 800696c:	0692      	lsls	r2, r2, #26
 800696e:	d42b      	bmi.n	80069c8 <_printf_common+0xb0>
 8006970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006974:	4649      	mov	r1, r9
 8006976:	4638      	mov	r0, r7
 8006978:	47c0      	blx	r8
 800697a:	3001      	adds	r0, #1
 800697c:	d01e      	beq.n	80069bc <_printf_common+0xa4>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	68e5      	ldr	r5, [r4, #12]
 8006982:	6832      	ldr	r2, [r6, #0]
 8006984:	f003 0306 	and.w	r3, r3, #6
 8006988:	2b04      	cmp	r3, #4
 800698a:	bf08      	it	eq
 800698c:	1aad      	subeq	r5, r5, r2
 800698e:	68a3      	ldr	r3, [r4, #8]
 8006990:	6922      	ldr	r2, [r4, #16]
 8006992:	bf0c      	ite	eq
 8006994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006998:	2500      	movne	r5, #0
 800699a:	4293      	cmp	r3, r2
 800699c:	bfc4      	itt	gt
 800699e:	1a9b      	subgt	r3, r3, r2
 80069a0:	18ed      	addgt	r5, r5, r3
 80069a2:	2600      	movs	r6, #0
 80069a4:	341a      	adds	r4, #26
 80069a6:	42b5      	cmp	r5, r6
 80069a8:	d11a      	bne.n	80069e0 <_printf_common+0xc8>
 80069aa:	2000      	movs	r0, #0
 80069ac:	e008      	b.n	80069c0 <_printf_common+0xa8>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4652      	mov	r2, sl
 80069b2:	4649      	mov	r1, r9
 80069b4:	4638      	mov	r0, r7
 80069b6:	47c0      	blx	r8
 80069b8:	3001      	adds	r0, #1
 80069ba:	d103      	bne.n	80069c4 <_printf_common+0xac>
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295
 80069c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c4:	3501      	adds	r5, #1
 80069c6:	e7c6      	b.n	8006956 <_printf_common+0x3e>
 80069c8:	18e1      	adds	r1, r4, r3
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	2030      	movs	r0, #48	; 0x30
 80069ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069d2:	4422      	add	r2, r4
 80069d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069dc:	3302      	adds	r3, #2
 80069de:	e7c7      	b.n	8006970 <_printf_common+0x58>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4622      	mov	r2, r4
 80069e4:	4649      	mov	r1, r9
 80069e6:	4638      	mov	r0, r7
 80069e8:	47c0      	blx	r8
 80069ea:	3001      	adds	r0, #1
 80069ec:	d0e6      	beq.n	80069bc <_printf_common+0xa4>
 80069ee:	3601      	adds	r6, #1
 80069f0:	e7d9      	b.n	80069a6 <_printf_common+0x8e>
	...

080069f4 <_printf_i>:
 80069f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	460c      	mov	r4, r1
 80069fa:	4691      	mov	r9, r2
 80069fc:	7e27      	ldrb	r7, [r4, #24]
 80069fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a00:	2f78      	cmp	r7, #120	; 0x78
 8006a02:	4680      	mov	r8, r0
 8006a04:	469a      	mov	sl, r3
 8006a06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a0a:	d807      	bhi.n	8006a1c <_printf_i+0x28>
 8006a0c:	2f62      	cmp	r7, #98	; 0x62
 8006a0e:	d80a      	bhi.n	8006a26 <_printf_i+0x32>
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	f000 80d8 	beq.w	8006bc6 <_printf_i+0x1d2>
 8006a16:	2f58      	cmp	r7, #88	; 0x58
 8006a18:	f000 80a3 	beq.w	8006b62 <_printf_i+0x16e>
 8006a1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a24:	e03a      	b.n	8006a9c <_printf_i+0xa8>
 8006a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a2a:	2b15      	cmp	r3, #21
 8006a2c:	d8f6      	bhi.n	8006a1c <_printf_i+0x28>
 8006a2e:	a001      	add	r0, pc, #4	; (adr r0, 8006a34 <_printf_i+0x40>)
 8006a30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006aa1 	.word	0x08006aa1
 8006a3c:	08006a1d 	.word	0x08006a1d
 8006a40:	08006a1d 	.word	0x08006a1d
 8006a44:	08006a1d 	.word	0x08006a1d
 8006a48:	08006a1d 	.word	0x08006a1d
 8006a4c:	08006aa1 	.word	0x08006aa1
 8006a50:	08006a1d 	.word	0x08006a1d
 8006a54:	08006a1d 	.word	0x08006a1d
 8006a58:	08006a1d 	.word	0x08006a1d
 8006a5c:	08006a1d 	.word	0x08006a1d
 8006a60:	08006bad 	.word	0x08006bad
 8006a64:	08006ad1 	.word	0x08006ad1
 8006a68:	08006b8f 	.word	0x08006b8f
 8006a6c:	08006a1d 	.word	0x08006a1d
 8006a70:	08006a1d 	.word	0x08006a1d
 8006a74:	08006bcf 	.word	0x08006bcf
 8006a78:	08006a1d 	.word	0x08006a1d
 8006a7c:	08006ad1 	.word	0x08006ad1
 8006a80:	08006a1d 	.word	0x08006a1d
 8006a84:	08006a1d 	.word	0x08006a1d
 8006a88:	08006b97 	.word	0x08006b97
 8006a8c:	680b      	ldr	r3, [r1, #0]
 8006a8e:	1d1a      	adds	r2, r3, #4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	600a      	str	r2, [r1, #0]
 8006a94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e0a3      	b.n	8006be8 <_printf_i+0x1f4>
 8006aa0:	6825      	ldr	r5, [r4, #0]
 8006aa2:	6808      	ldr	r0, [r1, #0]
 8006aa4:	062e      	lsls	r6, r5, #24
 8006aa6:	f100 0304 	add.w	r3, r0, #4
 8006aaa:	d50a      	bpl.n	8006ac2 <_printf_i+0xce>
 8006aac:	6805      	ldr	r5, [r0, #0]
 8006aae:	600b      	str	r3, [r1, #0]
 8006ab0:	2d00      	cmp	r5, #0
 8006ab2:	da03      	bge.n	8006abc <_printf_i+0xc8>
 8006ab4:	232d      	movs	r3, #45	; 0x2d
 8006ab6:	426d      	negs	r5, r5
 8006ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006abc:	485e      	ldr	r0, [pc, #376]	; (8006c38 <_printf_i+0x244>)
 8006abe:	230a      	movs	r3, #10
 8006ac0:	e019      	b.n	8006af6 <_printf_i+0x102>
 8006ac2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ac6:	6805      	ldr	r5, [r0, #0]
 8006ac8:	600b      	str	r3, [r1, #0]
 8006aca:	bf18      	it	ne
 8006acc:	b22d      	sxthne	r5, r5
 8006ace:	e7ef      	b.n	8006ab0 <_printf_i+0xbc>
 8006ad0:	680b      	ldr	r3, [r1, #0]
 8006ad2:	6825      	ldr	r5, [r4, #0]
 8006ad4:	1d18      	adds	r0, r3, #4
 8006ad6:	6008      	str	r0, [r1, #0]
 8006ad8:	0628      	lsls	r0, r5, #24
 8006ada:	d501      	bpl.n	8006ae0 <_printf_i+0xec>
 8006adc:	681d      	ldr	r5, [r3, #0]
 8006ade:	e002      	b.n	8006ae6 <_printf_i+0xf2>
 8006ae0:	0669      	lsls	r1, r5, #25
 8006ae2:	d5fb      	bpl.n	8006adc <_printf_i+0xe8>
 8006ae4:	881d      	ldrh	r5, [r3, #0]
 8006ae6:	4854      	ldr	r0, [pc, #336]	; (8006c38 <_printf_i+0x244>)
 8006ae8:	2f6f      	cmp	r7, #111	; 0x6f
 8006aea:	bf0c      	ite	eq
 8006aec:	2308      	moveq	r3, #8
 8006aee:	230a      	movne	r3, #10
 8006af0:	2100      	movs	r1, #0
 8006af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006af6:	6866      	ldr	r6, [r4, #4]
 8006af8:	60a6      	str	r6, [r4, #8]
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	bfa2      	ittt	ge
 8006afe:	6821      	ldrge	r1, [r4, #0]
 8006b00:	f021 0104 	bicge.w	r1, r1, #4
 8006b04:	6021      	strge	r1, [r4, #0]
 8006b06:	b90d      	cbnz	r5, 8006b0c <_printf_i+0x118>
 8006b08:	2e00      	cmp	r6, #0
 8006b0a:	d04d      	beq.n	8006ba8 <_printf_i+0x1b4>
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b12:	fb03 5711 	mls	r7, r3, r1, r5
 8006b16:	5dc7      	ldrb	r7, [r0, r7]
 8006b18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b1c:	462f      	mov	r7, r5
 8006b1e:	42bb      	cmp	r3, r7
 8006b20:	460d      	mov	r5, r1
 8006b22:	d9f4      	bls.n	8006b0e <_printf_i+0x11a>
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d10b      	bne.n	8006b40 <_printf_i+0x14c>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	07df      	lsls	r7, r3, #31
 8006b2c:	d508      	bpl.n	8006b40 <_printf_i+0x14c>
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	6861      	ldr	r1, [r4, #4]
 8006b32:	4299      	cmp	r1, r3
 8006b34:	bfde      	ittt	le
 8006b36:	2330      	movle	r3, #48	; 0x30
 8006b38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b40:	1b92      	subs	r2, r2, r6
 8006b42:	6122      	str	r2, [r4, #16]
 8006b44:	f8cd a000 	str.w	sl, [sp]
 8006b48:	464b      	mov	r3, r9
 8006b4a:	aa03      	add	r2, sp, #12
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4640      	mov	r0, r8
 8006b50:	f7ff fee2 	bl	8006918 <_printf_common>
 8006b54:	3001      	adds	r0, #1
 8006b56:	d14c      	bne.n	8006bf2 <_printf_i+0x1fe>
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	b004      	add	sp, #16
 8006b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b62:	4835      	ldr	r0, [pc, #212]	; (8006c38 <_printf_i+0x244>)
 8006b64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	680e      	ldr	r6, [r1, #0]
 8006b6c:	061f      	lsls	r7, r3, #24
 8006b6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b72:	600e      	str	r6, [r1, #0]
 8006b74:	d514      	bpl.n	8006ba0 <_printf_i+0x1ac>
 8006b76:	07d9      	lsls	r1, r3, #31
 8006b78:	bf44      	itt	mi
 8006b7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b7e:	6023      	strmi	r3, [r4, #0]
 8006b80:	b91d      	cbnz	r5, 8006b8a <_printf_i+0x196>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	f023 0320 	bic.w	r3, r3, #32
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	2310      	movs	r3, #16
 8006b8c:	e7b0      	b.n	8006af0 <_printf_i+0xfc>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	f043 0320 	orr.w	r3, r3, #32
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	2378      	movs	r3, #120	; 0x78
 8006b98:	4828      	ldr	r0, [pc, #160]	; (8006c3c <_printf_i+0x248>)
 8006b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b9e:	e7e3      	b.n	8006b68 <_printf_i+0x174>
 8006ba0:	065e      	lsls	r6, r3, #25
 8006ba2:	bf48      	it	mi
 8006ba4:	b2ad      	uxthmi	r5, r5
 8006ba6:	e7e6      	b.n	8006b76 <_printf_i+0x182>
 8006ba8:	4616      	mov	r6, r2
 8006baa:	e7bb      	b.n	8006b24 <_printf_i+0x130>
 8006bac:	680b      	ldr	r3, [r1, #0]
 8006bae:	6826      	ldr	r6, [r4, #0]
 8006bb0:	6960      	ldr	r0, [r4, #20]
 8006bb2:	1d1d      	adds	r5, r3, #4
 8006bb4:	600d      	str	r5, [r1, #0]
 8006bb6:	0635      	lsls	r5, r6, #24
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	d501      	bpl.n	8006bc0 <_printf_i+0x1cc>
 8006bbc:	6018      	str	r0, [r3, #0]
 8006bbe:	e002      	b.n	8006bc6 <_printf_i+0x1d2>
 8006bc0:	0671      	lsls	r1, r6, #25
 8006bc2:	d5fb      	bpl.n	8006bbc <_printf_i+0x1c8>
 8006bc4:	8018      	strh	r0, [r3, #0]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	6123      	str	r3, [r4, #16]
 8006bca:	4616      	mov	r6, r2
 8006bcc:	e7ba      	b.n	8006b44 <_printf_i+0x150>
 8006bce:	680b      	ldr	r3, [r1, #0]
 8006bd0:	1d1a      	adds	r2, r3, #4
 8006bd2:	600a      	str	r2, [r1, #0]
 8006bd4:	681e      	ldr	r6, [r3, #0]
 8006bd6:	6862      	ldr	r2, [r4, #4]
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f7f9 fb00 	bl	80001e0 <memchr>
 8006be0:	b108      	cbz	r0, 8006be6 <_printf_i+0x1f2>
 8006be2:	1b80      	subs	r0, r0, r6
 8006be4:	6060      	str	r0, [r4, #4]
 8006be6:	6863      	ldr	r3, [r4, #4]
 8006be8:	6123      	str	r3, [r4, #16]
 8006bea:	2300      	movs	r3, #0
 8006bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf0:	e7a8      	b.n	8006b44 <_printf_i+0x150>
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	47d0      	blx	sl
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d0ab      	beq.n	8006b58 <_printf_i+0x164>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	079b      	lsls	r3, r3, #30
 8006c04:	d413      	bmi.n	8006c2e <_printf_i+0x23a>
 8006c06:	68e0      	ldr	r0, [r4, #12]
 8006c08:	9b03      	ldr	r3, [sp, #12]
 8006c0a:	4298      	cmp	r0, r3
 8006c0c:	bfb8      	it	lt
 8006c0e:	4618      	movlt	r0, r3
 8006c10:	e7a4      	b.n	8006b5c <_printf_i+0x168>
 8006c12:	2301      	movs	r3, #1
 8006c14:	4632      	mov	r2, r6
 8006c16:	4649      	mov	r1, r9
 8006c18:	4640      	mov	r0, r8
 8006c1a:	47d0      	blx	sl
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d09b      	beq.n	8006b58 <_printf_i+0x164>
 8006c20:	3501      	adds	r5, #1
 8006c22:	68e3      	ldr	r3, [r4, #12]
 8006c24:	9903      	ldr	r1, [sp, #12]
 8006c26:	1a5b      	subs	r3, r3, r1
 8006c28:	42ab      	cmp	r3, r5
 8006c2a:	dcf2      	bgt.n	8006c12 <_printf_i+0x21e>
 8006c2c:	e7eb      	b.n	8006c06 <_printf_i+0x212>
 8006c2e:	2500      	movs	r5, #0
 8006c30:	f104 0619 	add.w	r6, r4, #25
 8006c34:	e7f5      	b.n	8006c22 <_printf_i+0x22e>
 8006c36:	bf00      	nop
 8006c38:	080091c6 	.word	0x080091c6
 8006c3c:	080091d7 	.word	0x080091d7

08006c40 <siprintf>:
 8006c40:	b40e      	push	{r1, r2, r3}
 8006c42:	b500      	push	{lr}
 8006c44:	b09c      	sub	sp, #112	; 0x70
 8006c46:	ab1d      	add	r3, sp, #116	; 0x74
 8006c48:	9002      	str	r0, [sp, #8]
 8006c4a:	9006      	str	r0, [sp, #24]
 8006c4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c50:	4809      	ldr	r0, [pc, #36]	; (8006c78 <siprintf+0x38>)
 8006c52:	9107      	str	r1, [sp, #28]
 8006c54:	9104      	str	r1, [sp, #16]
 8006c56:	4909      	ldr	r1, [pc, #36]	; (8006c7c <siprintf+0x3c>)
 8006c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c5c:	9105      	str	r1, [sp, #20]
 8006c5e:	6800      	ldr	r0, [r0, #0]
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	a902      	add	r1, sp, #8
 8006c64:	f001 fb32 	bl	80082cc <_svfiprintf_r>
 8006c68:	9b02      	ldr	r3, [sp, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	b01c      	add	sp, #112	; 0x70
 8006c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c74:	b003      	add	sp, #12
 8006c76:	4770      	bx	lr
 8006c78:	2000000c 	.word	0x2000000c
 8006c7c:	ffff0208 	.word	0xffff0208

08006c80 <quorem>:
 8006c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	6903      	ldr	r3, [r0, #16]
 8006c86:	690c      	ldr	r4, [r1, #16]
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	f2c0 8081 	blt.w	8006d92 <quorem+0x112>
 8006c90:	3c01      	subs	r4, #1
 8006c92:	f101 0814 	add.w	r8, r1, #20
 8006c96:	f100 0514 	add.w	r5, r0, #20
 8006c9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ca4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	429a      	cmp	r2, r3
 8006cac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006cb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cb8:	d331      	bcc.n	8006d1e <quorem+0x9e>
 8006cba:	f04f 0e00 	mov.w	lr, #0
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	46ac      	mov	ip, r5
 8006cc2:	46f2      	mov	sl, lr
 8006cc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cc8:	b293      	uxth	r3, r2
 8006cca:	fb06 e303 	mla	r3, r6, r3, lr
 8006cce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	ebaa 0303 	sub.w	r3, sl, r3
 8006cd8:	0c12      	lsrs	r2, r2, #16
 8006cda:	f8dc a000 	ldr.w	sl, [ip]
 8006cde:	fb06 e202 	mla	r2, r6, r2, lr
 8006ce2:	fa13 f38a 	uxtah	r3, r3, sl
 8006ce6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cea:	fa1f fa82 	uxth.w	sl, r2
 8006cee:	f8dc 2000 	ldr.w	r2, [ip]
 8006cf2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006cf6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d00:	4581      	cmp	r9, r0
 8006d02:	f84c 3b04 	str.w	r3, [ip], #4
 8006d06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d0a:	d2db      	bcs.n	8006cc4 <quorem+0x44>
 8006d0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d10:	b92b      	cbnz	r3, 8006d1e <quorem+0x9e>
 8006d12:	9b01      	ldr	r3, [sp, #4]
 8006d14:	3b04      	subs	r3, #4
 8006d16:	429d      	cmp	r5, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	d32e      	bcc.n	8006d7a <quorem+0xfa>
 8006d1c:	613c      	str	r4, [r7, #16]
 8006d1e:	4638      	mov	r0, r7
 8006d20:	f001 f8be 	bl	8007ea0 <__mcmp>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	db24      	blt.n	8006d72 <quorem+0xf2>
 8006d28:	3601      	adds	r6, #1
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f04f 0c00 	mov.w	ip, #0
 8006d30:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d34:	f8d0 e000 	ldr.w	lr, [r0]
 8006d38:	b293      	uxth	r3, r2
 8006d3a:	ebac 0303 	sub.w	r3, ip, r3
 8006d3e:	0c12      	lsrs	r2, r2, #16
 8006d40:	fa13 f38e 	uxtah	r3, r3, lr
 8006d44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d52:	45c1      	cmp	r9, r8
 8006d54:	f840 3b04 	str.w	r3, [r0], #4
 8006d58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d5c:	d2e8      	bcs.n	8006d30 <quorem+0xb0>
 8006d5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d66:	b922      	cbnz	r2, 8006d72 <quorem+0xf2>
 8006d68:	3b04      	subs	r3, #4
 8006d6a:	429d      	cmp	r5, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	d30a      	bcc.n	8006d86 <quorem+0x106>
 8006d70:	613c      	str	r4, [r7, #16]
 8006d72:	4630      	mov	r0, r6
 8006d74:	b003      	add	sp, #12
 8006d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	3b04      	subs	r3, #4
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	d1cc      	bne.n	8006d1c <quorem+0x9c>
 8006d82:	3c01      	subs	r4, #1
 8006d84:	e7c7      	b.n	8006d16 <quorem+0x96>
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	3b04      	subs	r3, #4
 8006d8a:	2a00      	cmp	r2, #0
 8006d8c:	d1f0      	bne.n	8006d70 <quorem+0xf0>
 8006d8e:	3c01      	subs	r4, #1
 8006d90:	e7eb      	b.n	8006d6a <quorem+0xea>
 8006d92:	2000      	movs	r0, #0
 8006d94:	e7ee      	b.n	8006d74 <quorem+0xf4>
	...

08006d98 <_dtoa_r>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	ed2d 8b02 	vpush	{d8}
 8006da0:	ec57 6b10 	vmov	r6, r7, d0
 8006da4:	b095      	sub	sp, #84	; 0x54
 8006da6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006da8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006dac:	9105      	str	r1, [sp, #20]
 8006dae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006db2:	4604      	mov	r4, r0
 8006db4:	9209      	str	r2, [sp, #36]	; 0x24
 8006db6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006db8:	b975      	cbnz	r5, 8006dd8 <_dtoa_r+0x40>
 8006dba:	2010      	movs	r0, #16
 8006dbc:	f000 fddc 	bl	8007978 <malloc>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6260      	str	r0, [r4, #36]	; 0x24
 8006dc4:	b920      	cbnz	r0, 8006dd0 <_dtoa_r+0x38>
 8006dc6:	4bb2      	ldr	r3, [pc, #712]	; (8007090 <_dtoa_r+0x2f8>)
 8006dc8:	21ea      	movs	r1, #234	; 0xea
 8006dca:	48b2      	ldr	r0, [pc, #712]	; (8007094 <_dtoa_r+0x2fc>)
 8006dcc:	f001 fb8e 	bl	80084ec <__assert_func>
 8006dd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006dd4:	6005      	str	r5, [r0, #0]
 8006dd6:	60c5      	str	r5, [r0, #12]
 8006dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dda:	6819      	ldr	r1, [r3, #0]
 8006ddc:	b151      	cbz	r1, 8006df4 <_dtoa_r+0x5c>
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	604a      	str	r2, [r1, #4]
 8006de2:	2301      	movs	r3, #1
 8006de4:	4093      	lsls	r3, r2
 8006de6:	608b      	str	r3, [r1, #8]
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fe1b 	bl	8007a24 <_Bfree>
 8006dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	1e3b      	subs	r3, r7, #0
 8006df6:	bfb9      	ittee	lt
 8006df8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006dfc:	9303      	strlt	r3, [sp, #12]
 8006dfe:	2300      	movge	r3, #0
 8006e00:	f8c8 3000 	strge.w	r3, [r8]
 8006e04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006e08:	4ba3      	ldr	r3, [pc, #652]	; (8007098 <_dtoa_r+0x300>)
 8006e0a:	bfbc      	itt	lt
 8006e0c:	2201      	movlt	r2, #1
 8006e0e:	f8c8 2000 	strlt.w	r2, [r8]
 8006e12:	ea33 0309 	bics.w	r3, r3, r9
 8006e16:	d11b      	bne.n	8006e50 <_dtoa_r+0xb8>
 8006e18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e24:	4333      	orrs	r3, r6
 8006e26:	f000 857a 	beq.w	800791e <_dtoa_r+0xb86>
 8006e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e2c:	b963      	cbnz	r3, 8006e48 <_dtoa_r+0xb0>
 8006e2e:	4b9b      	ldr	r3, [pc, #620]	; (800709c <_dtoa_r+0x304>)
 8006e30:	e024      	b.n	8006e7c <_dtoa_r+0xe4>
 8006e32:	4b9b      	ldr	r3, [pc, #620]	; (80070a0 <_dtoa_r+0x308>)
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e3a:	6013      	str	r3, [r2, #0]
 8006e3c:	9800      	ldr	r0, [sp, #0]
 8006e3e:	b015      	add	sp, #84	; 0x54
 8006e40:	ecbd 8b02 	vpop	{d8}
 8006e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e48:	4b94      	ldr	r3, [pc, #592]	; (800709c <_dtoa_r+0x304>)
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	3303      	adds	r3, #3
 8006e4e:	e7f3      	b.n	8006e38 <_dtoa_r+0xa0>
 8006e50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e54:	2200      	movs	r2, #0
 8006e56:	ec51 0b17 	vmov	r0, r1, d7
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006e60:	f7f9 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e64:	4680      	mov	r8, r0
 8006e66:	b158      	cbz	r0, 8006e80 <_dtoa_r+0xe8>
 8006e68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8551 	beq.w	8007918 <_dtoa_r+0xb80>
 8006e76:	488b      	ldr	r0, [pc, #556]	; (80070a4 <_dtoa_r+0x30c>)
 8006e78:	6018      	str	r0, [r3, #0]
 8006e7a:	1e43      	subs	r3, r0, #1
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	e7dd      	b.n	8006e3c <_dtoa_r+0xa4>
 8006e80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006e84:	aa12      	add	r2, sp, #72	; 0x48
 8006e86:	a913      	add	r1, sp, #76	; 0x4c
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f001 f8ad 	bl	8007fe8 <__d2b>
 8006e8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e92:	4683      	mov	fp, r0
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	d07c      	beq.n	8006f92 <_dtoa_r+0x1fa>
 8006e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006e9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ea2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006ea6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006eaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006eae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006eb2:	4b7d      	ldr	r3, [pc, #500]	; (80070a8 <_dtoa_r+0x310>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	4639      	mov	r1, r7
 8006eba:	f7f9 f9e5 	bl	8000288 <__aeabi_dsub>
 8006ebe:	a36e      	add	r3, pc, #440	; (adr r3, 8007078 <_dtoa_r+0x2e0>)
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	f7f9 fb98 	bl	80005f8 <__aeabi_dmul>
 8006ec8:	a36d      	add	r3, pc, #436	; (adr r3, 8007080 <_dtoa_r+0x2e8>)
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f7f9 f9dd 	bl	800028c <__adddf3>
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	460f      	mov	r7, r1
 8006ed8:	f7f9 fb24 	bl	8000524 <__aeabi_i2d>
 8006edc:	a36a      	add	r3, pc, #424	; (adr r3, 8007088 <_dtoa_r+0x2f0>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f7f9 fb89 	bl	80005f8 <__aeabi_dmul>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	4630      	mov	r0, r6
 8006eec:	4639      	mov	r1, r7
 8006eee:	f7f9 f9cd 	bl	800028c <__adddf3>
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	460f      	mov	r7, r1
 8006ef6:	f7f9 fe2f 	bl	8000b58 <__aeabi_d2iz>
 8006efa:	2200      	movs	r2, #0
 8006efc:	4682      	mov	sl, r0
 8006efe:	2300      	movs	r3, #0
 8006f00:	4630      	mov	r0, r6
 8006f02:	4639      	mov	r1, r7
 8006f04:	f7f9 fdea 	bl	8000adc <__aeabi_dcmplt>
 8006f08:	b148      	cbz	r0, 8006f1e <_dtoa_r+0x186>
 8006f0a:	4650      	mov	r0, sl
 8006f0c:	f7f9 fb0a 	bl	8000524 <__aeabi_i2d>
 8006f10:	4632      	mov	r2, r6
 8006f12:	463b      	mov	r3, r7
 8006f14:	f7f9 fdd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f18:	b908      	cbnz	r0, 8006f1e <_dtoa_r+0x186>
 8006f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f1e:	f1ba 0f16 	cmp.w	sl, #22
 8006f22:	d854      	bhi.n	8006fce <_dtoa_r+0x236>
 8006f24:	4b61      	ldr	r3, [pc, #388]	; (80070ac <_dtoa_r+0x314>)
 8006f26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f32:	f7f9 fdd3 	bl	8000adc <__aeabi_dcmplt>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d04b      	beq.n	8006fd2 <_dtoa_r+0x23a>
 8006f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f3e:	2300      	movs	r3, #0
 8006f40:	930e      	str	r3, [sp, #56]	; 0x38
 8006f42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f44:	1b5d      	subs	r5, r3, r5
 8006f46:	1e6b      	subs	r3, r5, #1
 8006f48:	9304      	str	r3, [sp, #16]
 8006f4a:	bf43      	ittte	mi
 8006f4c:	2300      	movmi	r3, #0
 8006f4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006f52:	9304      	strmi	r3, [sp, #16]
 8006f54:	f04f 0800 	movpl.w	r8, #0
 8006f58:	f1ba 0f00 	cmp.w	sl, #0
 8006f5c:	db3b      	blt.n	8006fd6 <_dtoa_r+0x23e>
 8006f5e:	9b04      	ldr	r3, [sp, #16]
 8006f60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006f64:	4453      	add	r3, sl
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	9306      	str	r3, [sp, #24]
 8006f6c:	9b05      	ldr	r3, [sp, #20]
 8006f6e:	2b09      	cmp	r3, #9
 8006f70:	d869      	bhi.n	8007046 <_dtoa_r+0x2ae>
 8006f72:	2b05      	cmp	r3, #5
 8006f74:	bfc4      	itt	gt
 8006f76:	3b04      	subgt	r3, #4
 8006f78:	9305      	strgt	r3, [sp, #20]
 8006f7a:	9b05      	ldr	r3, [sp, #20]
 8006f7c:	f1a3 0302 	sub.w	r3, r3, #2
 8006f80:	bfcc      	ite	gt
 8006f82:	2500      	movgt	r5, #0
 8006f84:	2501      	movle	r5, #1
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d869      	bhi.n	800705e <_dtoa_r+0x2c6>
 8006f8a:	e8df f003 	tbb	[pc, r3]
 8006f8e:	4e2c      	.short	0x4e2c
 8006f90:	5a4c      	.short	0x5a4c
 8006f92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006f96:	441d      	add	r5, r3
 8006f98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	bfc1      	itttt	gt
 8006fa0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fa4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006fa8:	fa09 f303 	lslgt.w	r3, r9, r3
 8006fac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006fb0:	bfda      	itte	le
 8006fb2:	f1c3 0320 	rsble	r3, r3, #32
 8006fb6:	fa06 f003 	lslle.w	r0, r6, r3
 8006fba:	4318      	orrgt	r0, r3
 8006fbc:	f7f9 faa2 	bl	8000504 <__aeabi_ui2d>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006fc8:	3d01      	subs	r5, #1
 8006fca:	9310      	str	r3, [sp, #64]	; 0x40
 8006fcc:	e771      	b.n	8006eb2 <_dtoa_r+0x11a>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e7b6      	b.n	8006f40 <_dtoa_r+0x1a8>
 8006fd2:	900e      	str	r0, [sp, #56]	; 0x38
 8006fd4:	e7b5      	b.n	8006f42 <_dtoa_r+0x1aa>
 8006fd6:	f1ca 0300 	rsb	r3, sl, #0
 8006fda:	9306      	str	r3, [sp, #24]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	eba8 080a 	sub.w	r8, r8, sl
 8006fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8006fe4:	e7c2      	b.n	8006f6c <_dtoa_r+0x1d4>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	9308      	str	r3, [sp, #32]
 8006fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	dc39      	bgt.n	8007064 <_dtoa_r+0x2cc>
 8006ff0:	f04f 0901 	mov.w	r9, #1
 8006ff4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006ffe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007000:	2200      	movs	r2, #0
 8007002:	6042      	str	r2, [r0, #4]
 8007004:	2204      	movs	r2, #4
 8007006:	f102 0614 	add.w	r6, r2, #20
 800700a:	429e      	cmp	r6, r3
 800700c:	6841      	ldr	r1, [r0, #4]
 800700e:	d92f      	bls.n	8007070 <_dtoa_r+0x2d8>
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fcc7 	bl	80079a4 <_Balloc>
 8007016:	9000      	str	r0, [sp, #0]
 8007018:	2800      	cmp	r0, #0
 800701a:	d14b      	bne.n	80070b4 <_dtoa_r+0x31c>
 800701c:	4b24      	ldr	r3, [pc, #144]	; (80070b0 <_dtoa_r+0x318>)
 800701e:	4602      	mov	r2, r0
 8007020:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007024:	e6d1      	b.n	8006dca <_dtoa_r+0x32>
 8007026:	2301      	movs	r3, #1
 8007028:	e7de      	b.n	8006fe8 <_dtoa_r+0x250>
 800702a:	2300      	movs	r3, #0
 800702c:	9308      	str	r3, [sp, #32]
 800702e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007030:	eb0a 0903 	add.w	r9, sl, r3
 8007034:	f109 0301 	add.w	r3, r9, #1
 8007038:	2b01      	cmp	r3, #1
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	bfb8      	it	lt
 800703e:	2301      	movlt	r3, #1
 8007040:	e7dd      	b.n	8006ffe <_dtoa_r+0x266>
 8007042:	2301      	movs	r3, #1
 8007044:	e7f2      	b.n	800702c <_dtoa_r+0x294>
 8007046:	2501      	movs	r5, #1
 8007048:	2300      	movs	r3, #0
 800704a:	9305      	str	r3, [sp, #20]
 800704c:	9508      	str	r5, [sp, #32]
 800704e:	f04f 39ff 	mov.w	r9, #4294967295
 8007052:	2200      	movs	r2, #0
 8007054:	f8cd 9004 	str.w	r9, [sp, #4]
 8007058:	2312      	movs	r3, #18
 800705a:	9209      	str	r2, [sp, #36]	; 0x24
 800705c:	e7cf      	b.n	8006ffe <_dtoa_r+0x266>
 800705e:	2301      	movs	r3, #1
 8007060:	9308      	str	r3, [sp, #32]
 8007062:	e7f4      	b.n	800704e <_dtoa_r+0x2b6>
 8007064:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007068:	f8cd 9004 	str.w	r9, [sp, #4]
 800706c:	464b      	mov	r3, r9
 800706e:	e7c6      	b.n	8006ffe <_dtoa_r+0x266>
 8007070:	3101      	adds	r1, #1
 8007072:	6041      	str	r1, [r0, #4]
 8007074:	0052      	lsls	r2, r2, #1
 8007076:	e7c6      	b.n	8007006 <_dtoa_r+0x26e>
 8007078:	636f4361 	.word	0x636f4361
 800707c:	3fd287a7 	.word	0x3fd287a7
 8007080:	8b60c8b3 	.word	0x8b60c8b3
 8007084:	3fc68a28 	.word	0x3fc68a28
 8007088:	509f79fb 	.word	0x509f79fb
 800708c:	3fd34413 	.word	0x3fd34413
 8007090:	080091f5 	.word	0x080091f5
 8007094:	0800920c 	.word	0x0800920c
 8007098:	7ff00000 	.word	0x7ff00000
 800709c:	080091f1 	.word	0x080091f1
 80070a0:	080091e8 	.word	0x080091e8
 80070a4:	080091c5 	.word	0x080091c5
 80070a8:	3ff80000 	.word	0x3ff80000
 80070ac:	08009308 	.word	0x08009308
 80070b0:	0800926b 	.word	0x0800926b
 80070b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070b6:	9a00      	ldr	r2, [sp, #0]
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	9b01      	ldr	r3, [sp, #4]
 80070bc:	2b0e      	cmp	r3, #14
 80070be:	f200 80ad 	bhi.w	800721c <_dtoa_r+0x484>
 80070c2:	2d00      	cmp	r5, #0
 80070c4:	f000 80aa 	beq.w	800721c <_dtoa_r+0x484>
 80070c8:	f1ba 0f00 	cmp.w	sl, #0
 80070cc:	dd36      	ble.n	800713c <_dtoa_r+0x3a4>
 80070ce:	4ac3      	ldr	r2, [pc, #780]	; (80073dc <_dtoa_r+0x644>)
 80070d0:	f00a 030f 	and.w	r3, sl, #15
 80070d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070d8:	ed93 7b00 	vldr	d7, [r3]
 80070dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80070e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80070e4:	eeb0 8a47 	vmov.f32	s16, s14
 80070e8:	eef0 8a67 	vmov.f32	s17, s15
 80070ec:	d016      	beq.n	800711c <_dtoa_r+0x384>
 80070ee:	4bbc      	ldr	r3, [pc, #752]	; (80073e0 <_dtoa_r+0x648>)
 80070f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070f8:	f7f9 fba8 	bl	800084c <__aeabi_ddiv>
 80070fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007100:	f007 070f 	and.w	r7, r7, #15
 8007104:	2503      	movs	r5, #3
 8007106:	4eb6      	ldr	r6, [pc, #728]	; (80073e0 <_dtoa_r+0x648>)
 8007108:	b957      	cbnz	r7, 8007120 <_dtoa_r+0x388>
 800710a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800710e:	ec53 2b18 	vmov	r2, r3, d8
 8007112:	f7f9 fb9b 	bl	800084c <__aeabi_ddiv>
 8007116:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800711a:	e029      	b.n	8007170 <_dtoa_r+0x3d8>
 800711c:	2502      	movs	r5, #2
 800711e:	e7f2      	b.n	8007106 <_dtoa_r+0x36e>
 8007120:	07f9      	lsls	r1, r7, #31
 8007122:	d508      	bpl.n	8007136 <_dtoa_r+0x39e>
 8007124:	ec51 0b18 	vmov	r0, r1, d8
 8007128:	e9d6 2300 	ldrd	r2, r3, [r6]
 800712c:	f7f9 fa64 	bl	80005f8 <__aeabi_dmul>
 8007130:	ec41 0b18 	vmov	d8, r0, r1
 8007134:	3501      	adds	r5, #1
 8007136:	107f      	asrs	r7, r7, #1
 8007138:	3608      	adds	r6, #8
 800713a:	e7e5      	b.n	8007108 <_dtoa_r+0x370>
 800713c:	f000 80a6 	beq.w	800728c <_dtoa_r+0x4f4>
 8007140:	f1ca 0600 	rsb	r6, sl, #0
 8007144:	4ba5      	ldr	r3, [pc, #660]	; (80073dc <_dtoa_r+0x644>)
 8007146:	4fa6      	ldr	r7, [pc, #664]	; (80073e0 <_dtoa_r+0x648>)
 8007148:	f006 020f 	and.w	r2, r6, #15
 800714c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007158:	f7f9 fa4e 	bl	80005f8 <__aeabi_dmul>
 800715c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007160:	1136      	asrs	r6, r6, #4
 8007162:	2300      	movs	r3, #0
 8007164:	2502      	movs	r5, #2
 8007166:	2e00      	cmp	r6, #0
 8007168:	f040 8085 	bne.w	8007276 <_dtoa_r+0x4de>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1d2      	bne.n	8007116 <_dtoa_r+0x37e>
 8007170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 808c 	beq.w	8007290 <_dtoa_r+0x4f8>
 8007178:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800717c:	4b99      	ldr	r3, [pc, #612]	; (80073e4 <_dtoa_r+0x64c>)
 800717e:	2200      	movs	r2, #0
 8007180:	4630      	mov	r0, r6
 8007182:	4639      	mov	r1, r7
 8007184:	f7f9 fcaa 	bl	8000adc <__aeabi_dcmplt>
 8007188:	2800      	cmp	r0, #0
 800718a:	f000 8081 	beq.w	8007290 <_dtoa_r+0x4f8>
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d07d      	beq.n	8007290 <_dtoa_r+0x4f8>
 8007194:	f1b9 0f00 	cmp.w	r9, #0
 8007198:	dd3c      	ble.n	8007214 <_dtoa_r+0x47c>
 800719a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800719e:	9307      	str	r3, [sp, #28]
 80071a0:	2200      	movs	r2, #0
 80071a2:	4b91      	ldr	r3, [pc, #580]	; (80073e8 <_dtoa_r+0x650>)
 80071a4:	4630      	mov	r0, r6
 80071a6:	4639      	mov	r1, r7
 80071a8:	f7f9 fa26 	bl	80005f8 <__aeabi_dmul>
 80071ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b0:	3501      	adds	r5, #1
 80071b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80071b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071ba:	4628      	mov	r0, r5
 80071bc:	f7f9 f9b2 	bl	8000524 <__aeabi_i2d>
 80071c0:	4632      	mov	r2, r6
 80071c2:	463b      	mov	r3, r7
 80071c4:	f7f9 fa18 	bl	80005f8 <__aeabi_dmul>
 80071c8:	4b88      	ldr	r3, [pc, #544]	; (80073ec <_dtoa_r+0x654>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	f7f9 f85e 	bl	800028c <__adddf3>
 80071d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80071d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d8:	9303      	str	r3, [sp, #12]
 80071da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d15c      	bne.n	800729a <_dtoa_r+0x502>
 80071e0:	4b83      	ldr	r3, [pc, #524]	; (80073f0 <_dtoa_r+0x658>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 f84e 	bl	8000288 <__aeabi_dsub>
 80071ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071f0:	4606      	mov	r6, r0
 80071f2:	460f      	mov	r7, r1
 80071f4:	f7f9 fc90 	bl	8000b18 <__aeabi_dcmpgt>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f040 8296 	bne.w	800772a <_dtoa_r+0x992>
 80071fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007202:	4630      	mov	r0, r6
 8007204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007208:	4639      	mov	r1, r7
 800720a:	f7f9 fc67 	bl	8000adc <__aeabi_dcmplt>
 800720e:	2800      	cmp	r0, #0
 8007210:	f040 8288 	bne.w	8007724 <_dtoa_r+0x98c>
 8007214:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007218:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800721c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800721e:	2b00      	cmp	r3, #0
 8007220:	f2c0 8158 	blt.w	80074d4 <_dtoa_r+0x73c>
 8007224:	f1ba 0f0e 	cmp.w	sl, #14
 8007228:	f300 8154 	bgt.w	80074d4 <_dtoa_r+0x73c>
 800722c:	4b6b      	ldr	r3, [pc, #428]	; (80073dc <_dtoa_r+0x644>)
 800722e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007232:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	f280 80e3 	bge.w	8007404 <_dtoa_r+0x66c>
 800723e:	9b01      	ldr	r3, [sp, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f300 80df 	bgt.w	8007404 <_dtoa_r+0x66c>
 8007246:	f040 826d 	bne.w	8007724 <_dtoa_r+0x98c>
 800724a:	4b69      	ldr	r3, [pc, #420]	; (80073f0 <_dtoa_r+0x658>)
 800724c:	2200      	movs	r2, #0
 800724e:	4640      	mov	r0, r8
 8007250:	4649      	mov	r1, r9
 8007252:	f7f9 f9d1 	bl	80005f8 <__aeabi_dmul>
 8007256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800725a:	f7f9 fc53 	bl	8000b04 <__aeabi_dcmpge>
 800725e:	9e01      	ldr	r6, [sp, #4]
 8007260:	4637      	mov	r7, r6
 8007262:	2800      	cmp	r0, #0
 8007264:	f040 8243 	bne.w	80076ee <_dtoa_r+0x956>
 8007268:	9d00      	ldr	r5, [sp, #0]
 800726a:	2331      	movs	r3, #49	; 0x31
 800726c:	f805 3b01 	strb.w	r3, [r5], #1
 8007270:	f10a 0a01 	add.w	sl, sl, #1
 8007274:	e23f      	b.n	80076f6 <_dtoa_r+0x95e>
 8007276:	07f2      	lsls	r2, r6, #31
 8007278:	d505      	bpl.n	8007286 <_dtoa_r+0x4ee>
 800727a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800727e:	f7f9 f9bb 	bl	80005f8 <__aeabi_dmul>
 8007282:	3501      	adds	r5, #1
 8007284:	2301      	movs	r3, #1
 8007286:	1076      	asrs	r6, r6, #1
 8007288:	3708      	adds	r7, #8
 800728a:	e76c      	b.n	8007166 <_dtoa_r+0x3ce>
 800728c:	2502      	movs	r5, #2
 800728e:	e76f      	b.n	8007170 <_dtoa_r+0x3d8>
 8007290:	9b01      	ldr	r3, [sp, #4]
 8007292:	f8cd a01c 	str.w	sl, [sp, #28]
 8007296:	930c      	str	r3, [sp, #48]	; 0x30
 8007298:	e78d      	b.n	80071b6 <_dtoa_r+0x41e>
 800729a:	9900      	ldr	r1, [sp, #0]
 800729c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800729e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072a0:	4b4e      	ldr	r3, [pc, #312]	; (80073dc <_dtoa_r+0x644>)
 80072a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072a6:	4401      	add	r1, r0
 80072a8:	9102      	str	r1, [sp, #8]
 80072aa:	9908      	ldr	r1, [sp, #32]
 80072ac:	eeb0 8a47 	vmov.f32	s16, s14
 80072b0:	eef0 8a67 	vmov.f32	s17, s15
 80072b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072bc:	2900      	cmp	r1, #0
 80072be:	d045      	beq.n	800734c <_dtoa_r+0x5b4>
 80072c0:	494c      	ldr	r1, [pc, #304]	; (80073f4 <_dtoa_r+0x65c>)
 80072c2:	2000      	movs	r0, #0
 80072c4:	f7f9 fac2 	bl	800084c <__aeabi_ddiv>
 80072c8:	ec53 2b18 	vmov	r2, r3, d8
 80072cc:	f7f8 ffdc 	bl	8000288 <__aeabi_dsub>
 80072d0:	9d00      	ldr	r5, [sp, #0]
 80072d2:	ec41 0b18 	vmov	d8, r0, r1
 80072d6:	4639      	mov	r1, r7
 80072d8:	4630      	mov	r0, r6
 80072da:	f7f9 fc3d 	bl	8000b58 <__aeabi_d2iz>
 80072de:	900c      	str	r0, [sp, #48]	; 0x30
 80072e0:	f7f9 f920 	bl	8000524 <__aeabi_i2d>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4630      	mov	r0, r6
 80072ea:	4639      	mov	r1, r7
 80072ec:	f7f8 ffcc 	bl	8000288 <__aeabi_dsub>
 80072f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072f2:	3330      	adds	r3, #48	; 0x30
 80072f4:	f805 3b01 	strb.w	r3, [r5], #1
 80072f8:	ec53 2b18 	vmov	r2, r3, d8
 80072fc:	4606      	mov	r6, r0
 80072fe:	460f      	mov	r7, r1
 8007300:	f7f9 fbec 	bl	8000adc <__aeabi_dcmplt>
 8007304:	2800      	cmp	r0, #0
 8007306:	d165      	bne.n	80073d4 <_dtoa_r+0x63c>
 8007308:	4632      	mov	r2, r6
 800730a:	463b      	mov	r3, r7
 800730c:	4935      	ldr	r1, [pc, #212]	; (80073e4 <_dtoa_r+0x64c>)
 800730e:	2000      	movs	r0, #0
 8007310:	f7f8 ffba 	bl	8000288 <__aeabi_dsub>
 8007314:	ec53 2b18 	vmov	r2, r3, d8
 8007318:	f7f9 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800731c:	2800      	cmp	r0, #0
 800731e:	f040 80b9 	bne.w	8007494 <_dtoa_r+0x6fc>
 8007322:	9b02      	ldr	r3, [sp, #8]
 8007324:	429d      	cmp	r5, r3
 8007326:	f43f af75 	beq.w	8007214 <_dtoa_r+0x47c>
 800732a:	4b2f      	ldr	r3, [pc, #188]	; (80073e8 <_dtoa_r+0x650>)
 800732c:	ec51 0b18 	vmov	r0, r1, d8
 8007330:	2200      	movs	r2, #0
 8007332:	f7f9 f961 	bl	80005f8 <__aeabi_dmul>
 8007336:	4b2c      	ldr	r3, [pc, #176]	; (80073e8 <_dtoa_r+0x650>)
 8007338:	ec41 0b18 	vmov	d8, r0, r1
 800733c:	2200      	movs	r2, #0
 800733e:	4630      	mov	r0, r6
 8007340:	4639      	mov	r1, r7
 8007342:	f7f9 f959 	bl	80005f8 <__aeabi_dmul>
 8007346:	4606      	mov	r6, r0
 8007348:	460f      	mov	r7, r1
 800734a:	e7c4      	b.n	80072d6 <_dtoa_r+0x53e>
 800734c:	ec51 0b17 	vmov	r0, r1, d7
 8007350:	f7f9 f952 	bl	80005f8 <__aeabi_dmul>
 8007354:	9b02      	ldr	r3, [sp, #8]
 8007356:	9d00      	ldr	r5, [sp, #0]
 8007358:	930c      	str	r3, [sp, #48]	; 0x30
 800735a:	ec41 0b18 	vmov	d8, r0, r1
 800735e:	4639      	mov	r1, r7
 8007360:	4630      	mov	r0, r6
 8007362:	f7f9 fbf9 	bl	8000b58 <__aeabi_d2iz>
 8007366:	9011      	str	r0, [sp, #68]	; 0x44
 8007368:	f7f9 f8dc 	bl	8000524 <__aeabi_i2d>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4630      	mov	r0, r6
 8007372:	4639      	mov	r1, r7
 8007374:	f7f8 ff88 	bl	8000288 <__aeabi_dsub>
 8007378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800737a:	3330      	adds	r3, #48	; 0x30
 800737c:	f805 3b01 	strb.w	r3, [r5], #1
 8007380:	9b02      	ldr	r3, [sp, #8]
 8007382:	429d      	cmp	r5, r3
 8007384:	4606      	mov	r6, r0
 8007386:	460f      	mov	r7, r1
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	d134      	bne.n	80073f8 <_dtoa_r+0x660>
 800738e:	4b19      	ldr	r3, [pc, #100]	; (80073f4 <_dtoa_r+0x65c>)
 8007390:	ec51 0b18 	vmov	r0, r1, d8
 8007394:	f7f8 ff7a 	bl	800028c <__adddf3>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f9 fbba 	bl	8000b18 <__aeabi_dcmpgt>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d175      	bne.n	8007494 <_dtoa_r+0x6fc>
 80073a8:	ec53 2b18 	vmov	r2, r3, d8
 80073ac:	4911      	ldr	r1, [pc, #68]	; (80073f4 <_dtoa_r+0x65c>)
 80073ae:	2000      	movs	r0, #0
 80073b0:	f7f8 ff6a 	bl	8000288 <__aeabi_dsub>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4630      	mov	r0, r6
 80073ba:	4639      	mov	r1, r7
 80073bc:	f7f9 fb8e 	bl	8000adc <__aeabi_dcmplt>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	f43f af27 	beq.w	8007214 <_dtoa_r+0x47c>
 80073c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073c8:	1e6b      	subs	r3, r5, #1
 80073ca:	930c      	str	r3, [sp, #48]	; 0x30
 80073cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073d0:	2b30      	cmp	r3, #48	; 0x30
 80073d2:	d0f8      	beq.n	80073c6 <_dtoa_r+0x62e>
 80073d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80073d8:	e04a      	b.n	8007470 <_dtoa_r+0x6d8>
 80073da:	bf00      	nop
 80073dc:	08009308 	.word	0x08009308
 80073e0:	080092e0 	.word	0x080092e0
 80073e4:	3ff00000 	.word	0x3ff00000
 80073e8:	40240000 	.word	0x40240000
 80073ec:	401c0000 	.word	0x401c0000
 80073f0:	40140000 	.word	0x40140000
 80073f4:	3fe00000 	.word	0x3fe00000
 80073f8:	4baf      	ldr	r3, [pc, #700]	; (80076b8 <_dtoa_r+0x920>)
 80073fa:	f7f9 f8fd 	bl	80005f8 <__aeabi_dmul>
 80073fe:	4606      	mov	r6, r0
 8007400:	460f      	mov	r7, r1
 8007402:	e7ac      	b.n	800735e <_dtoa_r+0x5c6>
 8007404:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007408:	9d00      	ldr	r5, [sp, #0]
 800740a:	4642      	mov	r2, r8
 800740c:	464b      	mov	r3, r9
 800740e:	4630      	mov	r0, r6
 8007410:	4639      	mov	r1, r7
 8007412:	f7f9 fa1b 	bl	800084c <__aeabi_ddiv>
 8007416:	f7f9 fb9f 	bl	8000b58 <__aeabi_d2iz>
 800741a:	9002      	str	r0, [sp, #8]
 800741c:	f7f9 f882 	bl	8000524 <__aeabi_i2d>
 8007420:	4642      	mov	r2, r8
 8007422:	464b      	mov	r3, r9
 8007424:	f7f9 f8e8 	bl	80005f8 <__aeabi_dmul>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4630      	mov	r0, r6
 800742e:	4639      	mov	r1, r7
 8007430:	f7f8 ff2a 	bl	8000288 <__aeabi_dsub>
 8007434:	9e02      	ldr	r6, [sp, #8]
 8007436:	9f01      	ldr	r7, [sp, #4]
 8007438:	3630      	adds	r6, #48	; 0x30
 800743a:	f805 6b01 	strb.w	r6, [r5], #1
 800743e:	9e00      	ldr	r6, [sp, #0]
 8007440:	1bae      	subs	r6, r5, r6
 8007442:	42b7      	cmp	r7, r6
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	d137      	bne.n	80074ba <_dtoa_r+0x722>
 800744a:	f7f8 ff1f 	bl	800028c <__adddf3>
 800744e:	4642      	mov	r2, r8
 8007450:	464b      	mov	r3, r9
 8007452:	4606      	mov	r6, r0
 8007454:	460f      	mov	r7, r1
 8007456:	f7f9 fb5f 	bl	8000b18 <__aeabi_dcmpgt>
 800745a:	b9c8      	cbnz	r0, 8007490 <_dtoa_r+0x6f8>
 800745c:	4642      	mov	r2, r8
 800745e:	464b      	mov	r3, r9
 8007460:	4630      	mov	r0, r6
 8007462:	4639      	mov	r1, r7
 8007464:	f7f9 fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 8007468:	b110      	cbz	r0, 8007470 <_dtoa_r+0x6d8>
 800746a:	9b02      	ldr	r3, [sp, #8]
 800746c:	07d9      	lsls	r1, r3, #31
 800746e:	d40f      	bmi.n	8007490 <_dtoa_r+0x6f8>
 8007470:	4620      	mov	r0, r4
 8007472:	4659      	mov	r1, fp
 8007474:	f000 fad6 	bl	8007a24 <_Bfree>
 8007478:	2300      	movs	r3, #0
 800747a:	702b      	strb	r3, [r5, #0]
 800747c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800747e:	f10a 0001 	add.w	r0, sl, #1
 8007482:	6018      	str	r0, [r3, #0]
 8007484:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007486:	2b00      	cmp	r3, #0
 8007488:	f43f acd8 	beq.w	8006e3c <_dtoa_r+0xa4>
 800748c:	601d      	str	r5, [r3, #0]
 800748e:	e4d5      	b.n	8006e3c <_dtoa_r+0xa4>
 8007490:	f8cd a01c 	str.w	sl, [sp, #28]
 8007494:	462b      	mov	r3, r5
 8007496:	461d      	mov	r5, r3
 8007498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800749c:	2a39      	cmp	r2, #57	; 0x39
 800749e:	d108      	bne.n	80074b2 <_dtoa_r+0x71a>
 80074a0:	9a00      	ldr	r2, [sp, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d1f7      	bne.n	8007496 <_dtoa_r+0x6fe>
 80074a6:	9a07      	ldr	r2, [sp, #28]
 80074a8:	9900      	ldr	r1, [sp, #0]
 80074aa:	3201      	adds	r2, #1
 80074ac:	9207      	str	r2, [sp, #28]
 80074ae:	2230      	movs	r2, #48	; 0x30
 80074b0:	700a      	strb	r2, [r1, #0]
 80074b2:	781a      	ldrb	r2, [r3, #0]
 80074b4:	3201      	adds	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	e78c      	b.n	80073d4 <_dtoa_r+0x63c>
 80074ba:	4b7f      	ldr	r3, [pc, #508]	; (80076b8 <_dtoa_r+0x920>)
 80074bc:	2200      	movs	r2, #0
 80074be:	f7f9 f89b 	bl	80005f8 <__aeabi_dmul>
 80074c2:	2200      	movs	r2, #0
 80074c4:	2300      	movs	r3, #0
 80074c6:	4606      	mov	r6, r0
 80074c8:	460f      	mov	r7, r1
 80074ca:	f7f9 fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d09b      	beq.n	800740a <_dtoa_r+0x672>
 80074d2:	e7cd      	b.n	8007470 <_dtoa_r+0x6d8>
 80074d4:	9a08      	ldr	r2, [sp, #32]
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	f000 80c4 	beq.w	8007664 <_dtoa_r+0x8cc>
 80074dc:	9a05      	ldr	r2, [sp, #20]
 80074de:	2a01      	cmp	r2, #1
 80074e0:	f300 80a8 	bgt.w	8007634 <_dtoa_r+0x89c>
 80074e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074e6:	2a00      	cmp	r2, #0
 80074e8:	f000 80a0 	beq.w	800762c <_dtoa_r+0x894>
 80074ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074f0:	9e06      	ldr	r6, [sp, #24]
 80074f2:	4645      	mov	r5, r8
 80074f4:	9a04      	ldr	r2, [sp, #16]
 80074f6:	2101      	movs	r1, #1
 80074f8:	441a      	add	r2, r3
 80074fa:	4620      	mov	r0, r4
 80074fc:	4498      	add	r8, r3
 80074fe:	9204      	str	r2, [sp, #16]
 8007500:	f000 fb4c 	bl	8007b9c <__i2b>
 8007504:	4607      	mov	r7, r0
 8007506:	2d00      	cmp	r5, #0
 8007508:	dd0b      	ble.n	8007522 <_dtoa_r+0x78a>
 800750a:	9b04      	ldr	r3, [sp, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	dd08      	ble.n	8007522 <_dtoa_r+0x78a>
 8007510:	42ab      	cmp	r3, r5
 8007512:	9a04      	ldr	r2, [sp, #16]
 8007514:	bfa8      	it	ge
 8007516:	462b      	movge	r3, r5
 8007518:	eba8 0803 	sub.w	r8, r8, r3
 800751c:	1aed      	subs	r5, r5, r3
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	9b06      	ldr	r3, [sp, #24]
 8007524:	b1fb      	cbz	r3, 8007566 <_dtoa_r+0x7ce>
 8007526:	9b08      	ldr	r3, [sp, #32]
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 809f 	beq.w	800766c <_dtoa_r+0x8d4>
 800752e:	2e00      	cmp	r6, #0
 8007530:	dd11      	ble.n	8007556 <_dtoa_r+0x7be>
 8007532:	4639      	mov	r1, r7
 8007534:	4632      	mov	r2, r6
 8007536:	4620      	mov	r0, r4
 8007538:	f000 fbec 	bl	8007d14 <__pow5mult>
 800753c:	465a      	mov	r2, fp
 800753e:	4601      	mov	r1, r0
 8007540:	4607      	mov	r7, r0
 8007542:	4620      	mov	r0, r4
 8007544:	f000 fb40 	bl	8007bc8 <__multiply>
 8007548:	4659      	mov	r1, fp
 800754a:	9007      	str	r0, [sp, #28]
 800754c:	4620      	mov	r0, r4
 800754e:	f000 fa69 	bl	8007a24 <_Bfree>
 8007552:	9b07      	ldr	r3, [sp, #28]
 8007554:	469b      	mov	fp, r3
 8007556:	9b06      	ldr	r3, [sp, #24]
 8007558:	1b9a      	subs	r2, r3, r6
 800755a:	d004      	beq.n	8007566 <_dtoa_r+0x7ce>
 800755c:	4659      	mov	r1, fp
 800755e:	4620      	mov	r0, r4
 8007560:	f000 fbd8 	bl	8007d14 <__pow5mult>
 8007564:	4683      	mov	fp, r0
 8007566:	2101      	movs	r1, #1
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fb17 	bl	8007b9c <__i2b>
 800756e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007570:	2b00      	cmp	r3, #0
 8007572:	4606      	mov	r6, r0
 8007574:	dd7c      	ble.n	8007670 <_dtoa_r+0x8d8>
 8007576:	461a      	mov	r2, r3
 8007578:	4601      	mov	r1, r0
 800757a:	4620      	mov	r0, r4
 800757c:	f000 fbca 	bl	8007d14 <__pow5mult>
 8007580:	9b05      	ldr	r3, [sp, #20]
 8007582:	2b01      	cmp	r3, #1
 8007584:	4606      	mov	r6, r0
 8007586:	dd76      	ble.n	8007676 <_dtoa_r+0x8de>
 8007588:	2300      	movs	r3, #0
 800758a:	9306      	str	r3, [sp, #24]
 800758c:	6933      	ldr	r3, [r6, #16]
 800758e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007592:	6918      	ldr	r0, [r3, #16]
 8007594:	f000 fab2 	bl	8007afc <__hi0bits>
 8007598:	f1c0 0020 	rsb	r0, r0, #32
 800759c:	9b04      	ldr	r3, [sp, #16]
 800759e:	4418      	add	r0, r3
 80075a0:	f010 001f 	ands.w	r0, r0, #31
 80075a4:	f000 8086 	beq.w	80076b4 <_dtoa_r+0x91c>
 80075a8:	f1c0 0320 	rsb	r3, r0, #32
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	dd7f      	ble.n	80076b0 <_dtoa_r+0x918>
 80075b0:	f1c0 001c 	rsb	r0, r0, #28
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	4403      	add	r3, r0
 80075b8:	4480      	add	r8, r0
 80075ba:	4405      	add	r5, r0
 80075bc:	9304      	str	r3, [sp, #16]
 80075be:	f1b8 0f00 	cmp.w	r8, #0
 80075c2:	dd05      	ble.n	80075d0 <_dtoa_r+0x838>
 80075c4:	4659      	mov	r1, fp
 80075c6:	4642      	mov	r2, r8
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fbfd 	bl	8007dc8 <__lshift>
 80075ce:	4683      	mov	fp, r0
 80075d0:	9b04      	ldr	r3, [sp, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	dd05      	ble.n	80075e2 <_dtoa_r+0x84a>
 80075d6:	4631      	mov	r1, r6
 80075d8:	461a      	mov	r2, r3
 80075da:	4620      	mov	r0, r4
 80075dc:	f000 fbf4 	bl	8007dc8 <__lshift>
 80075e0:	4606      	mov	r6, r0
 80075e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d069      	beq.n	80076bc <_dtoa_r+0x924>
 80075e8:	4631      	mov	r1, r6
 80075ea:	4658      	mov	r0, fp
 80075ec:	f000 fc58 	bl	8007ea0 <__mcmp>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	da63      	bge.n	80076bc <_dtoa_r+0x924>
 80075f4:	2300      	movs	r3, #0
 80075f6:	4659      	mov	r1, fp
 80075f8:	220a      	movs	r2, #10
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 fa34 	bl	8007a68 <__multadd>
 8007600:	9b08      	ldr	r3, [sp, #32]
 8007602:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007606:	4683      	mov	fp, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 818f 	beq.w	800792c <_dtoa_r+0xb94>
 800760e:	4639      	mov	r1, r7
 8007610:	2300      	movs	r3, #0
 8007612:	220a      	movs	r2, #10
 8007614:	4620      	mov	r0, r4
 8007616:	f000 fa27 	bl	8007a68 <__multadd>
 800761a:	f1b9 0f00 	cmp.w	r9, #0
 800761e:	4607      	mov	r7, r0
 8007620:	f300 808e 	bgt.w	8007740 <_dtoa_r+0x9a8>
 8007624:	9b05      	ldr	r3, [sp, #20]
 8007626:	2b02      	cmp	r3, #2
 8007628:	dc50      	bgt.n	80076cc <_dtoa_r+0x934>
 800762a:	e089      	b.n	8007740 <_dtoa_r+0x9a8>
 800762c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800762e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007632:	e75d      	b.n	80074f0 <_dtoa_r+0x758>
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	1e5e      	subs	r6, r3, #1
 8007638:	9b06      	ldr	r3, [sp, #24]
 800763a:	42b3      	cmp	r3, r6
 800763c:	bfbf      	itttt	lt
 800763e:	9b06      	ldrlt	r3, [sp, #24]
 8007640:	9606      	strlt	r6, [sp, #24]
 8007642:	1af2      	sublt	r2, r6, r3
 8007644:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007646:	bfb6      	itet	lt
 8007648:	189b      	addlt	r3, r3, r2
 800764a:	1b9e      	subge	r6, r3, r6
 800764c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800764e:	9b01      	ldr	r3, [sp, #4]
 8007650:	bfb8      	it	lt
 8007652:	2600      	movlt	r6, #0
 8007654:	2b00      	cmp	r3, #0
 8007656:	bfb5      	itete	lt
 8007658:	eba8 0503 	sublt.w	r5, r8, r3
 800765c:	9b01      	ldrge	r3, [sp, #4]
 800765e:	2300      	movlt	r3, #0
 8007660:	4645      	movge	r5, r8
 8007662:	e747      	b.n	80074f4 <_dtoa_r+0x75c>
 8007664:	9e06      	ldr	r6, [sp, #24]
 8007666:	9f08      	ldr	r7, [sp, #32]
 8007668:	4645      	mov	r5, r8
 800766a:	e74c      	b.n	8007506 <_dtoa_r+0x76e>
 800766c:	9a06      	ldr	r2, [sp, #24]
 800766e:	e775      	b.n	800755c <_dtoa_r+0x7c4>
 8007670:	9b05      	ldr	r3, [sp, #20]
 8007672:	2b01      	cmp	r3, #1
 8007674:	dc18      	bgt.n	80076a8 <_dtoa_r+0x910>
 8007676:	9b02      	ldr	r3, [sp, #8]
 8007678:	b9b3      	cbnz	r3, 80076a8 <_dtoa_r+0x910>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007680:	b9a3      	cbnz	r3, 80076ac <_dtoa_r+0x914>
 8007682:	9b03      	ldr	r3, [sp, #12]
 8007684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007688:	0d1b      	lsrs	r3, r3, #20
 800768a:	051b      	lsls	r3, r3, #20
 800768c:	b12b      	cbz	r3, 800769a <_dtoa_r+0x902>
 800768e:	9b04      	ldr	r3, [sp, #16]
 8007690:	3301      	adds	r3, #1
 8007692:	9304      	str	r3, [sp, #16]
 8007694:	f108 0801 	add.w	r8, r8, #1
 8007698:	2301      	movs	r3, #1
 800769a:	9306      	str	r3, [sp, #24]
 800769c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f47f af74 	bne.w	800758c <_dtoa_r+0x7f4>
 80076a4:	2001      	movs	r0, #1
 80076a6:	e779      	b.n	800759c <_dtoa_r+0x804>
 80076a8:	2300      	movs	r3, #0
 80076aa:	e7f6      	b.n	800769a <_dtoa_r+0x902>
 80076ac:	9b02      	ldr	r3, [sp, #8]
 80076ae:	e7f4      	b.n	800769a <_dtoa_r+0x902>
 80076b0:	d085      	beq.n	80075be <_dtoa_r+0x826>
 80076b2:	4618      	mov	r0, r3
 80076b4:	301c      	adds	r0, #28
 80076b6:	e77d      	b.n	80075b4 <_dtoa_r+0x81c>
 80076b8:	40240000 	.word	0x40240000
 80076bc:	9b01      	ldr	r3, [sp, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dc38      	bgt.n	8007734 <_dtoa_r+0x99c>
 80076c2:	9b05      	ldr	r3, [sp, #20]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	dd35      	ble.n	8007734 <_dtoa_r+0x99c>
 80076c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80076cc:	f1b9 0f00 	cmp.w	r9, #0
 80076d0:	d10d      	bne.n	80076ee <_dtoa_r+0x956>
 80076d2:	4631      	mov	r1, r6
 80076d4:	464b      	mov	r3, r9
 80076d6:	2205      	movs	r2, #5
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 f9c5 	bl	8007a68 <__multadd>
 80076de:	4601      	mov	r1, r0
 80076e0:	4606      	mov	r6, r0
 80076e2:	4658      	mov	r0, fp
 80076e4:	f000 fbdc 	bl	8007ea0 <__mcmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	f73f adbd 	bgt.w	8007268 <_dtoa_r+0x4d0>
 80076ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f0:	9d00      	ldr	r5, [sp, #0]
 80076f2:	ea6f 0a03 	mvn.w	sl, r3
 80076f6:	f04f 0800 	mov.w	r8, #0
 80076fa:	4631      	mov	r1, r6
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 f991 	bl	8007a24 <_Bfree>
 8007702:	2f00      	cmp	r7, #0
 8007704:	f43f aeb4 	beq.w	8007470 <_dtoa_r+0x6d8>
 8007708:	f1b8 0f00 	cmp.w	r8, #0
 800770c:	d005      	beq.n	800771a <_dtoa_r+0x982>
 800770e:	45b8      	cmp	r8, r7
 8007710:	d003      	beq.n	800771a <_dtoa_r+0x982>
 8007712:	4641      	mov	r1, r8
 8007714:	4620      	mov	r0, r4
 8007716:	f000 f985 	bl	8007a24 <_Bfree>
 800771a:	4639      	mov	r1, r7
 800771c:	4620      	mov	r0, r4
 800771e:	f000 f981 	bl	8007a24 <_Bfree>
 8007722:	e6a5      	b.n	8007470 <_dtoa_r+0x6d8>
 8007724:	2600      	movs	r6, #0
 8007726:	4637      	mov	r7, r6
 8007728:	e7e1      	b.n	80076ee <_dtoa_r+0x956>
 800772a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800772c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007730:	4637      	mov	r7, r6
 8007732:	e599      	b.n	8007268 <_dtoa_r+0x4d0>
 8007734:	9b08      	ldr	r3, [sp, #32]
 8007736:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 80fd 	beq.w	800793a <_dtoa_r+0xba2>
 8007740:	2d00      	cmp	r5, #0
 8007742:	dd05      	ble.n	8007750 <_dtoa_r+0x9b8>
 8007744:	4639      	mov	r1, r7
 8007746:	462a      	mov	r2, r5
 8007748:	4620      	mov	r0, r4
 800774a:	f000 fb3d 	bl	8007dc8 <__lshift>
 800774e:	4607      	mov	r7, r0
 8007750:	9b06      	ldr	r3, [sp, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d05c      	beq.n	8007810 <_dtoa_r+0xa78>
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	4620      	mov	r0, r4
 800775a:	f000 f923 	bl	80079a4 <_Balloc>
 800775e:	4605      	mov	r5, r0
 8007760:	b928      	cbnz	r0, 800776e <_dtoa_r+0x9d6>
 8007762:	4b80      	ldr	r3, [pc, #512]	; (8007964 <_dtoa_r+0xbcc>)
 8007764:	4602      	mov	r2, r0
 8007766:	f240 21ea 	movw	r1, #746	; 0x2ea
 800776a:	f7ff bb2e 	b.w	8006dca <_dtoa_r+0x32>
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	3202      	adds	r2, #2
 8007772:	0092      	lsls	r2, r2, #2
 8007774:	f107 010c 	add.w	r1, r7, #12
 8007778:	300c      	adds	r0, #12
 800777a:	f000 f905 	bl	8007988 <memcpy>
 800777e:	2201      	movs	r2, #1
 8007780:	4629      	mov	r1, r5
 8007782:	4620      	mov	r0, r4
 8007784:	f000 fb20 	bl	8007dc8 <__lshift>
 8007788:	9b00      	ldr	r3, [sp, #0]
 800778a:	3301      	adds	r3, #1
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	9b00      	ldr	r3, [sp, #0]
 8007790:	444b      	add	r3, r9
 8007792:	9307      	str	r3, [sp, #28]
 8007794:	9b02      	ldr	r3, [sp, #8]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	46b8      	mov	r8, r7
 800779c:	9306      	str	r3, [sp, #24]
 800779e:	4607      	mov	r7, r0
 80077a0:	9b01      	ldr	r3, [sp, #4]
 80077a2:	4631      	mov	r1, r6
 80077a4:	3b01      	subs	r3, #1
 80077a6:	4658      	mov	r0, fp
 80077a8:	9302      	str	r3, [sp, #8]
 80077aa:	f7ff fa69 	bl	8006c80 <quorem>
 80077ae:	4603      	mov	r3, r0
 80077b0:	3330      	adds	r3, #48	; 0x30
 80077b2:	9004      	str	r0, [sp, #16]
 80077b4:	4641      	mov	r1, r8
 80077b6:	4658      	mov	r0, fp
 80077b8:	9308      	str	r3, [sp, #32]
 80077ba:	f000 fb71 	bl	8007ea0 <__mcmp>
 80077be:	463a      	mov	r2, r7
 80077c0:	4681      	mov	r9, r0
 80077c2:	4631      	mov	r1, r6
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 fb87 	bl	8007ed8 <__mdiff>
 80077ca:	68c2      	ldr	r2, [r0, #12]
 80077cc:	9b08      	ldr	r3, [sp, #32]
 80077ce:	4605      	mov	r5, r0
 80077d0:	bb02      	cbnz	r2, 8007814 <_dtoa_r+0xa7c>
 80077d2:	4601      	mov	r1, r0
 80077d4:	4658      	mov	r0, fp
 80077d6:	f000 fb63 	bl	8007ea0 <__mcmp>
 80077da:	9b08      	ldr	r3, [sp, #32]
 80077dc:	4602      	mov	r2, r0
 80077de:	4629      	mov	r1, r5
 80077e0:	4620      	mov	r0, r4
 80077e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80077e6:	f000 f91d 	bl	8007a24 <_Bfree>
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ee:	9d01      	ldr	r5, [sp, #4]
 80077f0:	ea43 0102 	orr.w	r1, r3, r2
 80077f4:	9b06      	ldr	r3, [sp, #24]
 80077f6:	430b      	orrs	r3, r1
 80077f8:	9b08      	ldr	r3, [sp, #32]
 80077fa:	d10d      	bne.n	8007818 <_dtoa_r+0xa80>
 80077fc:	2b39      	cmp	r3, #57	; 0x39
 80077fe:	d029      	beq.n	8007854 <_dtoa_r+0xabc>
 8007800:	f1b9 0f00 	cmp.w	r9, #0
 8007804:	dd01      	ble.n	800780a <_dtoa_r+0xa72>
 8007806:	9b04      	ldr	r3, [sp, #16]
 8007808:	3331      	adds	r3, #49	; 0x31
 800780a:	9a02      	ldr	r2, [sp, #8]
 800780c:	7013      	strb	r3, [r2, #0]
 800780e:	e774      	b.n	80076fa <_dtoa_r+0x962>
 8007810:	4638      	mov	r0, r7
 8007812:	e7b9      	b.n	8007788 <_dtoa_r+0x9f0>
 8007814:	2201      	movs	r2, #1
 8007816:	e7e2      	b.n	80077de <_dtoa_r+0xa46>
 8007818:	f1b9 0f00 	cmp.w	r9, #0
 800781c:	db06      	blt.n	800782c <_dtoa_r+0xa94>
 800781e:	9905      	ldr	r1, [sp, #20]
 8007820:	ea41 0909 	orr.w	r9, r1, r9
 8007824:	9906      	ldr	r1, [sp, #24]
 8007826:	ea59 0101 	orrs.w	r1, r9, r1
 800782a:	d120      	bne.n	800786e <_dtoa_r+0xad6>
 800782c:	2a00      	cmp	r2, #0
 800782e:	ddec      	ble.n	800780a <_dtoa_r+0xa72>
 8007830:	4659      	mov	r1, fp
 8007832:	2201      	movs	r2, #1
 8007834:	4620      	mov	r0, r4
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	f000 fac6 	bl	8007dc8 <__lshift>
 800783c:	4631      	mov	r1, r6
 800783e:	4683      	mov	fp, r0
 8007840:	f000 fb2e 	bl	8007ea0 <__mcmp>
 8007844:	2800      	cmp	r0, #0
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	dc02      	bgt.n	8007850 <_dtoa_r+0xab8>
 800784a:	d1de      	bne.n	800780a <_dtoa_r+0xa72>
 800784c:	07da      	lsls	r2, r3, #31
 800784e:	d5dc      	bpl.n	800780a <_dtoa_r+0xa72>
 8007850:	2b39      	cmp	r3, #57	; 0x39
 8007852:	d1d8      	bne.n	8007806 <_dtoa_r+0xa6e>
 8007854:	9a02      	ldr	r2, [sp, #8]
 8007856:	2339      	movs	r3, #57	; 0x39
 8007858:	7013      	strb	r3, [r2, #0]
 800785a:	462b      	mov	r3, r5
 800785c:	461d      	mov	r5, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007864:	2a39      	cmp	r2, #57	; 0x39
 8007866:	d050      	beq.n	800790a <_dtoa_r+0xb72>
 8007868:	3201      	adds	r2, #1
 800786a:	701a      	strb	r2, [r3, #0]
 800786c:	e745      	b.n	80076fa <_dtoa_r+0x962>
 800786e:	2a00      	cmp	r2, #0
 8007870:	dd03      	ble.n	800787a <_dtoa_r+0xae2>
 8007872:	2b39      	cmp	r3, #57	; 0x39
 8007874:	d0ee      	beq.n	8007854 <_dtoa_r+0xabc>
 8007876:	3301      	adds	r3, #1
 8007878:	e7c7      	b.n	800780a <_dtoa_r+0xa72>
 800787a:	9a01      	ldr	r2, [sp, #4]
 800787c:	9907      	ldr	r1, [sp, #28]
 800787e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007882:	428a      	cmp	r2, r1
 8007884:	d02a      	beq.n	80078dc <_dtoa_r+0xb44>
 8007886:	4659      	mov	r1, fp
 8007888:	2300      	movs	r3, #0
 800788a:	220a      	movs	r2, #10
 800788c:	4620      	mov	r0, r4
 800788e:	f000 f8eb 	bl	8007a68 <__multadd>
 8007892:	45b8      	cmp	r8, r7
 8007894:	4683      	mov	fp, r0
 8007896:	f04f 0300 	mov.w	r3, #0
 800789a:	f04f 020a 	mov.w	r2, #10
 800789e:	4641      	mov	r1, r8
 80078a0:	4620      	mov	r0, r4
 80078a2:	d107      	bne.n	80078b4 <_dtoa_r+0xb1c>
 80078a4:	f000 f8e0 	bl	8007a68 <__multadd>
 80078a8:	4680      	mov	r8, r0
 80078aa:	4607      	mov	r7, r0
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	3301      	adds	r3, #1
 80078b0:	9301      	str	r3, [sp, #4]
 80078b2:	e775      	b.n	80077a0 <_dtoa_r+0xa08>
 80078b4:	f000 f8d8 	bl	8007a68 <__multadd>
 80078b8:	4639      	mov	r1, r7
 80078ba:	4680      	mov	r8, r0
 80078bc:	2300      	movs	r3, #0
 80078be:	220a      	movs	r2, #10
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 f8d1 	bl	8007a68 <__multadd>
 80078c6:	4607      	mov	r7, r0
 80078c8:	e7f0      	b.n	80078ac <_dtoa_r+0xb14>
 80078ca:	f1b9 0f00 	cmp.w	r9, #0
 80078ce:	9a00      	ldr	r2, [sp, #0]
 80078d0:	bfcc      	ite	gt
 80078d2:	464d      	movgt	r5, r9
 80078d4:	2501      	movle	r5, #1
 80078d6:	4415      	add	r5, r2
 80078d8:	f04f 0800 	mov.w	r8, #0
 80078dc:	4659      	mov	r1, fp
 80078de:	2201      	movs	r2, #1
 80078e0:	4620      	mov	r0, r4
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	f000 fa70 	bl	8007dc8 <__lshift>
 80078e8:	4631      	mov	r1, r6
 80078ea:	4683      	mov	fp, r0
 80078ec:	f000 fad8 	bl	8007ea0 <__mcmp>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	dcb2      	bgt.n	800785a <_dtoa_r+0xac2>
 80078f4:	d102      	bne.n	80078fc <_dtoa_r+0xb64>
 80078f6:	9b01      	ldr	r3, [sp, #4]
 80078f8:	07db      	lsls	r3, r3, #31
 80078fa:	d4ae      	bmi.n	800785a <_dtoa_r+0xac2>
 80078fc:	462b      	mov	r3, r5
 80078fe:	461d      	mov	r5, r3
 8007900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007904:	2a30      	cmp	r2, #48	; 0x30
 8007906:	d0fa      	beq.n	80078fe <_dtoa_r+0xb66>
 8007908:	e6f7      	b.n	80076fa <_dtoa_r+0x962>
 800790a:	9a00      	ldr	r2, [sp, #0]
 800790c:	429a      	cmp	r2, r3
 800790e:	d1a5      	bne.n	800785c <_dtoa_r+0xac4>
 8007910:	f10a 0a01 	add.w	sl, sl, #1
 8007914:	2331      	movs	r3, #49	; 0x31
 8007916:	e779      	b.n	800780c <_dtoa_r+0xa74>
 8007918:	4b13      	ldr	r3, [pc, #76]	; (8007968 <_dtoa_r+0xbd0>)
 800791a:	f7ff baaf 	b.w	8006e7c <_dtoa_r+0xe4>
 800791e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007920:	2b00      	cmp	r3, #0
 8007922:	f47f aa86 	bne.w	8006e32 <_dtoa_r+0x9a>
 8007926:	4b11      	ldr	r3, [pc, #68]	; (800796c <_dtoa_r+0xbd4>)
 8007928:	f7ff baa8 	b.w	8006e7c <_dtoa_r+0xe4>
 800792c:	f1b9 0f00 	cmp.w	r9, #0
 8007930:	dc03      	bgt.n	800793a <_dtoa_r+0xba2>
 8007932:	9b05      	ldr	r3, [sp, #20]
 8007934:	2b02      	cmp	r3, #2
 8007936:	f73f aec9 	bgt.w	80076cc <_dtoa_r+0x934>
 800793a:	9d00      	ldr	r5, [sp, #0]
 800793c:	4631      	mov	r1, r6
 800793e:	4658      	mov	r0, fp
 8007940:	f7ff f99e 	bl	8006c80 <quorem>
 8007944:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007948:	f805 3b01 	strb.w	r3, [r5], #1
 800794c:	9a00      	ldr	r2, [sp, #0]
 800794e:	1aaa      	subs	r2, r5, r2
 8007950:	4591      	cmp	r9, r2
 8007952:	ddba      	ble.n	80078ca <_dtoa_r+0xb32>
 8007954:	4659      	mov	r1, fp
 8007956:	2300      	movs	r3, #0
 8007958:	220a      	movs	r2, #10
 800795a:	4620      	mov	r0, r4
 800795c:	f000 f884 	bl	8007a68 <__multadd>
 8007960:	4683      	mov	fp, r0
 8007962:	e7eb      	b.n	800793c <_dtoa_r+0xba4>
 8007964:	0800926b 	.word	0x0800926b
 8007968:	080091c4 	.word	0x080091c4
 800796c:	080091e8 	.word	0x080091e8

08007970 <_localeconv_r>:
 8007970:	4800      	ldr	r0, [pc, #0]	; (8007974 <_localeconv_r+0x4>)
 8007972:	4770      	bx	lr
 8007974:	20000160 	.word	0x20000160

08007978 <malloc>:
 8007978:	4b02      	ldr	r3, [pc, #8]	; (8007984 <malloc+0xc>)
 800797a:	4601      	mov	r1, r0
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	f000 bbef 	b.w	8008160 <_malloc_r>
 8007982:	bf00      	nop
 8007984:	2000000c 	.word	0x2000000c

08007988 <memcpy>:
 8007988:	440a      	add	r2, r1
 800798a:	4291      	cmp	r1, r2
 800798c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007990:	d100      	bne.n	8007994 <memcpy+0xc>
 8007992:	4770      	bx	lr
 8007994:	b510      	push	{r4, lr}
 8007996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799e:	4291      	cmp	r1, r2
 80079a0:	d1f9      	bne.n	8007996 <memcpy+0xe>
 80079a2:	bd10      	pop	{r4, pc}

080079a4 <_Balloc>:
 80079a4:	b570      	push	{r4, r5, r6, lr}
 80079a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079a8:	4604      	mov	r4, r0
 80079aa:	460d      	mov	r5, r1
 80079ac:	b976      	cbnz	r6, 80079cc <_Balloc+0x28>
 80079ae:	2010      	movs	r0, #16
 80079b0:	f7ff ffe2 	bl	8007978 <malloc>
 80079b4:	4602      	mov	r2, r0
 80079b6:	6260      	str	r0, [r4, #36]	; 0x24
 80079b8:	b920      	cbnz	r0, 80079c4 <_Balloc+0x20>
 80079ba:	4b18      	ldr	r3, [pc, #96]	; (8007a1c <_Balloc+0x78>)
 80079bc:	4818      	ldr	r0, [pc, #96]	; (8007a20 <_Balloc+0x7c>)
 80079be:	2166      	movs	r1, #102	; 0x66
 80079c0:	f000 fd94 	bl	80084ec <__assert_func>
 80079c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079c8:	6006      	str	r6, [r0, #0]
 80079ca:	60c6      	str	r6, [r0, #12]
 80079cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079ce:	68f3      	ldr	r3, [r6, #12]
 80079d0:	b183      	cbz	r3, 80079f4 <_Balloc+0x50>
 80079d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079da:	b9b8      	cbnz	r0, 8007a0c <_Balloc+0x68>
 80079dc:	2101      	movs	r1, #1
 80079de:	fa01 f605 	lsl.w	r6, r1, r5
 80079e2:	1d72      	adds	r2, r6, #5
 80079e4:	0092      	lsls	r2, r2, #2
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 fb5a 	bl	80080a0 <_calloc_r>
 80079ec:	b160      	cbz	r0, 8007a08 <_Balloc+0x64>
 80079ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079f2:	e00e      	b.n	8007a12 <_Balloc+0x6e>
 80079f4:	2221      	movs	r2, #33	; 0x21
 80079f6:	2104      	movs	r1, #4
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 fb51 	bl	80080a0 <_calloc_r>
 80079fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a00:	60f0      	str	r0, [r6, #12]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e4      	bne.n	80079d2 <_Balloc+0x2e>
 8007a08:	2000      	movs	r0, #0
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	6802      	ldr	r2, [r0, #0]
 8007a0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a12:	2300      	movs	r3, #0
 8007a14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a18:	e7f7      	b.n	8007a0a <_Balloc+0x66>
 8007a1a:	bf00      	nop
 8007a1c:	080091f5 	.word	0x080091f5
 8007a20:	0800927c 	.word	0x0800927c

08007a24 <_Bfree>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a28:	4605      	mov	r5, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	b976      	cbnz	r6, 8007a4c <_Bfree+0x28>
 8007a2e:	2010      	movs	r0, #16
 8007a30:	f7ff ffa2 	bl	8007978 <malloc>
 8007a34:	4602      	mov	r2, r0
 8007a36:	6268      	str	r0, [r5, #36]	; 0x24
 8007a38:	b920      	cbnz	r0, 8007a44 <_Bfree+0x20>
 8007a3a:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <_Bfree+0x3c>)
 8007a3c:	4809      	ldr	r0, [pc, #36]	; (8007a64 <_Bfree+0x40>)
 8007a3e:	218a      	movs	r1, #138	; 0x8a
 8007a40:	f000 fd54 	bl	80084ec <__assert_func>
 8007a44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a48:	6006      	str	r6, [r0, #0]
 8007a4a:	60c6      	str	r6, [r0, #12]
 8007a4c:	b13c      	cbz	r4, 8007a5e <_Bfree+0x3a>
 8007a4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a50:	6862      	ldr	r2, [r4, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a58:	6021      	str	r1, [r4, #0]
 8007a5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	080091f5 	.word	0x080091f5
 8007a64:	0800927c 	.word	0x0800927c

08007a68 <__multadd>:
 8007a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6c:	690e      	ldr	r6, [r1, #16]
 8007a6e:	4607      	mov	r7, r0
 8007a70:	4698      	mov	r8, r3
 8007a72:	460c      	mov	r4, r1
 8007a74:	f101 0014 	add.w	r0, r1, #20
 8007a78:	2300      	movs	r3, #0
 8007a7a:	6805      	ldr	r5, [r0, #0]
 8007a7c:	b2a9      	uxth	r1, r5
 8007a7e:	fb02 8101 	mla	r1, r2, r1, r8
 8007a82:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007a86:	0c2d      	lsrs	r5, r5, #16
 8007a88:	fb02 c505 	mla	r5, r2, r5, ip
 8007a8c:	b289      	uxth	r1, r1
 8007a8e:	3301      	adds	r3, #1
 8007a90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007a94:	429e      	cmp	r6, r3
 8007a96:	f840 1b04 	str.w	r1, [r0], #4
 8007a9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007a9e:	dcec      	bgt.n	8007a7a <__multadd+0x12>
 8007aa0:	f1b8 0f00 	cmp.w	r8, #0
 8007aa4:	d022      	beq.n	8007aec <__multadd+0x84>
 8007aa6:	68a3      	ldr	r3, [r4, #8]
 8007aa8:	42b3      	cmp	r3, r6
 8007aaa:	dc19      	bgt.n	8007ae0 <__multadd+0x78>
 8007aac:	6861      	ldr	r1, [r4, #4]
 8007aae:	4638      	mov	r0, r7
 8007ab0:	3101      	adds	r1, #1
 8007ab2:	f7ff ff77 	bl	80079a4 <_Balloc>
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	b928      	cbnz	r0, 8007ac6 <__multadd+0x5e>
 8007aba:	4602      	mov	r2, r0
 8007abc:	4b0d      	ldr	r3, [pc, #52]	; (8007af4 <__multadd+0x8c>)
 8007abe:	480e      	ldr	r0, [pc, #56]	; (8007af8 <__multadd+0x90>)
 8007ac0:	21b5      	movs	r1, #181	; 0xb5
 8007ac2:	f000 fd13 	bl	80084ec <__assert_func>
 8007ac6:	6922      	ldr	r2, [r4, #16]
 8007ac8:	3202      	adds	r2, #2
 8007aca:	f104 010c 	add.w	r1, r4, #12
 8007ace:	0092      	lsls	r2, r2, #2
 8007ad0:	300c      	adds	r0, #12
 8007ad2:	f7ff ff59 	bl	8007988 <memcpy>
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f7ff ffa3 	bl	8007a24 <_Bfree>
 8007ade:	462c      	mov	r4, r5
 8007ae0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	f8c3 8014 	str.w	r8, [r3, #20]
 8007aea:	6126      	str	r6, [r4, #16]
 8007aec:	4620      	mov	r0, r4
 8007aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af2:	bf00      	nop
 8007af4:	0800926b 	.word	0x0800926b
 8007af8:	0800927c 	.word	0x0800927c

08007afc <__hi0bits>:
 8007afc:	0c03      	lsrs	r3, r0, #16
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	b9d3      	cbnz	r3, 8007b38 <__hi0bits+0x3c>
 8007b02:	0400      	lsls	r0, r0, #16
 8007b04:	2310      	movs	r3, #16
 8007b06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b0a:	bf04      	itt	eq
 8007b0c:	0200      	lsleq	r0, r0, #8
 8007b0e:	3308      	addeq	r3, #8
 8007b10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b14:	bf04      	itt	eq
 8007b16:	0100      	lsleq	r0, r0, #4
 8007b18:	3304      	addeq	r3, #4
 8007b1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b1e:	bf04      	itt	eq
 8007b20:	0080      	lsleq	r0, r0, #2
 8007b22:	3302      	addeq	r3, #2
 8007b24:	2800      	cmp	r0, #0
 8007b26:	db05      	blt.n	8007b34 <__hi0bits+0x38>
 8007b28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b2c:	f103 0301 	add.w	r3, r3, #1
 8007b30:	bf08      	it	eq
 8007b32:	2320      	moveq	r3, #32
 8007b34:	4618      	mov	r0, r3
 8007b36:	4770      	bx	lr
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e7e4      	b.n	8007b06 <__hi0bits+0xa>

08007b3c <__lo0bits>:
 8007b3c:	6803      	ldr	r3, [r0, #0]
 8007b3e:	f013 0207 	ands.w	r2, r3, #7
 8007b42:	4601      	mov	r1, r0
 8007b44:	d00b      	beq.n	8007b5e <__lo0bits+0x22>
 8007b46:	07da      	lsls	r2, r3, #31
 8007b48:	d424      	bmi.n	8007b94 <__lo0bits+0x58>
 8007b4a:	0798      	lsls	r0, r3, #30
 8007b4c:	bf49      	itett	mi
 8007b4e:	085b      	lsrmi	r3, r3, #1
 8007b50:	089b      	lsrpl	r3, r3, #2
 8007b52:	2001      	movmi	r0, #1
 8007b54:	600b      	strmi	r3, [r1, #0]
 8007b56:	bf5c      	itt	pl
 8007b58:	600b      	strpl	r3, [r1, #0]
 8007b5a:	2002      	movpl	r0, #2
 8007b5c:	4770      	bx	lr
 8007b5e:	b298      	uxth	r0, r3
 8007b60:	b9b0      	cbnz	r0, 8007b90 <__lo0bits+0x54>
 8007b62:	0c1b      	lsrs	r3, r3, #16
 8007b64:	2010      	movs	r0, #16
 8007b66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b6a:	bf04      	itt	eq
 8007b6c:	0a1b      	lsreq	r3, r3, #8
 8007b6e:	3008      	addeq	r0, #8
 8007b70:	071a      	lsls	r2, r3, #28
 8007b72:	bf04      	itt	eq
 8007b74:	091b      	lsreq	r3, r3, #4
 8007b76:	3004      	addeq	r0, #4
 8007b78:	079a      	lsls	r2, r3, #30
 8007b7a:	bf04      	itt	eq
 8007b7c:	089b      	lsreq	r3, r3, #2
 8007b7e:	3002      	addeq	r0, #2
 8007b80:	07da      	lsls	r2, r3, #31
 8007b82:	d403      	bmi.n	8007b8c <__lo0bits+0x50>
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	f100 0001 	add.w	r0, r0, #1
 8007b8a:	d005      	beq.n	8007b98 <__lo0bits+0x5c>
 8007b8c:	600b      	str	r3, [r1, #0]
 8007b8e:	4770      	bx	lr
 8007b90:	4610      	mov	r0, r2
 8007b92:	e7e8      	b.n	8007b66 <__lo0bits+0x2a>
 8007b94:	2000      	movs	r0, #0
 8007b96:	4770      	bx	lr
 8007b98:	2020      	movs	r0, #32
 8007b9a:	4770      	bx	lr

08007b9c <__i2b>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	f7ff feff 	bl	80079a4 <_Balloc>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	b928      	cbnz	r0, 8007bb6 <__i2b+0x1a>
 8007baa:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <__i2b+0x24>)
 8007bac:	4805      	ldr	r0, [pc, #20]	; (8007bc4 <__i2b+0x28>)
 8007bae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007bb2:	f000 fc9b 	bl	80084ec <__assert_func>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	6144      	str	r4, [r0, #20]
 8007bba:	6103      	str	r3, [r0, #16]
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	bf00      	nop
 8007bc0:	0800926b 	.word	0x0800926b
 8007bc4:	0800927c 	.word	0x0800927c

08007bc8 <__multiply>:
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	4614      	mov	r4, r2
 8007bce:	690a      	ldr	r2, [r1, #16]
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	bfb8      	it	lt
 8007bd6:	460b      	movlt	r3, r1
 8007bd8:	460d      	mov	r5, r1
 8007bda:	bfbc      	itt	lt
 8007bdc:	4625      	movlt	r5, r4
 8007bde:	461c      	movlt	r4, r3
 8007be0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007be4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007be8:	68ab      	ldr	r3, [r5, #8]
 8007bea:	6869      	ldr	r1, [r5, #4]
 8007bec:	eb0a 0709 	add.w	r7, sl, r9
 8007bf0:	42bb      	cmp	r3, r7
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	bfb8      	it	lt
 8007bf6:	3101      	addlt	r1, #1
 8007bf8:	f7ff fed4 	bl	80079a4 <_Balloc>
 8007bfc:	b930      	cbnz	r0, 8007c0c <__multiply+0x44>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	4b42      	ldr	r3, [pc, #264]	; (8007d0c <__multiply+0x144>)
 8007c02:	4843      	ldr	r0, [pc, #268]	; (8007d10 <__multiply+0x148>)
 8007c04:	f240 115d 	movw	r1, #349	; 0x15d
 8007c08:	f000 fc70 	bl	80084ec <__assert_func>
 8007c0c:	f100 0614 	add.w	r6, r0, #20
 8007c10:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007c14:	4633      	mov	r3, r6
 8007c16:	2200      	movs	r2, #0
 8007c18:	4543      	cmp	r3, r8
 8007c1a:	d31e      	bcc.n	8007c5a <__multiply+0x92>
 8007c1c:	f105 0c14 	add.w	ip, r5, #20
 8007c20:	f104 0314 	add.w	r3, r4, #20
 8007c24:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007c28:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007c2c:	9202      	str	r2, [sp, #8]
 8007c2e:	ebac 0205 	sub.w	r2, ip, r5
 8007c32:	3a15      	subs	r2, #21
 8007c34:	f022 0203 	bic.w	r2, r2, #3
 8007c38:	3204      	adds	r2, #4
 8007c3a:	f105 0115 	add.w	r1, r5, #21
 8007c3e:	458c      	cmp	ip, r1
 8007c40:	bf38      	it	cc
 8007c42:	2204      	movcc	r2, #4
 8007c44:	9201      	str	r2, [sp, #4]
 8007c46:	9a02      	ldr	r2, [sp, #8]
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d808      	bhi.n	8007c60 <__multiply+0x98>
 8007c4e:	2f00      	cmp	r7, #0
 8007c50:	dc55      	bgt.n	8007cfe <__multiply+0x136>
 8007c52:	6107      	str	r7, [r0, #16]
 8007c54:	b005      	add	sp, #20
 8007c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5a:	f843 2b04 	str.w	r2, [r3], #4
 8007c5e:	e7db      	b.n	8007c18 <__multiply+0x50>
 8007c60:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c64:	f1ba 0f00 	cmp.w	sl, #0
 8007c68:	d020      	beq.n	8007cac <__multiply+0xe4>
 8007c6a:	f105 0e14 	add.w	lr, r5, #20
 8007c6e:	46b1      	mov	r9, r6
 8007c70:	2200      	movs	r2, #0
 8007c72:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007c76:	f8d9 b000 	ldr.w	fp, [r9]
 8007c7a:	b2a1      	uxth	r1, r4
 8007c7c:	fa1f fb8b 	uxth.w	fp, fp
 8007c80:	fb0a b101 	mla	r1, sl, r1, fp
 8007c84:	4411      	add	r1, r2
 8007c86:	f8d9 2000 	ldr.w	r2, [r9]
 8007c8a:	0c24      	lsrs	r4, r4, #16
 8007c8c:	0c12      	lsrs	r2, r2, #16
 8007c8e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007c92:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007c96:	b289      	uxth	r1, r1
 8007c98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007c9c:	45f4      	cmp	ip, lr
 8007c9e:	f849 1b04 	str.w	r1, [r9], #4
 8007ca2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007ca6:	d8e4      	bhi.n	8007c72 <__multiply+0xaa>
 8007ca8:	9901      	ldr	r1, [sp, #4]
 8007caa:	5072      	str	r2, [r6, r1]
 8007cac:	9a03      	ldr	r2, [sp, #12]
 8007cae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	f1b9 0f00 	cmp.w	r9, #0
 8007cb8:	d01f      	beq.n	8007cfa <__multiply+0x132>
 8007cba:	6834      	ldr	r4, [r6, #0]
 8007cbc:	f105 0114 	add.w	r1, r5, #20
 8007cc0:	46b6      	mov	lr, r6
 8007cc2:	f04f 0a00 	mov.w	sl, #0
 8007cc6:	880a      	ldrh	r2, [r1, #0]
 8007cc8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ccc:	fb09 b202 	mla	r2, r9, r2, fp
 8007cd0:	4492      	add	sl, r2
 8007cd2:	b2a4      	uxth	r4, r4
 8007cd4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007cd8:	f84e 4b04 	str.w	r4, [lr], #4
 8007cdc:	f851 4b04 	ldr.w	r4, [r1], #4
 8007ce0:	f8be 2000 	ldrh.w	r2, [lr]
 8007ce4:	0c24      	lsrs	r4, r4, #16
 8007ce6:	fb09 2404 	mla	r4, r9, r4, r2
 8007cea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007cee:	458c      	cmp	ip, r1
 8007cf0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007cf4:	d8e7      	bhi.n	8007cc6 <__multiply+0xfe>
 8007cf6:	9a01      	ldr	r2, [sp, #4]
 8007cf8:	50b4      	str	r4, [r6, r2]
 8007cfa:	3604      	adds	r6, #4
 8007cfc:	e7a3      	b.n	8007c46 <__multiply+0x7e>
 8007cfe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1a5      	bne.n	8007c52 <__multiply+0x8a>
 8007d06:	3f01      	subs	r7, #1
 8007d08:	e7a1      	b.n	8007c4e <__multiply+0x86>
 8007d0a:	bf00      	nop
 8007d0c:	0800926b 	.word	0x0800926b
 8007d10:	0800927c 	.word	0x0800927c

08007d14 <__pow5mult>:
 8007d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d18:	4615      	mov	r5, r2
 8007d1a:	f012 0203 	ands.w	r2, r2, #3
 8007d1e:	4606      	mov	r6, r0
 8007d20:	460f      	mov	r7, r1
 8007d22:	d007      	beq.n	8007d34 <__pow5mult+0x20>
 8007d24:	4c25      	ldr	r4, [pc, #148]	; (8007dbc <__pow5mult+0xa8>)
 8007d26:	3a01      	subs	r2, #1
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d2e:	f7ff fe9b 	bl	8007a68 <__multadd>
 8007d32:	4607      	mov	r7, r0
 8007d34:	10ad      	asrs	r5, r5, #2
 8007d36:	d03d      	beq.n	8007db4 <__pow5mult+0xa0>
 8007d38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d3a:	b97c      	cbnz	r4, 8007d5c <__pow5mult+0x48>
 8007d3c:	2010      	movs	r0, #16
 8007d3e:	f7ff fe1b 	bl	8007978 <malloc>
 8007d42:	4602      	mov	r2, r0
 8007d44:	6270      	str	r0, [r6, #36]	; 0x24
 8007d46:	b928      	cbnz	r0, 8007d54 <__pow5mult+0x40>
 8007d48:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <__pow5mult+0xac>)
 8007d4a:	481e      	ldr	r0, [pc, #120]	; (8007dc4 <__pow5mult+0xb0>)
 8007d4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d50:	f000 fbcc 	bl	80084ec <__assert_func>
 8007d54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d58:	6004      	str	r4, [r0, #0]
 8007d5a:	60c4      	str	r4, [r0, #12]
 8007d5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d64:	b94c      	cbnz	r4, 8007d7a <__pow5mult+0x66>
 8007d66:	f240 2171 	movw	r1, #625	; 0x271
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff ff16 	bl	8007b9c <__i2b>
 8007d70:	2300      	movs	r3, #0
 8007d72:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d76:	4604      	mov	r4, r0
 8007d78:	6003      	str	r3, [r0, #0]
 8007d7a:	f04f 0900 	mov.w	r9, #0
 8007d7e:	07eb      	lsls	r3, r5, #31
 8007d80:	d50a      	bpl.n	8007d98 <__pow5mult+0x84>
 8007d82:	4639      	mov	r1, r7
 8007d84:	4622      	mov	r2, r4
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7ff ff1e 	bl	8007bc8 <__multiply>
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	4680      	mov	r8, r0
 8007d90:	4630      	mov	r0, r6
 8007d92:	f7ff fe47 	bl	8007a24 <_Bfree>
 8007d96:	4647      	mov	r7, r8
 8007d98:	106d      	asrs	r5, r5, #1
 8007d9a:	d00b      	beq.n	8007db4 <__pow5mult+0xa0>
 8007d9c:	6820      	ldr	r0, [r4, #0]
 8007d9e:	b938      	cbnz	r0, 8007db0 <__pow5mult+0x9c>
 8007da0:	4622      	mov	r2, r4
 8007da2:	4621      	mov	r1, r4
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff ff0f 	bl	8007bc8 <__multiply>
 8007daa:	6020      	str	r0, [r4, #0]
 8007dac:	f8c0 9000 	str.w	r9, [r0]
 8007db0:	4604      	mov	r4, r0
 8007db2:	e7e4      	b.n	8007d7e <__pow5mult+0x6a>
 8007db4:	4638      	mov	r0, r7
 8007db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dba:	bf00      	nop
 8007dbc:	080093d0 	.word	0x080093d0
 8007dc0:	080091f5 	.word	0x080091f5
 8007dc4:	0800927c 	.word	0x0800927c

08007dc8 <__lshift>:
 8007dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dcc:	460c      	mov	r4, r1
 8007dce:	6849      	ldr	r1, [r1, #4]
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dd6:	68a3      	ldr	r3, [r4, #8]
 8007dd8:	4607      	mov	r7, r0
 8007dda:	4691      	mov	r9, r2
 8007ddc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007de0:	f108 0601 	add.w	r6, r8, #1
 8007de4:	42b3      	cmp	r3, r6
 8007de6:	db0b      	blt.n	8007e00 <__lshift+0x38>
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7ff fddb 	bl	80079a4 <_Balloc>
 8007dee:	4605      	mov	r5, r0
 8007df0:	b948      	cbnz	r0, 8007e06 <__lshift+0x3e>
 8007df2:	4602      	mov	r2, r0
 8007df4:	4b28      	ldr	r3, [pc, #160]	; (8007e98 <__lshift+0xd0>)
 8007df6:	4829      	ldr	r0, [pc, #164]	; (8007e9c <__lshift+0xd4>)
 8007df8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007dfc:	f000 fb76 	bl	80084ec <__assert_func>
 8007e00:	3101      	adds	r1, #1
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	e7ee      	b.n	8007de4 <__lshift+0x1c>
 8007e06:	2300      	movs	r3, #0
 8007e08:	f100 0114 	add.w	r1, r0, #20
 8007e0c:	f100 0210 	add.w	r2, r0, #16
 8007e10:	4618      	mov	r0, r3
 8007e12:	4553      	cmp	r3, sl
 8007e14:	db33      	blt.n	8007e7e <__lshift+0xb6>
 8007e16:	6920      	ldr	r0, [r4, #16]
 8007e18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e1c:	f104 0314 	add.w	r3, r4, #20
 8007e20:	f019 091f 	ands.w	r9, r9, #31
 8007e24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e2c:	d02b      	beq.n	8007e86 <__lshift+0xbe>
 8007e2e:	f1c9 0e20 	rsb	lr, r9, #32
 8007e32:	468a      	mov	sl, r1
 8007e34:	2200      	movs	r2, #0
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	fa00 f009 	lsl.w	r0, r0, r9
 8007e3c:	4302      	orrs	r2, r0
 8007e3e:	f84a 2b04 	str.w	r2, [sl], #4
 8007e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e46:	459c      	cmp	ip, r3
 8007e48:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e4c:	d8f3      	bhi.n	8007e36 <__lshift+0x6e>
 8007e4e:	ebac 0304 	sub.w	r3, ip, r4
 8007e52:	3b15      	subs	r3, #21
 8007e54:	f023 0303 	bic.w	r3, r3, #3
 8007e58:	3304      	adds	r3, #4
 8007e5a:	f104 0015 	add.w	r0, r4, #21
 8007e5e:	4584      	cmp	ip, r0
 8007e60:	bf38      	it	cc
 8007e62:	2304      	movcc	r3, #4
 8007e64:	50ca      	str	r2, [r1, r3]
 8007e66:	b10a      	cbz	r2, 8007e6c <__lshift+0xa4>
 8007e68:	f108 0602 	add.w	r6, r8, #2
 8007e6c:	3e01      	subs	r6, #1
 8007e6e:	4638      	mov	r0, r7
 8007e70:	612e      	str	r6, [r5, #16]
 8007e72:	4621      	mov	r1, r4
 8007e74:	f7ff fdd6 	bl	8007a24 <_Bfree>
 8007e78:	4628      	mov	r0, r5
 8007e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e82:	3301      	adds	r3, #1
 8007e84:	e7c5      	b.n	8007e12 <__lshift+0x4a>
 8007e86:	3904      	subs	r1, #4
 8007e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e90:	459c      	cmp	ip, r3
 8007e92:	d8f9      	bhi.n	8007e88 <__lshift+0xc0>
 8007e94:	e7ea      	b.n	8007e6c <__lshift+0xa4>
 8007e96:	bf00      	nop
 8007e98:	0800926b 	.word	0x0800926b
 8007e9c:	0800927c 	.word	0x0800927c

08007ea0 <__mcmp>:
 8007ea0:	b530      	push	{r4, r5, lr}
 8007ea2:	6902      	ldr	r2, [r0, #16]
 8007ea4:	690c      	ldr	r4, [r1, #16]
 8007ea6:	1b12      	subs	r2, r2, r4
 8007ea8:	d10e      	bne.n	8007ec8 <__mcmp+0x28>
 8007eaa:	f100 0314 	add.w	r3, r0, #20
 8007eae:	3114      	adds	r1, #20
 8007eb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007eb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007eb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ebc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ec0:	42a5      	cmp	r5, r4
 8007ec2:	d003      	beq.n	8007ecc <__mcmp+0x2c>
 8007ec4:	d305      	bcc.n	8007ed2 <__mcmp+0x32>
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	4610      	mov	r0, r2
 8007eca:	bd30      	pop	{r4, r5, pc}
 8007ecc:	4283      	cmp	r3, r0
 8007ece:	d3f3      	bcc.n	8007eb8 <__mcmp+0x18>
 8007ed0:	e7fa      	b.n	8007ec8 <__mcmp+0x28>
 8007ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed6:	e7f7      	b.n	8007ec8 <__mcmp+0x28>

08007ed8 <__mdiff>:
 8007ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	460c      	mov	r4, r1
 8007ede:	4606      	mov	r6, r0
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	4617      	mov	r7, r2
 8007ee6:	f7ff ffdb 	bl	8007ea0 <__mcmp>
 8007eea:	1e05      	subs	r5, r0, #0
 8007eec:	d110      	bne.n	8007f10 <__mdiff+0x38>
 8007eee:	4629      	mov	r1, r5
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f7ff fd57 	bl	80079a4 <_Balloc>
 8007ef6:	b930      	cbnz	r0, 8007f06 <__mdiff+0x2e>
 8007ef8:	4b39      	ldr	r3, [pc, #228]	; (8007fe0 <__mdiff+0x108>)
 8007efa:	4602      	mov	r2, r0
 8007efc:	f240 2132 	movw	r1, #562	; 0x232
 8007f00:	4838      	ldr	r0, [pc, #224]	; (8007fe4 <__mdiff+0x10c>)
 8007f02:	f000 faf3 	bl	80084ec <__assert_func>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f10:	bfa4      	itt	ge
 8007f12:	463b      	movge	r3, r7
 8007f14:	4627      	movge	r7, r4
 8007f16:	4630      	mov	r0, r6
 8007f18:	6879      	ldr	r1, [r7, #4]
 8007f1a:	bfa6      	itte	ge
 8007f1c:	461c      	movge	r4, r3
 8007f1e:	2500      	movge	r5, #0
 8007f20:	2501      	movlt	r5, #1
 8007f22:	f7ff fd3f 	bl	80079a4 <_Balloc>
 8007f26:	b920      	cbnz	r0, 8007f32 <__mdiff+0x5a>
 8007f28:	4b2d      	ldr	r3, [pc, #180]	; (8007fe0 <__mdiff+0x108>)
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f30:	e7e6      	b.n	8007f00 <__mdiff+0x28>
 8007f32:	693e      	ldr	r6, [r7, #16]
 8007f34:	60c5      	str	r5, [r0, #12]
 8007f36:	6925      	ldr	r5, [r4, #16]
 8007f38:	f107 0114 	add.w	r1, r7, #20
 8007f3c:	f104 0914 	add.w	r9, r4, #20
 8007f40:	f100 0e14 	add.w	lr, r0, #20
 8007f44:	f107 0210 	add.w	r2, r7, #16
 8007f48:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007f4c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007f50:	46f2      	mov	sl, lr
 8007f52:	2700      	movs	r7, #0
 8007f54:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f5c:	fa1f f883 	uxth.w	r8, r3
 8007f60:	fa17 f78b 	uxtah	r7, r7, fp
 8007f64:	0c1b      	lsrs	r3, r3, #16
 8007f66:	eba7 0808 	sub.w	r8, r7, r8
 8007f6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f72:	fa1f f888 	uxth.w	r8, r8
 8007f76:	141f      	asrs	r7, r3, #16
 8007f78:	454d      	cmp	r5, r9
 8007f7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f7e:	f84a 3b04 	str.w	r3, [sl], #4
 8007f82:	d8e7      	bhi.n	8007f54 <__mdiff+0x7c>
 8007f84:	1b2b      	subs	r3, r5, r4
 8007f86:	3b15      	subs	r3, #21
 8007f88:	f023 0303 	bic.w	r3, r3, #3
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	3415      	adds	r4, #21
 8007f90:	42a5      	cmp	r5, r4
 8007f92:	bf38      	it	cc
 8007f94:	2304      	movcc	r3, #4
 8007f96:	4419      	add	r1, r3
 8007f98:	4473      	add	r3, lr
 8007f9a:	469e      	mov	lr, r3
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	4565      	cmp	r5, ip
 8007fa0:	d30e      	bcc.n	8007fc0 <__mdiff+0xe8>
 8007fa2:	f10c 0203 	add.w	r2, ip, #3
 8007fa6:	1a52      	subs	r2, r2, r1
 8007fa8:	f022 0203 	bic.w	r2, r2, #3
 8007fac:	3903      	subs	r1, #3
 8007fae:	458c      	cmp	ip, r1
 8007fb0:	bf38      	it	cc
 8007fb2:	2200      	movcc	r2, #0
 8007fb4:	441a      	add	r2, r3
 8007fb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007fba:	b17b      	cbz	r3, 8007fdc <__mdiff+0x104>
 8007fbc:	6106      	str	r6, [r0, #16]
 8007fbe:	e7a5      	b.n	8007f0c <__mdiff+0x34>
 8007fc0:	f855 8b04 	ldr.w	r8, [r5], #4
 8007fc4:	fa17 f488 	uxtah	r4, r7, r8
 8007fc8:	1422      	asrs	r2, r4, #16
 8007fca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007fce:	b2a4      	uxth	r4, r4
 8007fd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007fd4:	f84e 4b04 	str.w	r4, [lr], #4
 8007fd8:	1417      	asrs	r7, r2, #16
 8007fda:	e7e0      	b.n	8007f9e <__mdiff+0xc6>
 8007fdc:	3e01      	subs	r6, #1
 8007fde:	e7ea      	b.n	8007fb6 <__mdiff+0xde>
 8007fe0:	0800926b 	.word	0x0800926b
 8007fe4:	0800927c 	.word	0x0800927c

08007fe8 <__d2b>:
 8007fe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fec:	4689      	mov	r9, r1
 8007fee:	2101      	movs	r1, #1
 8007ff0:	ec57 6b10 	vmov	r6, r7, d0
 8007ff4:	4690      	mov	r8, r2
 8007ff6:	f7ff fcd5 	bl	80079a4 <_Balloc>
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	b930      	cbnz	r0, 800800c <__d2b+0x24>
 8007ffe:	4602      	mov	r2, r0
 8008000:	4b25      	ldr	r3, [pc, #148]	; (8008098 <__d2b+0xb0>)
 8008002:	4826      	ldr	r0, [pc, #152]	; (800809c <__d2b+0xb4>)
 8008004:	f240 310a 	movw	r1, #778	; 0x30a
 8008008:	f000 fa70 	bl	80084ec <__assert_func>
 800800c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008010:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008014:	bb35      	cbnz	r5, 8008064 <__d2b+0x7c>
 8008016:	2e00      	cmp	r6, #0
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	d028      	beq.n	800806e <__d2b+0x86>
 800801c:	4668      	mov	r0, sp
 800801e:	9600      	str	r6, [sp, #0]
 8008020:	f7ff fd8c 	bl	8007b3c <__lo0bits>
 8008024:	9900      	ldr	r1, [sp, #0]
 8008026:	b300      	cbz	r0, 800806a <__d2b+0x82>
 8008028:	9a01      	ldr	r2, [sp, #4]
 800802a:	f1c0 0320 	rsb	r3, r0, #32
 800802e:	fa02 f303 	lsl.w	r3, r2, r3
 8008032:	430b      	orrs	r3, r1
 8008034:	40c2      	lsrs	r2, r0
 8008036:	6163      	str	r3, [r4, #20]
 8008038:	9201      	str	r2, [sp, #4]
 800803a:	9b01      	ldr	r3, [sp, #4]
 800803c:	61a3      	str	r3, [r4, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	bf14      	ite	ne
 8008042:	2202      	movne	r2, #2
 8008044:	2201      	moveq	r2, #1
 8008046:	6122      	str	r2, [r4, #16]
 8008048:	b1d5      	cbz	r5, 8008080 <__d2b+0x98>
 800804a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800804e:	4405      	add	r5, r0
 8008050:	f8c9 5000 	str.w	r5, [r9]
 8008054:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008058:	f8c8 0000 	str.w	r0, [r8]
 800805c:	4620      	mov	r0, r4
 800805e:	b003      	add	sp, #12
 8008060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008068:	e7d5      	b.n	8008016 <__d2b+0x2e>
 800806a:	6161      	str	r1, [r4, #20]
 800806c:	e7e5      	b.n	800803a <__d2b+0x52>
 800806e:	a801      	add	r0, sp, #4
 8008070:	f7ff fd64 	bl	8007b3c <__lo0bits>
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	6163      	str	r3, [r4, #20]
 8008078:	2201      	movs	r2, #1
 800807a:	6122      	str	r2, [r4, #16]
 800807c:	3020      	adds	r0, #32
 800807e:	e7e3      	b.n	8008048 <__d2b+0x60>
 8008080:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008084:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008088:	f8c9 0000 	str.w	r0, [r9]
 800808c:	6918      	ldr	r0, [r3, #16]
 800808e:	f7ff fd35 	bl	8007afc <__hi0bits>
 8008092:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008096:	e7df      	b.n	8008058 <__d2b+0x70>
 8008098:	0800926b 	.word	0x0800926b
 800809c:	0800927c 	.word	0x0800927c

080080a0 <_calloc_r>:
 80080a0:	b513      	push	{r0, r1, r4, lr}
 80080a2:	434a      	muls	r2, r1
 80080a4:	4611      	mov	r1, r2
 80080a6:	9201      	str	r2, [sp, #4]
 80080a8:	f000 f85a 	bl	8008160 <_malloc_r>
 80080ac:	4604      	mov	r4, r0
 80080ae:	b118      	cbz	r0, 80080b8 <_calloc_r+0x18>
 80080b0:	9a01      	ldr	r2, [sp, #4]
 80080b2:	2100      	movs	r1, #0
 80080b4:	f7fe f952 	bl	800635c <memset>
 80080b8:	4620      	mov	r0, r4
 80080ba:	b002      	add	sp, #8
 80080bc:	bd10      	pop	{r4, pc}
	...

080080c0 <_free_r>:
 80080c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080c2:	2900      	cmp	r1, #0
 80080c4:	d048      	beq.n	8008158 <_free_r+0x98>
 80080c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ca:	9001      	str	r0, [sp, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f1a1 0404 	sub.w	r4, r1, #4
 80080d2:	bfb8      	it	lt
 80080d4:	18e4      	addlt	r4, r4, r3
 80080d6:	f000 fa65 	bl	80085a4 <__malloc_lock>
 80080da:	4a20      	ldr	r2, [pc, #128]	; (800815c <_free_r+0x9c>)
 80080dc:	9801      	ldr	r0, [sp, #4]
 80080de:	6813      	ldr	r3, [r2, #0]
 80080e0:	4615      	mov	r5, r2
 80080e2:	b933      	cbnz	r3, 80080f2 <_free_r+0x32>
 80080e4:	6063      	str	r3, [r4, #4]
 80080e6:	6014      	str	r4, [r2, #0]
 80080e8:	b003      	add	sp, #12
 80080ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080ee:	f000 ba5f 	b.w	80085b0 <__malloc_unlock>
 80080f2:	42a3      	cmp	r3, r4
 80080f4:	d90b      	bls.n	800810e <_free_r+0x4e>
 80080f6:	6821      	ldr	r1, [r4, #0]
 80080f8:	1862      	adds	r2, r4, r1
 80080fa:	4293      	cmp	r3, r2
 80080fc:	bf04      	itt	eq
 80080fe:	681a      	ldreq	r2, [r3, #0]
 8008100:	685b      	ldreq	r3, [r3, #4]
 8008102:	6063      	str	r3, [r4, #4]
 8008104:	bf04      	itt	eq
 8008106:	1852      	addeq	r2, r2, r1
 8008108:	6022      	streq	r2, [r4, #0]
 800810a:	602c      	str	r4, [r5, #0]
 800810c:	e7ec      	b.n	80080e8 <_free_r+0x28>
 800810e:	461a      	mov	r2, r3
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	b10b      	cbz	r3, 8008118 <_free_r+0x58>
 8008114:	42a3      	cmp	r3, r4
 8008116:	d9fa      	bls.n	800810e <_free_r+0x4e>
 8008118:	6811      	ldr	r1, [r2, #0]
 800811a:	1855      	adds	r5, r2, r1
 800811c:	42a5      	cmp	r5, r4
 800811e:	d10b      	bne.n	8008138 <_free_r+0x78>
 8008120:	6824      	ldr	r4, [r4, #0]
 8008122:	4421      	add	r1, r4
 8008124:	1854      	adds	r4, r2, r1
 8008126:	42a3      	cmp	r3, r4
 8008128:	6011      	str	r1, [r2, #0]
 800812a:	d1dd      	bne.n	80080e8 <_free_r+0x28>
 800812c:	681c      	ldr	r4, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	6053      	str	r3, [r2, #4]
 8008132:	4421      	add	r1, r4
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	e7d7      	b.n	80080e8 <_free_r+0x28>
 8008138:	d902      	bls.n	8008140 <_free_r+0x80>
 800813a:	230c      	movs	r3, #12
 800813c:	6003      	str	r3, [r0, #0]
 800813e:	e7d3      	b.n	80080e8 <_free_r+0x28>
 8008140:	6825      	ldr	r5, [r4, #0]
 8008142:	1961      	adds	r1, r4, r5
 8008144:	428b      	cmp	r3, r1
 8008146:	bf04      	itt	eq
 8008148:	6819      	ldreq	r1, [r3, #0]
 800814a:	685b      	ldreq	r3, [r3, #4]
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	bf04      	itt	eq
 8008150:	1949      	addeq	r1, r1, r5
 8008152:	6021      	streq	r1, [r4, #0]
 8008154:	6054      	str	r4, [r2, #4]
 8008156:	e7c7      	b.n	80080e8 <_free_r+0x28>
 8008158:	b003      	add	sp, #12
 800815a:	bd30      	pop	{r4, r5, pc}
 800815c:	2000024c 	.word	0x2000024c

08008160 <_malloc_r>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	1ccd      	adds	r5, r1, #3
 8008164:	f025 0503 	bic.w	r5, r5, #3
 8008168:	3508      	adds	r5, #8
 800816a:	2d0c      	cmp	r5, #12
 800816c:	bf38      	it	cc
 800816e:	250c      	movcc	r5, #12
 8008170:	2d00      	cmp	r5, #0
 8008172:	4606      	mov	r6, r0
 8008174:	db01      	blt.n	800817a <_malloc_r+0x1a>
 8008176:	42a9      	cmp	r1, r5
 8008178:	d903      	bls.n	8008182 <_malloc_r+0x22>
 800817a:	230c      	movs	r3, #12
 800817c:	6033      	str	r3, [r6, #0]
 800817e:	2000      	movs	r0, #0
 8008180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008182:	f000 fa0f 	bl	80085a4 <__malloc_lock>
 8008186:	4921      	ldr	r1, [pc, #132]	; (800820c <_malloc_r+0xac>)
 8008188:	680a      	ldr	r2, [r1, #0]
 800818a:	4614      	mov	r4, r2
 800818c:	b99c      	cbnz	r4, 80081b6 <_malloc_r+0x56>
 800818e:	4f20      	ldr	r7, [pc, #128]	; (8008210 <_malloc_r+0xb0>)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	b923      	cbnz	r3, 800819e <_malloc_r+0x3e>
 8008194:	4621      	mov	r1, r4
 8008196:	4630      	mov	r0, r6
 8008198:	f000 f998 	bl	80084cc <_sbrk_r>
 800819c:	6038      	str	r0, [r7, #0]
 800819e:	4629      	mov	r1, r5
 80081a0:	4630      	mov	r0, r6
 80081a2:	f000 f993 	bl	80084cc <_sbrk_r>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	d123      	bne.n	80081f2 <_malloc_r+0x92>
 80081aa:	230c      	movs	r3, #12
 80081ac:	6033      	str	r3, [r6, #0]
 80081ae:	4630      	mov	r0, r6
 80081b0:	f000 f9fe 	bl	80085b0 <__malloc_unlock>
 80081b4:	e7e3      	b.n	800817e <_malloc_r+0x1e>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	1b5b      	subs	r3, r3, r5
 80081ba:	d417      	bmi.n	80081ec <_malloc_r+0x8c>
 80081bc:	2b0b      	cmp	r3, #11
 80081be:	d903      	bls.n	80081c8 <_malloc_r+0x68>
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	441c      	add	r4, r3
 80081c4:	6025      	str	r5, [r4, #0]
 80081c6:	e004      	b.n	80081d2 <_malloc_r+0x72>
 80081c8:	6863      	ldr	r3, [r4, #4]
 80081ca:	42a2      	cmp	r2, r4
 80081cc:	bf0c      	ite	eq
 80081ce:	600b      	streq	r3, [r1, #0]
 80081d0:	6053      	strne	r3, [r2, #4]
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 f9ec 	bl	80085b0 <__malloc_unlock>
 80081d8:	f104 000b 	add.w	r0, r4, #11
 80081dc:	1d23      	adds	r3, r4, #4
 80081de:	f020 0007 	bic.w	r0, r0, #7
 80081e2:	1ac2      	subs	r2, r0, r3
 80081e4:	d0cc      	beq.n	8008180 <_malloc_r+0x20>
 80081e6:	1a1b      	subs	r3, r3, r0
 80081e8:	50a3      	str	r3, [r4, r2]
 80081ea:	e7c9      	b.n	8008180 <_malloc_r+0x20>
 80081ec:	4622      	mov	r2, r4
 80081ee:	6864      	ldr	r4, [r4, #4]
 80081f0:	e7cc      	b.n	800818c <_malloc_r+0x2c>
 80081f2:	1cc4      	adds	r4, r0, #3
 80081f4:	f024 0403 	bic.w	r4, r4, #3
 80081f8:	42a0      	cmp	r0, r4
 80081fa:	d0e3      	beq.n	80081c4 <_malloc_r+0x64>
 80081fc:	1a21      	subs	r1, r4, r0
 80081fe:	4630      	mov	r0, r6
 8008200:	f000 f964 	bl	80084cc <_sbrk_r>
 8008204:	3001      	adds	r0, #1
 8008206:	d1dd      	bne.n	80081c4 <_malloc_r+0x64>
 8008208:	e7cf      	b.n	80081aa <_malloc_r+0x4a>
 800820a:	bf00      	nop
 800820c:	2000024c 	.word	0x2000024c
 8008210:	20000250 	.word	0x20000250

08008214 <__ssputs_r>:
 8008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	688e      	ldr	r6, [r1, #8]
 800821a:	429e      	cmp	r6, r3
 800821c:	4682      	mov	sl, r0
 800821e:	460c      	mov	r4, r1
 8008220:	4690      	mov	r8, r2
 8008222:	461f      	mov	r7, r3
 8008224:	d838      	bhi.n	8008298 <__ssputs_r+0x84>
 8008226:	898a      	ldrh	r2, [r1, #12]
 8008228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800822c:	d032      	beq.n	8008294 <__ssputs_r+0x80>
 800822e:	6825      	ldr	r5, [r4, #0]
 8008230:	6909      	ldr	r1, [r1, #16]
 8008232:	eba5 0901 	sub.w	r9, r5, r1
 8008236:	6965      	ldr	r5, [r4, #20]
 8008238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800823c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008240:	3301      	adds	r3, #1
 8008242:	444b      	add	r3, r9
 8008244:	106d      	asrs	r5, r5, #1
 8008246:	429d      	cmp	r5, r3
 8008248:	bf38      	it	cc
 800824a:	461d      	movcc	r5, r3
 800824c:	0553      	lsls	r3, r2, #21
 800824e:	d531      	bpl.n	80082b4 <__ssputs_r+0xa0>
 8008250:	4629      	mov	r1, r5
 8008252:	f7ff ff85 	bl	8008160 <_malloc_r>
 8008256:	4606      	mov	r6, r0
 8008258:	b950      	cbnz	r0, 8008270 <__ssputs_r+0x5c>
 800825a:	230c      	movs	r3, #12
 800825c:	f8ca 3000 	str.w	r3, [sl]
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008266:	81a3      	strh	r3, [r4, #12]
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008270:	6921      	ldr	r1, [r4, #16]
 8008272:	464a      	mov	r2, r9
 8008274:	f7ff fb88 	bl	8007988 <memcpy>
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800827e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008282:	81a3      	strh	r3, [r4, #12]
 8008284:	6126      	str	r6, [r4, #16]
 8008286:	6165      	str	r5, [r4, #20]
 8008288:	444e      	add	r6, r9
 800828a:	eba5 0509 	sub.w	r5, r5, r9
 800828e:	6026      	str	r6, [r4, #0]
 8008290:	60a5      	str	r5, [r4, #8]
 8008292:	463e      	mov	r6, r7
 8008294:	42be      	cmp	r6, r7
 8008296:	d900      	bls.n	800829a <__ssputs_r+0x86>
 8008298:	463e      	mov	r6, r7
 800829a:	4632      	mov	r2, r6
 800829c:	6820      	ldr	r0, [r4, #0]
 800829e:	4641      	mov	r1, r8
 80082a0:	f000 f966 	bl	8008570 <memmove>
 80082a4:	68a3      	ldr	r3, [r4, #8]
 80082a6:	6822      	ldr	r2, [r4, #0]
 80082a8:	1b9b      	subs	r3, r3, r6
 80082aa:	4432      	add	r2, r6
 80082ac:	60a3      	str	r3, [r4, #8]
 80082ae:	6022      	str	r2, [r4, #0]
 80082b0:	2000      	movs	r0, #0
 80082b2:	e7db      	b.n	800826c <__ssputs_r+0x58>
 80082b4:	462a      	mov	r2, r5
 80082b6:	f000 f981 	bl	80085bc <_realloc_r>
 80082ba:	4606      	mov	r6, r0
 80082bc:	2800      	cmp	r0, #0
 80082be:	d1e1      	bne.n	8008284 <__ssputs_r+0x70>
 80082c0:	6921      	ldr	r1, [r4, #16]
 80082c2:	4650      	mov	r0, sl
 80082c4:	f7ff fefc 	bl	80080c0 <_free_r>
 80082c8:	e7c7      	b.n	800825a <__ssputs_r+0x46>
	...

080082cc <_svfiprintf_r>:
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	4698      	mov	r8, r3
 80082d2:	898b      	ldrh	r3, [r1, #12]
 80082d4:	061b      	lsls	r3, r3, #24
 80082d6:	b09d      	sub	sp, #116	; 0x74
 80082d8:	4607      	mov	r7, r0
 80082da:	460d      	mov	r5, r1
 80082dc:	4614      	mov	r4, r2
 80082de:	d50e      	bpl.n	80082fe <_svfiprintf_r+0x32>
 80082e0:	690b      	ldr	r3, [r1, #16]
 80082e2:	b963      	cbnz	r3, 80082fe <_svfiprintf_r+0x32>
 80082e4:	2140      	movs	r1, #64	; 0x40
 80082e6:	f7ff ff3b 	bl	8008160 <_malloc_r>
 80082ea:	6028      	str	r0, [r5, #0]
 80082ec:	6128      	str	r0, [r5, #16]
 80082ee:	b920      	cbnz	r0, 80082fa <_svfiprintf_r+0x2e>
 80082f0:	230c      	movs	r3, #12
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	e0d1      	b.n	800849e <_svfiprintf_r+0x1d2>
 80082fa:	2340      	movs	r3, #64	; 0x40
 80082fc:	616b      	str	r3, [r5, #20]
 80082fe:	2300      	movs	r3, #0
 8008300:	9309      	str	r3, [sp, #36]	; 0x24
 8008302:	2320      	movs	r3, #32
 8008304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008308:	f8cd 800c 	str.w	r8, [sp, #12]
 800830c:	2330      	movs	r3, #48	; 0x30
 800830e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80084b8 <_svfiprintf_r+0x1ec>
 8008312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008316:	f04f 0901 	mov.w	r9, #1
 800831a:	4623      	mov	r3, r4
 800831c:	469a      	mov	sl, r3
 800831e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008322:	b10a      	cbz	r2, 8008328 <_svfiprintf_r+0x5c>
 8008324:	2a25      	cmp	r2, #37	; 0x25
 8008326:	d1f9      	bne.n	800831c <_svfiprintf_r+0x50>
 8008328:	ebba 0b04 	subs.w	fp, sl, r4
 800832c:	d00b      	beq.n	8008346 <_svfiprintf_r+0x7a>
 800832e:	465b      	mov	r3, fp
 8008330:	4622      	mov	r2, r4
 8008332:	4629      	mov	r1, r5
 8008334:	4638      	mov	r0, r7
 8008336:	f7ff ff6d 	bl	8008214 <__ssputs_r>
 800833a:	3001      	adds	r0, #1
 800833c:	f000 80aa 	beq.w	8008494 <_svfiprintf_r+0x1c8>
 8008340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008342:	445a      	add	r2, fp
 8008344:	9209      	str	r2, [sp, #36]	; 0x24
 8008346:	f89a 3000 	ldrb.w	r3, [sl]
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80a2 	beq.w	8008494 <_svfiprintf_r+0x1c8>
 8008350:	2300      	movs	r3, #0
 8008352:	f04f 32ff 	mov.w	r2, #4294967295
 8008356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800835a:	f10a 0a01 	add.w	sl, sl, #1
 800835e:	9304      	str	r3, [sp, #16]
 8008360:	9307      	str	r3, [sp, #28]
 8008362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008366:	931a      	str	r3, [sp, #104]	; 0x68
 8008368:	4654      	mov	r4, sl
 800836a:	2205      	movs	r2, #5
 800836c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008370:	4851      	ldr	r0, [pc, #324]	; (80084b8 <_svfiprintf_r+0x1ec>)
 8008372:	f7f7 ff35 	bl	80001e0 <memchr>
 8008376:	9a04      	ldr	r2, [sp, #16]
 8008378:	b9d8      	cbnz	r0, 80083b2 <_svfiprintf_r+0xe6>
 800837a:	06d0      	lsls	r0, r2, #27
 800837c:	bf44      	itt	mi
 800837e:	2320      	movmi	r3, #32
 8008380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008384:	0711      	lsls	r1, r2, #28
 8008386:	bf44      	itt	mi
 8008388:	232b      	movmi	r3, #43	; 0x2b
 800838a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800838e:	f89a 3000 	ldrb.w	r3, [sl]
 8008392:	2b2a      	cmp	r3, #42	; 0x2a
 8008394:	d015      	beq.n	80083c2 <_svfiprintf_r+0xf6>
 8008396:	9a07      	ldr	r2, [sp, #28]
 8008398:	4654      	mov	r4, sl
 800839a:	2000      	movs	r0, #0
 800839c:	f04f 0c0a 	mov.w	ip, #10
 80083a0:	4621      	mov	r1, r4
 80083a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a6:	3b30      	subs	r3, #48	; 0x30
 80083a8:	2b09      	cmp	r3, #9
 80083aa:	d94e      	bls.n	800844a <_svfiprintf_r+0x17e>
 80083ac:	b1b0      	cbz	r0, 80083dc <_svfiprintf_r+0x110>
 80083ae:	9207      	str	r2, [sp, #28]
 80083b0:	e014      	b.n	80083dc <_svfiprintf_r+0x110>
 80083b2:	eba0 0308 	sub.w	r3, r0, r8
 80083b6:	fa09 f303 	lsl.w	r3, r9, r3
 80083ba:	4313      	orrs	r3, r2
 80083bc:	9304      	str	r3, [sp, #16]
 80083be:	46a2      	mov	sl, r4
 80083c0:	e7d2      	b.n	8008368 <_svfiprintf_r+0x9c>
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	1d19      	adds	r1, r3, #4
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	9103      	str	r1, [sp, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bfbb      	ittet	lt
 80083ce:	425b      	neglt	r3, r3
 80083d0:	f042 0202 	orrlt.w	r2, r2, #2
 80083d4:	9307      	strge	r3, [sp, #28]
 80083d6:	9307      	strlt	r3, [sp, #28]
 80083d8:	bfb8      	it	lt
 80083da:	9204      	strlt	r2, [sp, #16]
 80083dc:	7823      	ldrb	r3, [r4, #0]
 80083de:	2b2e      	cmp	r3, #46	; 0x2e
 80083e0:	d10c      	bne.n	80083fc <_svfiprintf_r+0x130>
 80083e2:	7863      	ldrb	r3, [r4, #1]
 80083e4:	2b2a      	cmp	r3, #42	; 0x2a
 80083e6:	d135      	bne.n	8008454 <_svfiprintf_r+0x188>
 80083e8:	9b03      	ldr	r3, [sp, #12]
 80083ea:	1d1a      	adds	r2, r3, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	9203      	str	r2, [sp, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	bfb8      	it	lt
 80083f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80083f8:	3402      	adds	r4, #2
 80083fa:	9305      	str	r3, [sp, #20]
 80083fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084c8 <_svfiprintf_r+0x1fc>
 8008400:	7821      	ldrb	r1, [r4, #0]
 8008402:	2203      	movs	r2, #3
 8008404:	4650      	mov	r0, sl
 8008406:	f7f7 feeb 	bl	80001e0 <memchr>
 800840a:	b140      	cbz	r0, 800841e <_svfiprintf_r+0x152>
 800840c:	2340      	movs	r3, #64	; 0x40
 800840e:	eba0 000a 	sub.w	r0, r0, sl
 8008412:	fa03 f000 	lsl.w	r0, r3, r0
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	4303      	orrs	r3, r0
 800841a:	3401      	adds	r4, #1
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008422:	4826      	ldr	r0, [pc, #152]	; (80084bc <_svfiprintf_r+0x1f0>)
 8008424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008428:	2206      	movs	r2, #6
 800842a:	f7f7 fed9 	bl	80001e0 <memchr>
 800842e:	2800      	cmp	r0, #0
 8008430:	d038      	beq.n	80084a4 <_svfiprintf_r+0x1d8>
 8008432:	4b23      	ldr	r3, [pc, #140]	; (80084c0 <_svfiprintf_r+0x1f4>)
 8008434:	bb1b      	cbnz	r3, 800847e <_svfiprintf_r+0x1b2>
 8008436:	9b03      	ldr	r3, [sp, #12]
 8008438:	3307      	adds	r3, #7
 800843a:	f023 0307 	bic.w	r3, r3, #7
 800843e:	3308      	adds	r3, #8
 8008440:	9303      	str	r3, [sp, #12]
 8008442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008444:	4433      	add	r3, r6
 8008446:	9309      	str	r3, [sp, #36]	; 0x24
 8008448:	e767      	b.n	800831a <_svfiprintf_r+0x4e>
 800844a:	fb0c 3202 	mla	r2, ip, r2, r3
 800844e:	460c      	mov	r4, r1
 8008450:	2001      	movs	r0, #1
 8008452:	e7a5      	b.n	80083a0 <_svfiprintf_r+0xd4>
 8008454:	2300      	movs	r3, #0
 8008456:	3401      	adds	r4, #1
 8008458:	9305      	str	r3, [sp, #20]
 800845a:	4619      	mov	r1, r3
 800845c:	f04f 0c0a 	mov.w	ip, #10
 8008460:	4620      	mov	r0, r4
 8008462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008466:	3a30      	subs	r2, #48	; 0x30
 8008468:	2a09      	cmp	r2, #9
 800846a:	d903      	bls.n	8008474 <_svfiprintf_r+0x1a8>
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0c5      	beq.n	80083fc <_svfiprintf_r+0x130>
 8008470:	9105      	str	r1, [sp, #20]
 8008472:	e7c3      	b.n	80083fc <_svfiprintf_r+0x130>
 8008474:	fb0c 2101 	mla	r1, ip, r1, r2
 8008478:	4604      	mov	r4, r0
 800847a:	2301      	movs	r3, #1
 800847c:	e7f0      	b.n	8008460 <_svfiprintf_r+0x194>
 800847e:	ab03      	add	r3, sp, #12
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	462a      	mov	r2, r5
 8008484:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <_svfiprintf_r+0x1f8>)
 8008486:	a904      	add	r1, sp, #16
 8008488:	4638      	mov	r0, r7
 800848a:	f7fe f80f 	bl	80064ac <_printf_float>
 800848e:	1c42      	adds	r2, r0, #1
 8008490:	4606      	mov	r6, r0
 8008492:	d1d6      	bne.n	8008442 <_svfiprintf_r+0x176>
 8008494:	89ab      	ldrh	r3, [r5, #12]
 8008496:	065b      	lsls	r3, r3, #25
 8008498:	f53f af2c 	bmi.w	80082f4 <_svfiprintf_r+0x28>
 800849c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800849e:	b01d      	add	sp, #116	; 0x74
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	ab03      	add	r3, sp, #12
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	462a      	mov	r2, r5
 80084aa:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <_svfiprintf_r+0x1f8>)
 80084ac:	a904      	add	r1, sp, #16
 80084ae:	4638      	mov	r0, r7
 80084b0:	f7fe faa0 	bl	80069f4 <_printf_i>
 80084b4:	e7eb      	b.n	800848e <_svfiprintf_r+0x1c2>
 80084b6:	bf00      	nop
 80084b8:	080093dc 	.word	0x080093dc
 80084bc:	080093e6 	.word	0x080093e6
 80084c0:	080064ad 	.word	0x080064ad
 80084c4:	08008215 	.word	0x08008215
 80084c8:	080093e2 	.word	0x080093e2

080084cc <_sbrk_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d06      	ldr	r5, [pc, #24]	; (80084e8 <_sbrk_r+0x1c>)
 80084d0:	2300      	movs	r3, #0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	602b      	str	r3, [r5, #0]
 80084d8:	f7f9 fec2 	bl	8002260 <_sbrk>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d102      	bne.n	80084e6 <_sbrk_r+0x1a>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	b103      	cbz	r3, 80084e6 <_sbrk_r+0x1a>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	200003c8 	.word	0x200003c8

080084ec <__assert_func>:
 80084ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ee:	4614      	mov	r4, r2
 80084f0:	461a      	mov	r2, r3
 80084f2:	4b09      	ldr	r3, [pc, #36]	; (8008518 <__assert_func+0x2c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4605      	mov	r5, r0
 80084f8:	68d8      	ldr	r0, [r3, #12]
 80084fa:	b14c      	cbz	r4, 8008510 <__assert_func+0x24>
 80084fc:	4b07      	ldr	r3, [pc, #28]	; (800851c <__assert_func+0x30>)
 80084fe:	9100      	str	r1, [sp, #0]
 8008500:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008504:	4906      	ldr	r1, [pc, #24]	; (8008520 <__assert_func+0x34>)
 8008506:	462b      	mov	r3, r5
 8008508:	f000 f80e 	bl	8008528 <fiprintf>
 800850c:	f000 faa4 	bl	8008a58 <abort>
 8008510:	4b04      	ldr	r3, [pc, #16]	; (8008524 <__assert_func+0x38>)
 8008512:	461c      	mov	r4, r3
 8008514:	e7f3      	b.n	80084fe <__assert_func+0x12>
 8008516:	bf00      	nop
 8008518:	2000000c 	.word	0x2000000c
 800851c:	080093ed 	.word	0x080093ed
 8008520:	080093fa 	.word	0x080093fa
 8008524:	08009428 	.word	0x08009428

08008528 <fiprintf>:
 8008528:	b40e      	push	{r1, r2, r3}
 800852a:	b503      	push	{r0, r1, lr}
 800852c:	4601      	mov	r1, r0
 800852e:	ab03      	add	r3, sp, #12
 8008530:	4805      	ldr	r0, [pc, #20]	; (8008548 <fiprintf+0x20>)
 8008532:	f853 2b04 	ldr.w	r2, [r3], #4
 8008536:	6800      	ldr	r0, [r0, #0]
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	f000 f88f 	bl	800865c <_vfiprintf_r>
 800853e:	b002      	add	sp, #8
 8008540:	f85d eb04 	ldr.w	lr, [sp], #4
 8008544:	b003      	add	sp, #12
 8008546:	4770      	bx	lr
 8008548:	2000000c 	.word	0x2000000c

0800854c <__ascii_mbtowc>:
 800854c:	b082      	sub	sp, #8
 800854e:	b901      	cbnz	r1, 8008552 <__ascii_mbtowc+0x6>
 8008550:	a901      	add	r1, sp, #4
 8008552:	b142      	cbz	r2, 8008566 <__ascii_mbtowc+0x1a>
 8008554:	b14b      	cbz	r3, 800856a <__ascii_mbtowc+0x1e>
 8008556:	7813      	ldrb	r3, [r2, #0]
 8008558:	600b      	str	r3, [r1, #0]
 800855a:	7812      	ldrb	r2, [r2, #0]
 800855c:	1e10      	subs	r0, r2, #0
 800855e:	bf18      	it	ne
 8008560:	2001      	movne	r0, #1
 8008562:	b002      	add	sp, #8
 8008564:	4770      	bx	lr
 8008566:	4610      	mov	r0, r2
 8008568:	e7fb      	b.n	8008562 <__ascii_mbtowc+0x16>
 800856a:	f06f 0001 	mvn.w	r0, #1
 800856e:	e7f8      	b.n	8008562 <__ascii_mbtowc+0x16>

08008570 <memmove>:
 8008570:	4288      	cmp	r0, r1
 8008572:	b510      	push	{r4, lr}
 8008574:	eb01 0402 	add.w	r4, r1, r2
 8008578:	d902      	bls.n	8008580 <memmove+0x10>
 800857a:	4284      	cmp	r4, r0
 800857c:	4623      	mov	r3, r4
 800857e:	d807      	bhi.n	8008590 <memmove+0x20>
 8008580:	1e43      	subs	r3, r0, #1
 8008582:	42a1      	cmp	r1, r4
 8008584:	d008      	beq.n	8008598 <memmove+0x28>
 8008586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800858a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800858e:	e7f8      	b.n	8008582 <memmove+0x12>
 8008590:	4402      	add	r2, r0
 8008592:	4601      	mov	r1, r0
 8008594:	428a      	cmp	r2, r1
 8008596:	d100      	bne.n	800859a <memmove+0x2a>
 8008598:	bd10      	pop	{r4, pc}
 800859a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800859e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085a2:	e7f7      	b.n	8008594 <memmove+0x24>

080085a4 <__malloc_lock>:
 80085a4:	4801      	ldr	r0, [pc, #4]	; (80085ac <__malloc_lock+0x8>)
 80085a6:	f000 bc17 	b.w	8008dd8 <__retarget_lock_acquire_recursive>
 80085aa:	bf00      	nop
 80085ac:	200003d0 	.word	0x200003d0

080085b0 <__malloc_unlock>:
 80085b0:	4801      	ldr	r0, [pc, #4]	; (80085b8 <__malloc_unlock+0x8>)
 80085b2:	f000 bc12 	b.w	8008dda <__retarget_lock_release_recursive>
 80085b6:	bf00      	nop
 80085b8:	200003d0 	.word	0x200003d0

080085bc <_realloc_r>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	4607      	mov	r7, r0
 80085c0:	4614      	mov	r4, r2
 80085c2:	460e      	mov	r6, r1
 80085c4:	b921      	cbnz	r1, 80085d0 <_realloc_r+0x14>
 80085c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085ca:	4611      	mov	r1, r2
 80085cc:	f7ff bdc8 	b.w	8008160 <_malloc_r>
 80085d0:	b922      	cbnz	r2, 80085dc <_realloc_r+0x20>
 80085d2:	f7ff fd75 	bl	80080c0 <_free_r>
 80085d6:	4625      	mov	r5, r4
 80085d8:	4628      	mov	r0, r5
 80085da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085dc:	f000 fc62 	bl	8008ea4 <_malloc_usable_size_r>
 80085e0:	42a0      	cmp	r0, r4
 80085e2:	d20f      	bcs.n	8008604 <_realloc_r+0x48>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4638      	mov	r0, r7
 80085e8:	f7ff fdba 	bl	8008160 <_malloc_r>
 80085ec:	4605      	mov	r5, r0
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d0f2      	beq.n	80085d8 <_realloc_r+0x1c>
 80085f2:	4631      	mov	r1, r6
 80085f4:	4622      	mov	r2, r4
 80085f6:	f7ff f9c7 	bl	8007988 <memcpy>
 80085fa:	4631      	mov	r1, r6
 80085fc:	4638      	mov	r0, r7
 80085fe:	f7ff fd5f 	bl	80080c0 <_free_r>
 8008602:	e7e9      	b.n	80085d8 <_realloc_r+0x1c>
 8008604:	4635      	mov	r5, r6
 8008606:	e7e7      	b.n	80085d8 <_realloc_r+0x1c>

08008608 <__sfputc_r>:
 8008608:	6893      	ldr	r3, [r2, #8]
 800860a:	3b01      	subs	r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	b410      	push	{r4}
 8008610:	6093      	str	r3, [r2, #8]
 8008612:	da08      	bge.n	8008626 <__sfputc_r+0x1e>
 8008614:	6994      	ldr	r4, [r2, #24]
 8008616:	42a3      	cmp	r3, r4
 8008618:	db01      	blt.n	800861e <__sfputc_r+0x16>
 800861a:	290a      	cmp	r1, #10
 800861c:	d103      	bne.n	8008626 <__sfputc_r+0x1e>
 800861e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008622:	f000 b94b 	b.w	80088bc <__swbuf_r>
 8008626:	6813      	ldr	r3, [r2, #0]
 8008628:	1c58      	adds	r0, r3, #1
 800862a:	6010      	str	r0, [r2, #0]
 800862c:	7019      	strb	r1, [r3, #0]
 800862e:	4608      	mov	r0, r1
 8008630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008634:	4770      	bx	lr

08008636 <__sfputs_r>:
 8008636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008638:	4606      	mov	r6, r0
 800863a:	460f      	mov	r7, r1
 800863c:	4614      	mov	r4, r2
 800863e:	18d5      	adds	r5, r2, r3
 8008640:	42ac      	cmp	r4, r5
 8008642:	d101      	bne.n	8008648 <__sfputs_r+0x12>
 8008644:	2000      	movs	r0, #0
 8008646:	e007      	b.n	8008658 <__sfputs_r+0x22>
 8008648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800864c:	463a      	mov	r2, r7
 800864e:	4630      	mov	r0, r6
 8008650:	f7ff ffda 	bl	8008608 <__sfputc_r>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d1f3      	bne.n	8008640 <__sfputs_r+0xa>
 8008658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800865c <_vfiprintf_r>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	460d      	mov	r5, r1
 8008662:	b09d      	sub	sp, #116	; 0x74
 8008664:	4614      	mov	r4, r2
 8008666:	4698      	mov	r8, r3
 8008668:	4606      	mov	r6, r0
 800866a:	b118      	cbz	r0, 8008674 <_vfiprintf_r+0x18>
 800866c:	6983      	ldr	r3, [r0, #24]
 800866e:	b90b      	cbnz	r3, 8008674 <_vfiprintf_r+0x18>
 8008670:	f000 fb14 	bl	8008c9c <__sinit>
 8008674:	4b89      	ldr	r3, [pc, #548]	; (800889c <_vfiprintf_r+0x240>)
 8008676:	429d      	cmp	r5, r3
 8008678:	d11b      	bne.n	80086b2 <_vfiprintf_r+0x56>
 800867a:	6875      	ldr	r5, [r6, #4]
 800867c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800867e:	07d9      	lsls	r1, r3, #31
 8008680:	d405      	bmi.n	800868e <_vfiprintf_r+0x32>
 8008682:	89ab      	ldrh	r3, [r5, #12]
 8008684:	059a      	lsls	r2, r3, #22
 8008686:	d402      	bmi.n	800868e <_vfiprintf_r+0x32>
 8008688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800868a:	f000 fba5 	bl	8008dd8 <__retarget_lock_acquire_recursive>
 800868e:	89ab      	ldrh	r3, [r5, #12]
 8008690:	071b      	lsls	r3, r3, #28
 8008692:	d501      	bpl.n	8008698 <_vfiprintf_r+0x3c>
 8008694:	692b      	ldr	r3, [r5, #16]
 8008696:	b9eb      	cbnz	r3, 80086d4 <_vfiprintf_r+0x78>
 8008698:	4629      	mov	r1, r5
 800869a:	4630      	mov	r0, r6
 800869c:	f000 f96e 	bl	800897c <__swsetup_r>
 80086a0:	b1c0      	cbz	r0, 80086d4 <_vfiprintf_r+0x78>
 80086a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a4:	07dc      	lsls	r4, r3, #31
 80086a6:	d50e      	bpl.n	80086c6 <_vfiprintf_r+0x6a>
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ac:	b01d      	add	sp, #116	; 0x74
 80086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b2:	4b7b      	ldr	r3, [pc, #492]	; (80088a0 <_vfiprintf_r+0x244>)
 80086b4:	429d      	cmp	r5, r3
 80086b6:	d101      	bne.n	80086bc <_vfiprintf_r+0x60>
 80086b8:	68b5      	ldr	r5, [r6, #8]
 80086ba:	e7df      	b.n	800867c <_vfiprintf_r+0x20>
 80086bc:	4b79      	ldr	r3, [pc, #484]	; (80088a4 <_vfiprintf_r+0x248>)
 80086be:	429d      	cmp	r5, r3
 80086c0:	bf08      	it	eq
 80086c2:	68f5      	ldreq	r5, [r6, #12]
 80086c4:	e7da      	b.n	800867c <_vfiprintf_r+0x20>
 80086c6:	89ab      	ldrh	r3, [r5, #12]
 80086c8:	0598      	lsls	r0, r3, #22
 80086ca:	d4ed      	bmi.n	80086a8 <_vfiprintf_r+0x4c>
 80086cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ce:	f000 fb84 	bl	8008dda <__retarget_lock_release_recursive>
 80086d2:	e7e9      	b.n	80086a8 <_vfiprintf_r+0x4c>
 80086d4:	2300      	movs	r3, #0
 80086d6:	9309      	str	r3, [sp, #36]	; 0x24
 80086d8:	2320      	movs	r3, #32
 80086da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086de:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e2:	2330      	movs	r3, #48	; 0x30
 80086e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80088a8 <_vfiprintf_r+0x24c>
 80086e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ec:	f04f 0901 	mov.w	r9, #1
 80086f0:	4623      	mov	r3, r4
 80086f2:	469a      	mov	sl, r3
 80086f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086f8:	b10a      	cbz	r2, 80086fe <_vfiprintf_r+0xa2>
 80086fa:	2a25      	cmp	r2, #37	; 0x25
 80086fc:	d1f9      	bne.n	80086f2 <_vfiprintf_r+0x96>
 80086fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008702:	d00b      	beq.n	800871c <_vfiprintf_r+0xc0>
 8008704:	465b      	mov	r3, fp
 8008706:	4622      	mov	r2, r4
 8008708:	4629      	mov	r1, r5
 800870a:	4630      	mov	r0, r6
 800870c:	f7ff ff93 	bl	8008636 <__sfputs_r>
 8008710:	3001      	adds	r0, #1
 8008712:	f000 80aa 	beq.w	800886a <_vfiprintf_r+0x20e>
 8008716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008718:	445a      	add	r2, fp
 800871a:	9209      	str	r2, [sp, #36]	; 0x24
 800871c:	f89a 3000 	ldrb.w	r3, [sl]
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 80a2 	beq.w	800886a <_vfiprintf_r+0x20e>
 8008726:	2300      	movs	r3, #0
 8008728:	f04f 32ff 	mov.w	r2, #4294967295
 800872c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008730:	f10a 0a01 	add.w	sl, sl, #1
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	9307      	str	r3, [sp, #28]
 8008738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800873c:	931a      	str	r3, [sp, #104]	; 0x68
 800873e:	4654      	mov	r4, sl
 8008740:	2205      	movs	r2, #5
 8008742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008746:	4858      	ldr	r0, [pc, #352]	; (80088a8 <_vfiprintf_r+0x24c>)
 8008748:	f7f7 fd4a 	bl	80001e0 <memchr>
 800874c:	9a04      	ldr	r2, [sp, #16]
 800874e:	b9d8      	cbnz	r0, 8008788 <_vfiprintf_r+0x12c>
 8008750:	06d1      	lsls	r1, r2, #27
 8008752:	bf44      	itt	mi
 8008754:	2320      	movmi	r3, #32
 8008756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800875a:	0713      	lsls	r3, r2, #28
 800875c:	bf44      	itt	mi
 800875e:	232b      	movmi	r3, #43	; 0x2b
 8008760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008764:	f89a 3000 	ldrb.w	r3, [sl]
 8008768:	2b2a      	cmp	r3, #42	; 0x2a
 800876a:	d015      	beq.n	8008798 <_vfiprintf_r+0x13c>
 800876c:	9a07      	ldr	r2, [sp, #28]
 800876e:	4654      	mov	r4, sl
 8008770:	2000      	movs	r0, #0
 8008772:	f04f 0c0a 	mov.w	ip, #10
 8008776:	4621      	mov	r1, r4
 8008778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800877c:	3b30      	subs	r3, #48	; 0x30
 800877e:	2b09      	cmp	r3, #9
 8008780:	d94e      	bls.n	8008820 <_vfiprintf_r+0x1c4>
 8008782:	b1b0      	cbz	r0, 80087b2 <_vfiprintf_r+0x156>
 8008784:	9207      	str	r2, [sp, #28]
 8008786:	e014      	b.n	80087b2 <_vfiprintf_r+0x156>
 8008788:	eba0 0308 	sub.w	r3, r0, r8
 800878c:	fa09 f303 	lsl.w	r3, r9, r3
 8008790:	4313      	orrs	r3, r2
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	46a2      	mov	sl, r4
 8008796:	e7d2      	b.n	800873e <_vfiprintf_r+0xe2>
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	1d19      	adds	r1, r3, #4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	9103      	str	r1, [sp, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bfbb      	ittet	lt
 80087a4:	425b      	neglt	r3, r3
 80087a6:	f042 0202 	orrlt.w	r2, r2, #2
 80087aa:	9307      	strge	r3, [sp, #28]
 80087ac:	9307      	strlt	r3, [sp, #28]
 80087ae:	bfb8      	it	lt
 80087b0:	9204      	strlt	r2, [sp, #16]
 80087b2:	7823      	ldrb	r3, [r4, #0]
 80087b4:	2b2e      	cmp	r3, #46	; 0x2e
 80087b6:	d10c      	bne.n	80087d2 <_vfiprintf_r+0x176>
 80087b8:	7863      	ldrb	r3, [r4, #1]
 80087ba:	2b2a      	cmp	r3, #42	; 0x2a
 80087bc:	d135      	bne.n	800882a <_vfiprintf_r+0x1ce>
 80087be:	9b03      	ldr	r3, [sp, #12]
 80087c0:	1d1a      	adds	r2, r3, #4
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	9203      	str	r2, [sp, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	bfb8      	it	lt
 80087ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80087ce:	3402      	adds	r4, #2
 80087d0:	9305      	str	r3, [sp, #20]
 80087d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80088b8 <_vfiprintf_r+0x25c>
 80087d6:	7821      	ldrb	r1, [r4, #0]
 80087d8:	2203      	movs	r2, #3
 80087da:	4650      	mov	r0, sl
 80087dc:	f7f7 fd00 	bl	80001e0 <memchr>
 80087e0:	b140      	cbz	r0, 80087f4 <_vfiprintf_r+0x198>
 80087e2:	2340      	movs	r3, #64	; 0x40
 80087e4:	eba0 000a 	sub.w	r0, r0, sl
 80087e8:	fa03 f000 	lsl.w	r0, r3, r0
 80087ec:	9b04      	ldr	r3, [sp, #16]
 80087ee:	4303      	orrs	r3, r0
 80087f0:	3401      	adds	r4, #1
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f8:	482c      	ldr	r0, [pc, #176]	; (80088ac <_vfiprintf_r+0x250>)
 80087fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087fe:	2206      	movs	r2, #6
 8008800:	f7f7 fcee 	bl	80001e0 <memchr>
 8008804:	2800      	cmp	r0, #0
 8008806:	d03f      	beq.n	8008888 <_vfiprintf_r+0x22c>
 8008808:	4b29      	ldr	r3, [pc, #164]	; (80088b0 <_vfiprintf_r+0x254>)
 800880a:	bb1b      	cbnz	r3, 8008854 <_vfiprintf_r+0x1f8>
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	3307      	adds	r3, #7
 8008810:	f023 0307 	bic.w	r3, r3, #7
 8008814:	3308      	adds	r3, #8
 8008816:	9303      	str	r3, [sp, #12]
 8008818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881a:	443b      	add	r3, r7
 800881c:	9309      	str	r3, [sp, #36]	; 0x24
 800881e:	e767      	b.n	80086f0 <_vfiprintf_r+0x94>
 8008820:	fb0c 3202 	mla	r2, ip, r2, r3
 8008824:	460c      	mov	r4, r1
 8008826:	2001      	movs	r0, #1
 8008828:	e7a5      	b.n	8008776 <_vfiprintf_r+0x11a>
 800882a:	2300      	movs	r3, #0
 800882c:	3401      	adds	r4, #1
 800882e:	9305      	str	r3, [sp, #20]
 8008830:	4619      	mov	r1, r3
 8008832:	f04f 0c0a 	mov.w	ip, #10
 8008836:	4620      	mov	r0, r4
 8008838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800883c:	3a30      	subs	r2, #48	; 0x30
 800883e:	2a09      	cmp	r2, #9
 8008840:	d903      	bls.n	800884a <_vfiprintf_r+0x1ee>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0c5      	beq.n	80087d2 <_vfiprintf_r+0x176>
 8008846:	9105      	str	r1, [sp, #20]
 8008848:	e7c3      	b.n	80087d2 <_vfiprintf_r+0x176>
 800884a:	fb0c 2101 	mla	r1, ip, r1, r2
 800884e:	4604      	mov	r4, r0
 8008850:	2301      	movs	r3, #1
 8008852:	e7f0      	b.n	8008836 <_vfiprintf_r+0x1da>
 8008854:	ab03      	add	r3, sp, #12
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	462a      	mov	r2, r5
 800885a:	4b16      	ldr	r3, [pc, #88]	; (80088b4 <_vfiprintf_r+0x258>)
 800885c:	a904      	add	r1, sp, #16
 800885e:	4630      	mov	r0, r6
 8008860:	f7fd fe24 	bl	80064ac <_printf_float>
 8008864:	4607      	mov	r7, r0
 8008866:	1c78      	adds	r0, r7, #1
 8008868:	d1d6      	bne.n	8008818 <_vfiprintf_r+0x1bc>
 800886a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800886c:	07d9      	lsls	r1, r3, #31
 800886e:	d405      	bmi.n	800887c <_vfiprintf_r+0x220>
 8008870:	89ab      	ldrh	r3, [r5, #12]
 8008872:	059a      	lsls	r2, r3, #22
 8008874:	d402      	bmi.n	800887c <_vfiprintf_r+0x220>
 8008876:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008878:	f000 faaf 	bl	8008dda <__retarget_lock_release_recursive>
 800887c:	89ab      	ldrh	r3, [r5, #12]
 800887e:	065b      	lsls	r3, r3, #25
 8008880:	f53f af12 	bmi.w	80086a8 <_vfiprintf_r+0x4c>
 8008884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008886:	e711      	b.n	80086ac <_vfiprintf_r+0x50>
 8008888:	ab03      	add	r3, sp, #12
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	462a      	mov	r2, r5
 800888e:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <_vfiprintf_r+0x258>)
 8008890:	a904      	add	r1, sp, #16
 8008892:	4630      	mov	r0, r6
 8008894:	f7fe f8ae 	bl	80069f4 <_printf_i>
 8008898:	e7e4      	b.n	8008864 <_vfiprintf_r+0x208>
 800889a:	bf00      	nop
 800889c:	08009554 	.word	0x08009554
 80088a0:	08009574 	.word	0x08009574
 80088a4:	08009534 	.word	0x08009534
 80088a8:	080093dc 	.word	0x080093dc
 80088ac:	080093e6 	.word	0x080093e6
 80088b0:	080064ad 	.word	0x080064ad
 80088b4:	08008637 	.word	0x08008637
 80088b8:	080093e2 	.word	0x080093e2

080088bc <__swbuf_r>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	460e      	mov	r6, r1
 80088c0:	4614      	mov	r4, r2
 80088c2:	4605      	mov	r5, r0
 80088c4:	b118      	cbz	r0, 80088ce <__swbuf_r+0x12>
 80088c6:	6983      	ldr	r3, [r0, #24]
 80088c8:	b90b      	cbnz	r3, 80088ce <__swbuf_r+0x12>
 80088ca:	f000 f9e7 	bl	8008c9c <__sinit>
 80088ce:	4b21      	ldr	r3, [pc, #132]	; (8008954 <__swbuf_r+0x98>)
 80088d0:	429c      	cmp	r4, r3
 80088d2:	d12b      	bne.n	800892c <__swbuf_r+0x70>
 80088d4:	686c      	ldr	r4, [r5, #4]
 80088d6:	69a3      	ldr	r3, [r4, #24]
 80088d8:	60a3      	str	r3, [r4, #8]
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	071a      	lsls	r2, r3, #28
 80088de:	d52f      	bpl.n	8008940 <__swbuf_r+0x84>
 80088e0:	6923      	ldr	r3, [r4, #16]
 80088e2:	b36b      	cbz	r3, 8008940 <__swbuf_r+0x84>
 80088e4:	6923      	ldr	r3, [r4, #16]
 80088e6:	6820      	ldr	r0, [r4, #0]
 80088e8:	1ac0      	subs	r0, r0, r3
 80088ea:	6963      	ldr	r3, [r4, #20]
 80088ec:	b2f6      	uxtb	r6, r6
 80088ee:	4283      	cmp	r3, r0
 80088f0:	4637      	mov	r7, r6
 80088f2:	dc04      	bgt.n	80088fe <__swbuf_r+0x42>
 80088f4:	4621      	mov	r1, r4
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 f93c 	bl	8008b74 <_fflush_r>
 80088fc:	bb30      	cbnz	r0, 800894c <__swbuf_r+0x90>
 80088fe:	68a3      	ldr	r3, [r4, #8]
 8008900:	3b01      	subs	r3, #1
 8008902:	60a3      	str	r3, [r4, #8]
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	6022      	str	r2, [r4, #0]
 800890a:	701e      	strb	r6, [r3, #0]
 800890c:	6963      	ldr	r3, [r4, #20]
 800890e:	3001      	adds	r0, #1
 8008910:	4283      	cmp	r3, r0
 8008912:	d004      	beq.n	800891e <__swbuf_r+0x62>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	07db      	lsls	r3, r3, #31
 8008918:	d506      	bpl.n	8008928 <__swbuf_r+0x6c>
 800891a:	2e0a      	cmp	r6, #10
 800891c:	d104      	bne.n	8008928 <__swbuf_r+0x6c>
 800891e:	4621      	mov	r1, r4
 8008920:	4628      	mov	r0, r5
 8008922:	f000 f927 	bl	8008b74 <_fflush_r>
 8008926:	b988      	cbnz	r0, 800894c <__swbuf_r+0x90>
 8008928:	4638      	mov	r0, r7
 800892a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800892c:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <__swbuf_r+0x9c>)
 800892e:	429c      	cmp	r4, r3
 8008930:	d101      	bne.n	8008936 <__swbuf_r+0x7a>
 8008932:	68ac      	ldr	r4, [r5, #8]
 8008934:	e7cf      	b.n	80088d6 <__swbuf_r+0x1a>
 8008936:	4b09      	ldr	r3, [pc, #36]	; (800895c <__swbuf_r+0xa0>)
 8008938:	429c      	cmp	r4, r3
 800893a:	bf08      	it	eq
 800893c:	68ec      	ldreq	r4, [r5, #12]
 800893e:	e7ca      	b.n	80088d6 <__swbuf_r+0x1a>
 8008940:	4621      	mov	r1, r4
 8008942:	4628      	mov	r0, r5
 8008944:	f000 f81a 	bl	800897c <__swsetup_r>
 8008948:	2800      	cmp	r0, #0
 800894a:	d0cb      	beq.n	80088e4 <__swbuf_r+0x28>
 800894c:	f04f 37ff 	mov.w	r7, #4294967295
 8008950:	e7ea      	b.n	8008928 <__swbuf_r+0x6c>
 8008952:	bf00      	nop
 8008954:	08009554 	.word	0x08009554
 8008958:	08009574 	.word	0x08009574
 800895c:	08009534 	.word	0x08009534

08008960 <__ascii_wctomb>:
 8008960:	b149      	cbz	r1, 8008976 <__ascii_wctomb+0x16>
 8008962:	2aff      	cmp	r2, #255	; 0xff
 8008964:	bf85      	ittet	hi
 8008966:	238a      	movhi	r3, #138	; 0x8a
 8008968:	6003      	strhi	r3, [r0, #0]
 800896a:	700a      	strbls	r2, [r1, #0]
 800896c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008970:	bf98      	it	ls
 8008972:	2001      	movls	r0, #1
 8008974:	4770      	bx	lr
 8008976:	4608      	mov	r0, r1
 8008978:	4770      	bx	lr
	...

0800897c <__swsetup_r>:
 800897c:	4b32      	ldr	r3, [pc, #200]	; (8008a48 <__swsetup_r+0xcc>)
 800897e:	b570      	push	{r4, r5, r6, lr}
 8008980:	681d      	ldr	r5, [r3, #0]
 8008982:	4606      	mov	r6, r0
 8008984:	460c      	mov	r4, r1
 8008986:	b125      	cbz	r5, 8008992 <__swsetup_r+0x16>
 8008988:	69ab      	ldr	r3, [r5, #24]
 800898a:	b913      	cbnz	r3, 8008992 <__swsetup_r+0x16>
 800898c:	4628      	mov	r0, r5
 800898e:	f000 f985 	bl	8008c9c <__sinit>
 8008992:	4b2e      	ldr	r3, [pc, #184]	; (8008a4c <__swsetup_r+0xd0>)
 8008994:	429c      	cmp	r4, r3
 8008996:	d10f      	bne.n	80089b8 <__swsetup_r+0x3c>
 8008998:	686c      	ldr	r4, [r5, #4]
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089a0:	0719      	lsls	r1, r3, #28
 80089a2:	d42c      	bmi.n	80089fe <__swsetup_r+0x82>
 80089a4:	06dd      	lsls	r5, r3, #27
 80089a6:	d411      	bmi.n	80089cc <__swsetup_r+0x50>
 80089a8:	2309      	movs	r3, #9
 80089aa:	6033      	str	r3, [r6, #0]
 80089ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089b0:	81a3      	strh	r3, [r4, #12]
 80089b2:	f04f 30ff 	mov.w	r0, #4294967295
 80089b6:	e03e      	b.n	8008a36 <__swsetup_r+0xba>
 80089b8:	4b25      	ldr	r3, [pc, #148]	; (8008a50 <__swsetup_r+0xd4>)
 80089ba:	429c      	cmp	r4, r3
 80089bc:	d101      	bne.n	80089c2 <__swsetup_r+0x46>
 80089be:	68ac      	ldr	r4, [r5, #8]
 80089c0:	e7eb      	b.n	800899a <__swsetup_r+0x1e>
 80089c2:	4b24      	ldr	r3, [pc, #144]	; (8008a54 <__swsetup_r+0xd8>)
 80089c4:	429c      	cmp	r4, r3
 80089c6:	bf08      	it	eq
 80089c8:	68ec      	ldreq	r4, [r5, #12]
 80089ca:	e7e6      	b.n	800899a <__swsetup_r+0x1e>
 80089cc:	0758      	lsls	r0, r3, #29
 80089ce:	d512      	bpl.n	80089f6 <__swsetup_r+0x7a>
 80089d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089d2:	b141      	cbz	r1, 80089e6 <__swsetup_r+0x6a>
 80089d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089d8:	4299      	cmp	r1, r3
 80089da:	d002      	beq.n	80089e2 <__swsetup_r+0x66>
 80089dc:	4630      	mov	r0, r6
 80089de:	f7ff fb6f 	bl	80080c0 <_free_r>
 80089e2:	2300      	movs	r3, #0
 80089e4:	6363      	str	r3, [r4, #52]	; 0x34
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	2300      	movs	r3, #0
 80089f0:	6063      	str	r3, [r4, #4]
 80089f2:	6923      	ldr	r3, [r4, #16]
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	f043 0308 	orr.w	r3, r3, #8
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	6923      	ldr	r3, [r4, #16]
 8008a00:	b94b      	cbnz	r3, 8008a16 <__swsetup_r+0x9a>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a0c:	d003      	beq.n	8008a16 <__swsetup_r+0x9a>
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4630      	mov	r0, r6
 8008a12:	f000 fa07 	bl	8008e24 <__smakebuf_r>
 8008a16:	89a0      	ldrh	r0, [r4, #12]
 8008a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a1c:	f010 0301 	ands.w	r3, r0, #1
 8008a20:	d00a      	beq.n	8008a38 <__swsetup_r+0xbc>
 8008a22:	2300      	movs	r3, #0
 8008a24:	60a3      	str	r3, [r4, #8]
 8008a26:	6963      	ldr	r3, [r4, #20]
 8008a28:	425b      	negs	r3, r3
 8008a2a:	61a3      	str	r3, [r4, #24]
 8008a2c:	6923      	ldr	r3, [r4, #16]
 8008a2e:	b943      	cbnz	r3, 8008a42 <__swsetup_r+0xc6>
 8008a30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a34:	d1ba      	bne.n	80089ac <__swsetup_r+0x30>
 8008a36:	bd70      	pop	{r4, r5, r6, pc}
 8008a38:	0781      	lsls	r1, r0, #30
 8008a3a:	bf58      	it	pl
 8008a3c:	6963      	ldrpl	r3, [r4, #20]
 8008a3e:	60a3      	str	r3, [r4, #8]
 8008a40:	e7f4      	b.n	8008a2c <__swsetup_r+0xb0>
 8008a42:	2000      	movs	r0, #0
 8008a44:	e7f7      	b.n	8008a36 <__swsetup_r+0xba>
 8008a46:	bf00      	nop
 8008a48:	2000000c 	.word	0x2000000c
 8008a4c:	08009554 	.word	0x08009554
 8008a50:	08009574 	.word	0x08009574
 8008a54:	08009534 	.word	0x08009534

08008a58 <abort>:
 8008a58:	b508      	push	{r3, lr}
 8008a5a:	2006      	movs	r0, #6
 8008a5c:	f000 fa52 	bl	8008f04 <raise>
 8008a60:	2001      	movs	r0, #1
 8008a62:	f7f9 fb85 	bl	8002170 <_exit>
	...

08008a68 <__sflush_r>:
 8008a68:	898a      	ldrh	r2, [r1, #12]
 8008a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6e:	4605      	mov	r5, r0
 8008a70:	0710      	lsls	r0, r2, #28
 8008a72:	460c      	mov	r4, r1
 8008a74:	d458      	bmi.n	8008b28 <__sflush_r+0xc0>
 8008a76:	684b      	ldr	r3, [r1, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	dc05      	bgt.n	8008a88 <__sflush_r+0x20>
 8008a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	dc02      	bgt.n	8008a88 <__sflush_r+0x20>
 8008a82:	2000      	movs	r0, #0
 8008a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a8a:	2e00      	cmp	r6, #0
 8008a8c:	d0f9      	beq.n	8008a82 <__sflush_r+0x1a>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a94:	682f      	ldr	r7, [r5, #0]
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	d032      	beq.n	8008b00 <__sflush_r+0x98>
 8008a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	075a      	lsls	r2, r3, #29
 8008aa0:	d505      	bpl.n	8008aae <__sflush_r+0x46>
 8008aa2:	6863      	ldr	r3, [r4, #4]
 8008aa4:	1ac0      	subs	r0, r0, r3
 8008aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aa8:	b10b      	cbz	r3, 8008aae <__sflush_r+0x46>
 8008aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008aac:	1ac0      	subs	r0, r0, r3
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ab4:	6a21      	ldr	r1, [r4, #32]
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b0      	blx	r6
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	d106      	bne.n	8008ace <__sflush_r+0x66>
 8008ac0:	6829      	ldr	r1, [r5, #0]
 8008ac2:	291d      	cmp	r1, #29
 8008ac4:	d82c      	bhi.n	8008b20 <__sflush_r+0xb8>
 8008ac6:	4a2a      	ldr	r2, [pc, #168]	; (8008b70 <__sflush_r+0x108>)
 8008ac8:	40ca      	lsrs	r2, r1
 8008aca:	07d6      	lsls	r6, r2, #31
 8008acc:	d528      	bpl.n	8008b20 <__sflush_r+0xb8>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	6062      	str	r2, [r4, #4]
 8008ad2:	04d9      	lsls	r1, r3, #19
 8008ad4:	6922      	ldr	r2, [r4, #16]
 8008ad6:	6022      	str	r2, [r4, #0]
 8008ad8:	d504      	bpl.n	8008ae4 <__sflush_r+0x7c>
 8008ada:	1c42      	adds	r2, r0, #1
 8008adc:	d101      	bne.n	8008ae2 <__sflush_r+0x7a>
 8008ade:	682b      	ldr	r3, [r5, #0]
 8008ae0:	b903      	cbnz	r3, 8008ae4 <__sflush_r+0x7c>
 8008ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ae6:	602f      	str	r7, [r5, #0]
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	d0ca      	beq.n	8008a82 <__sflush_r+0x1a>
 8008aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008af0:	4299      	cmp	r1, r3
 8008af2:	d002      	beq.n	8008afa <__sflush_r+0x92>
 8008af4:	4628      	mov	r0, r5
 8008af6:	f7ff fae3 	bl	80080c0 <_free_r>
 8008afa:	2000      	movs	r0, #0
 8008afc:	6360      	str	r0, [r4, #52]	; 0x34
 8008afe:	e7c1      	b.n	8008a84 <__sflush_r+0x1c>
 8008b00:	6a21      	ldr	r1, [r4, #32]
 8008b02:	2301      	movs	r3, #1
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b0      	blx	r6
 8008b08:	1c41      	adds	r1, r0, #1
 8008b0a:	d1c7      	bne.n	8008a9c <__sflush_r+0x34>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0c4      	beq.n	8008a9c <__sflush_r+0x34>
 8008b12:	2b1d      	cmp	r3, #29
 8008b14:	d001      	beq.n	8008b1a <__sflush_r+0xb2>
 8008b16:	2b16      	cmp	r3, #22
 8008b18:	d101      	bne.n	8008b1e <__sflush_r+0xb6>
 8008b1a:	602f      	str	r7, [r5, #0]
 8008b1c:	e7b1      	b.n	8008a82 <__sflush_r+0x1a>
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b24:	81a3      	strh	r3, [r4, #12]
 8008b26:	e7ad      	b.n	8008a84 <__sflush_r+0x1c>
 8008b28:	690f      	ldr	r7, [r1, #16]
 8008b2a:	2f00      	cmp	r7, #0
 8008b2c:	d0a9      	beq.n	8008a82 <__sflush_r+0x1a>
 8008b2e:	0793      	lsls	r3, r2, #30
 8008b30:	680e      	ldr	r6, [r1, #0]
 8008b32:	bf08      	it	eq
 8008b34:	694b      	ldreq	r3, [r1, #20]
 8008b36:	600f      	str	r7, [r1, #0]
 8008b38:	bf18      	it	ne
 8008b3a:	2300      	movne	r3, #0
 8008b3c:	eba6 0807 	sub.w	r8, r6, r7
 8008b40:	608b      	str	r3, [r1, #8]
 8008b42:	f1b8 0f00 	cmp.w	r8, #0
 8008b46:	dd9c      	ble.n	8008a82 <__sflush_r+0x1a>
 8008b48:	6a21      	ldr	r1, [r4, #32]
 8008b4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b4c:	4643      	mov	r3, r8
 8008b4e:	463a      	mov	r2, r7
 8008b50:	4628      	mov	r0, r5
 8008b52:	47b0      	blx	r6
 8008b54:	2800      	cmp	r0, #0
 8008b56:	dc06      	bgt.n	8008b66 <__sflush_r+0xfe>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b5e:	81a3      	strh	r3, [r4, #12]
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295
 8008b64:	e78e      	b.n	8008a84 <__sflush_r+0x1c>
 8008b66:	4407      	add	r7, r0
 8008b68:	eba8 0800 	sub.w	r8, r8, r0
 8008b6c:	e7e9      	b.n	8008b42 <__sflush_r+0xda>
 8008b6e:	bf00      	nop
 8008b70:	20400001 	.word	0x20400001

08008b74 <_fflush_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	690b      	ldr	r3, [r1, #16]
 8008b78:	4605      	mov	r5, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	b913      	cbnz	r3, 8008b84 <_fflush_r+0x10>
 8008b7e:	2500      	movs	r5, #0
 8008b80:	4628      	mov	r0, r5
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	b118      	cbz	r0, 8008b8e <_fflush_r+0x1a>
 8008b86:	6983      	ldr	r3, [r0, #24]
 8008b88:	b90b      	cbnz	r3, 8008b8e <_fflush_r+0x1a>
 8008b8a:	f000 f887 	bl	8008c9c <__sinit>
 8008b8e:	4b14      	ldr	r3, [pc, #80]	; (8008be0 <_fflush_r+0x6c>)
 8008b90:	429c      	cmp	r4, r3
 8008b92:	d11b      	bne.n	8008bcc <_fflush_r+0x58>
 8008b94:	686c      	ldr	r4, [r5, #4]
 8008b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0ef      	beq.n	8008b7e <_fflush_r+0xa>
 8008b9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ba0:	07d0      	lsls	r0, r2, #31
 8008ba2:	d404      	bmi.n	8008bae <_fflush_r+0x3a>
 8008ba4:	0599      	lsls	r1, r3, #22
 8008ba6:	d402      	bmi.n	8008bae <_fflush_r+0x3a>
 8008ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008baa:	f000 f915 	bl	8008dd8 <__retarget_lock_acquire_recursive>
 8008bae:	4628      	mov	r0, r5
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	f7ff ff59 	bl	8008a68 <__sflush_r>
 8008bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bb8:	07da      	lsls	r2, r3, #31
 8008bba:	4605      	mov	r5, r0
 8008bbc:	d4e0      	bmi.n	8008b80 <_fflush_r+0xc>
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	059b      	lsls	r3, r3, #22
 8008bc2:	d4dd      	bmi.n	8008b80 <_fflush_r+0xc>
 8008bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bc6:	f000 f908 	bl	8008dda <__retarget_lock_release_recursive>
 8008bca:	e7d9      	b.n	8008b80 <_fflush_r+0xc>
 8008bcc:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <_fflush_r+0x70>)
 8008bce:	429c      	cmp	r4, r3
 8008bd0:	d101      	bne.n	8008bd6 <_fflush_r+0x62>
 8008bd2:	68ac      	ldr	r4, [r5, #8]
 8008bd4:	e7df      	b.n	8008b96 <_fflush_r+0x22>
 8008bd6:	4b04      	ldr	r3, [pc, #16]	; (8008be8 <_fflush_r+0x74>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	bf08      	it	eq
 8008bdc:	68ec      	ldreq	r4, [r5, #12]
 8008bde:	e7da      	b.n	8008b96 <_fflush_r+0x22>
 8008be0:	08009554 	.word	0x08009554
 8008be4:	08009574 	.word	0x08009574
 8008be8:	08009534 	.word	0x08009534

08008bec <std>:
 8008bec:	2300      	movs	r3, #0
 8008bee:	b510      	push	{r4, lr}
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8008bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bfa:	6083      	str	r3, [r0, #8]
 8008bfc:	8181      	strh	r1, [r0, #12]
 8008bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8008c00:	81c2      	strh	r2, [r0, #14]
 8008c02:	6183      	str	r3, [r0, #24]
 8008c04:	4619      	mov	r1, r3
 8008c06:	2208      	movs	r2, #8
 8008c08:	305c      	adds	r0, #92	; 0x5c
 8008c0a:	f7fd fba7 	bl	800635c <memset>
 8008c0e:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <std+0x38>)
 8008c10:	6263      	str	r3, [r4, #36]	; 0x24
 8008c12:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <std+0x3c>)
 8008c14:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c16:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <std+0x40>)
 8008c18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c1a:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <std+0x44>)
 8008c1c:	6224      	str	r4, [r4, #32]
 8008c1e:	6323      	str	r3, [r4, #48]	; 0x30
 8008c20:	bd10      	pop	{r4, pc}
 8008c22:	bf00      	nop
 8008c24:	08008f3d 	.word	0x08008f3d
 8008c28:	08008f5f 	.word	0x08008f5f
 8008c2c:	08008f97 	.word	0x08008f97
 8008c30:	08008fbb 	.word	0x08008fbb

08008c34 <_cleanup_r>:
 8008c34:	4901      	ldr	r1, [pc, #4]	; (8008c3c <_cleanup_r+0x8>)
 8008c36:	f000 b8af 	b.w	8008d98 <_fwalk_reent>
 8008c3a:	bf00      	nop
 8008c3c:	08008b75 	.word	0x08008b75

08008c40 <__sfmoreglue>:
 8008c40:	b570      	push	{r4, r5, r6, lr}
 8008c42:	1e4a      	subs	r2, r1, #1
 8008c44:	2568      	movs	r5, #104	; 0x68
 8008c46:	4355      	muls	r5, r2
 8008c48:	460e      	mov	r6, r1
 8008c4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c4e:	f7ff fa87 	bl	8008160 <_malloc_r>
 8008c52:	4604      	mov	r4, r0
 8008c54:	b140      	cbz	r0, 8008c68 <__sfmoreglue+0x28>
 8008c56:	2100      	movs	r1, #0
 8008c58:	e9c0 1600 	strd	r1, r6, [r0]
 8008c5c:	300c      	adds	r0, #12
 8008c5e:	60a0      	str	r0, [r4, #8]
 8008c60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c64:	f7fd fb7a 	bl	800635c <memset>
 8008c68:	4620      	mov	r0, r4
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}

08008c6c <__sfp_lock_acquire>:
 8008c6c:	4801      	ldr	r0, [pc, #4]	; (8008c74 <__sfp_lock_acquire+0x8>)
 8008c6e:	f000 b8b3 	b.w	8008dd8 <__retarget_lock_acquire_recursive>
 8008c72:	bf00      	nop
 8008c74:	200003d4 	.word	0x200003d4

08008c78 <__sfp_lock_release>:
 8008c78:	4801      	ldr	r0, [pc, #4]	; (8008c80 <__sfp_lock_release+0x8>)
 8008c7a:	f000 b8ae 	b.w	8008dda <__retarget_lock_release_recursive>
 8008c7e:	bf00      	nop
 8008c80:	200003d4 	.word	0x200003d4

08008c84 <__sinit_lock_acquire>:
 8008c84:	4801      	ldr	r0, [pc, #4]	; (8008c8c <__sinit_lock_acquire+0x8>)
 8008c86:	f000 b8a7 	b.w	8008dd8 <__retarget_lock_acquire_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	200003cf 	.word	0x200003cf

08008c90 <__sinit_lock_release>:
 8008c90:	4801      	ldr	r0, [pc, #4]	; (8008c98 <__sinit_lock_release+0x8>)
 8008c92:	f000 b8a2 	b.w	8008dda <__retarget_lock_release_recursive>
 8008c96:	bf00      	nop
 8008c98:	200003cf 	.word	0x200003cf

08008c9c <__sinit>:
 8008c9c:	b510      	push	{r4, lr}
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	f7ff fff0 	bl	8008c84 <__sinit_lock_acquire>
 8008ca4:	69a3      	ldr	r3, [r4, #24]
 8008ca6:	b11b      	cbz	r3, 8008cb0 <__sinit+0x14>
 8008ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cac:	f7ff bff0 	b.w	8008c90 <__sinit_lock_release>
 8008cb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cb4:	6523      	str	r3, [r4, #80]	; 0x50
 8008cb6:	4b13      	ldr	r3, [pc, #76]	; (8008d04 <__sinit+0x68>)
 8008cb8:	4a13      	ldr	r2, [pc, #76]	; (8008d08 <__sinit+0x6c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008cbe:	42a3      	cmp	r3, r4
 8008cc0:	bf04      	itt	eq
 8008cc2:	2301      	moveq	r3, #1
 8008cc4:	61a3      	streq	r3, [r4, #24]
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 f820 	bl	8008d0c <__sfp>
 8008ccc:	6060      	str	r0, [r4, #4]
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 f81c 	bl	8008d0c <__sfp>
 8008cd4:	60a0      	str	r0, [r4, #8]
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f000 f818 	bl	8008d0c <__sfp>
 8008cdc:	2200      	movs	r2, #0
 8008cde:	60e0      	str	r0, [r4, #12]
 8008ce0:	2104      	movs	r1, #4
 8008ce2:	6860      	ldr	r0, [r4, #4]
 8008ce4:	f7ff ff82 	bl	8008bec <std>
 8008ce8:	68a0      	ldr	r0, [r4, #8]
 8008cea:	2201      	movs	r2, #1
 8008cec:	2109      	movs	r1, #9
 8008cee:	f7ff ff7d 	bl	8008bec <std>
 8008cf2:	68e0      	ldr	r0, [r4, #12]
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	2112      	movs	r1, #18
 8008cf8:	f7ff ff78 	bl	8008bec <std>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	61a3      	str	r3, [r4, #24]
 8008d00:	e7d2      	b.n	8008ca8 <__sinit+0xc>
 8008d02:	bf00      	nop
 8008d04:	080091b0 	.word	0x080091b0
 8008d08:	08008c35 	.word	0x08008c35

08008d0c <__sfp>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	4607      	mov	r7, r0
 8008d10:	f7ff ffac 	bl	8008c6c <__sfp_lock_acquire>
 8008d14:	4b1e      	ldr	r3, [pc, #120]	; (8008d90 <__sfp+0x84>)
 8008d16:	681e      	ldr	r6, [r3, #0]
 8008d18:	69b3      	ldr	r3, [r6, #24]
 8008d1a:	b913      	cbnz	r3, 8008d22 <__sfp+0x16>
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f7ff ffbd 	bl	8008c9c <__sinit>
 8008d22:	3648      	adds	r6, #72	; 0x48
 8008d24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	d503      	bpl.n	8008d34 <__sfp+0x28>
 8008d2c:	6833      	ldr	r3, [r6, #0]
 8008d2e:	b30b      	cbz	r3, 8008d74 <__sfp+0x68>
 8008d30:	6836      	ldr	r6, [r6, #0]
 8008d32:	e7f7      	b.n	8008d24 <__sfp+0x18>
 8008d34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d38:	b9d5      	cbnz	r5, 8008d70 <__sfp+0x64>
 8008d3a:	4b16      	ldr	r3, [pc, #88]	; (8008d94 <__sfp+0x88>)
 8008d3c:	60e3      	str	r3, [r4, #12]
 8008d3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d42:	6665      	str	r5, [r4, #100]	; 0x64
 8008d44:	f000 f847 	bl	8008dd6 <__retarget_lock_init_recursive>
 8008d48:	f7ff ff96 	bl	8008c78 <__sfp_lock_release>
 8008d4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d54:	6025      	str	r5, [r4, #0]
 8008d56:	61a5      	str	r5, [r4, #24]
 8008d58:	2208      	movs	r2, #8
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d60:	f7fd fafc 	bl	800635c <memset>
 8008d64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d70:	3468      	adds	r4, #104	; 0x68
 8008d72:	e7d9      	b.n	8008d28 <__sfp+0x1c>
 8008d74:	2104      	movs	r1, #4
 8008d76:	4638      	mov	r0, r7
 8008d78:	f7ff ff62 	bl	8008c40 <__sfmoreglue>
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	6030      	str	r0, [r6, #0]
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d1d5      	bne.n	8008d30 <__sfp+0x24>
 8008d84:	f7ff ff78 	bl	8008c78 <__sfp_lock_release>
 8008d88:	230c      	movs	r3, #12
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	e7ee      	b.n	8008d6c <__sfp+0x60>
 8008d8e:	bf00      	nop
 8008d90:	080091b0 	.word	0x080091b0
 8008d94:	ffff0001 	.word	0xffff0001

08008d98 <_fwalk_reent>:
 8008d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	4688      	mov	r8, r1
 8008da0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008da4:	2700      	movs	r7, #0
 8008da6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008daa:	f1b9 0901 	subs.w	r9, r9, #1
 8008dae:	d505      	bpl.n	8008dbc <_fwalk_reent+0x24>
 8008db0:	6824      	ldr	r4, [r4, #0]
 8008db2:	2c00      	cmp	r4, #0
 8008db4:	d1f7      	bne.n	8008da6 <_fwalk_reent+0xe>
 8008db6:	4638      	mov	r0, r7
 8008db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dbc:	89ab      	ldrh	r3, [r5, #12]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d907      	bls.n	8008dd2 <_fwalk_reent+0x3a>
 8008dc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	d003      	beq.n	8008dd2 <_fwalk_reent+0x3a>
 8008dca:	4629      	mov	r1, r5
 8008dcc:	4630      	mov	r0, r6
 8008dce:	47c0      	blx	r8
 8008dd0:	4307      	orrs	r7, r0
 8008dd2:	3568      	adds	r5, #104	; 0x68
 8008dd4:	e7e9      	b.n	8008daa <_fwalk_reent+0x12>

08008dd6 <__retarget_lock_init_recursive>:
 8008dd6:	4770      	bx	lr

08008dd8 <__retarget_lock_acquire_recursive>:
 8008dd8:	4770      	bx	lr

08008dda <__retarget_lock_release_recursive>:
 8008dda:	4770      	bx	lr

08008ddc <__swhatbuf_r>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	460e      	mov	r6, r1
 8008de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de4:	2900      	cmp	r1, #0
 8008de6:	b096      	sub	sp, #88	; 0x58
 8008de8:	4614      	mov	r4, r2
 8008dea:	461d      	mov	r5, r3
 8008dec:	da07      	bge.n	8008dfe <__swhatbuf_r+0x22>
 8008dee:	2300      	movs	r3, #0
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	89b3      	ldrh	r3, [r6, #12]
 8008df4:	061a      	lsls	r2, r3, #24
 8008df6:	d410      	bmi.n	8008e1a <__swhatbuf_r+0x3e>
 8008df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dfc:	e00e      	b.n	8008e1c <__swhatbuf_r+0x40>
 8008dfe:	466a      	mov	r2, sp
 8008e00:	f000 f902 	bl	8009008 <_fstat_r>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	dbf2      	blt.n	8008dee <__swhatbuf_r+0x12>
 8008e08:	9a01      	ldr	r2, [sp, #4]
 8008e0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e12:	425a      	negs	r2, r3
 8008e14:	415a      	adcs	r2, r3
 8008e16:	602a      	str	r2, [r5, #0]
 8008e18:	e7ee      	b.n	8008df8 <__swhatbuf_r+0x1c>
 8008e1a:	2340      	movs	r3, #64	; 0x40
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	b016      	add	sp, #88	; 0x58
 8008e22:	bd70      	pop	{r4, r5, r6, pc}

08008e24 <__smakebuf_r>:
 8008e24:	898b      	ldrh	r3, [r1, #12]
 8008e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e28:	079d      	lsls	r5, r3, #30
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	d507      	bpl.n	8008e40 <__smakebuf_r+0x1c>
 8008e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	6123      	str	r3, [r4, #16]
 8008e38:	2301      	movs	r3, #1
 8008e3a:	6163      	str	r3, [r4, #20]
 8008e3c:	b002      	add	sp, #8
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	ab01      	add	r3, sp, #4
 8008e42:	466a      	mov	r2, sp
 8008e44:	f7ff ffca 	bl	8008ddc <__swhatbuf_r>
 8008e48:	9900      	ldr	r1, [sp, #0]
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	f7ff f987 	bl	8008160 <_malloc_r>
 8008e52:	b948      	cbnz	r0, 8008e68 <__smakebuf_r+0x44>
 8008e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e58:	059a      	lsls	r2, r3, #22
 8008e5a:	d4ef      	bmi.n	8008e3c <__smakebuf_r+0x18>
 8008e5c:	f023 0303 	bic.w	r3, r3, #3
 8008e60:	f043 0302 	orr.w	r3, r3, #2
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	e7e3      	b.n	8008e30 <__smakebuf_r+0xc>
 8008e68:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <__smakebuf_r+0x7c>)
 8008e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	6020      	str	r0, [r4, #0]
 8008e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	9b00      	ldr	r3, [sp, #0]
 8008e78:	6163      	str	r3, [r4, #20]
 8008e7a:	9b01      	ldr	r3, [sp, #4]
 8008e7c:	6120      	str	r0, [r4, #16]
 8008e7e:	b15b      	cbz	r3, 8008e98 <__smakebuf_r+0x74>
 8008e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e84:	4630      	mov	r0, r6
 8008e86:	f000 f8d1 	bl	800902c <_isatty_r>
 8008e8a:	b128      	cbz	r0, 8008e98 <__smakebuf_r+0x74>
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	f023 0303 	bic.w	r3, r3, #3
 8008e92:	f043 0301 	orr.w	r3, r3, #1
 8008e96:	81a3      	strh	r3, [r4, #12]
 8008e98:	89a0      	ldrh	r0, [r4, #12]
 8008e9a:	4305      	orrs	r5, r0
 8008e9c:	81a5      	strh	r5, [r4, #12]
 8008e9e:	e7cd      	b.n	8008e3c <__smakebuf_r+0x18>
 8008ea0:	08008c35 	.word	0x08008c35

08008ea4 <_malloc_usable_size_r>:
 8008ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ea8:	1f18      	subs	r0, r3, #4
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfbc      	itt	lt
 8008eae:	580b      	ldrlt	r3, [r1, r0]
 8008eb0:	18c0      	addlt	r0, r0, r3
 8008eb2:	4770      	bx	lr

08008eb4 <_raise_r>:
 8008eb4:	291f      	cmp	r1, #31
 8008eb6:	b538      	push	{r3, r4, r5, lr}
 8008eb8:	4604      	mov	r4, r0
 8008eba:	460d      	mov	r5, r1
 8008ebc:	d904      	bls.n	8008ec8 <_raise_r+0x14>
 8008ebe:	2316      	movs	r3, #22
 8008ec0:	6003      	str	r3, [r0, #0]
 8008ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008eca:	b112      	cbz	r2, 8008ed2 <_raise_r+0x1e>
 8008ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ed0:	b94b      	cbnz	r3, 8008ee6 <_raise_r+0x32>
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f000 f830 	bl	8008f38 <_getpid_r>
 8008ed8:	462a      	mov	r2, r5
 8008eda:	4601      	mov	r1, r0
 8008edc:	4620      	mov	r0, r4
 8008ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ee2:	f000 b817 	b.w	8008f14 <_kill_r>
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d00a      	beq.n	8008f00 <_raise_r+0x4c>
 8008eea:	1c59      	adds	r1, r3, #1
 8008eec:	d103      	bne.n	8008ef6 <_raise_r+0x42>
 8008eee:	2316      	movs	r3, #22
 8008ef0:	6003      	str	r3, [r0, #0]
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	e7e7      	b.n	8008ec6 <_raise_r+0x12>
 8008ef6:	2400      	movs	r4, #0
 8008ef8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008efc:	4628      	mov	r0, r5
 8008efe:	4798      	blx	r3
 8008f00:	2000      	movs	r0, #0
 8008f02:	e7e0      	b.n	8008ec6 <_raise_r+0x12>

08008f04 <raise>:
 8008f04:	4b02      	ldr	r3, [pc, #8]	; (8008f10 <raise+0xc>)
 8008f06:	4601      	mov	r1, r0
 8008f08:	6818      	ldr	r0, [r3, #0]
 8008f0a:	f7ff bfd3 	b.w	8008eb4 <_raise_r>
 8008f0e:	bf00      	nop
 8008f10:	2000000c 	.word	0x2000000c

08008f14 <_kill_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4d07      	ldr	r5, [pc, #28]	; (8008f34 <_kill_r+0x20>)
 8008f18:	2300      	movs	r3, #0
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	4608      	mov	r0, r1
 8008f1e:	4611      	mov	r1, r2
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	f7f9 f915 	bl	8002150 <_kill>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d102      	bne.n	8008f30 <_kill_r+0x1c>
 8008f2a:	682b      	ldr	r3, [r5, #0]
 8008f2c:	b103      	cbz	r3, 8008f30 <_kill_r+0x1c>
 8008f2e:	6023      	str	r3, [r4, #0]
 8008f30:	bd38      	pop	{r3, r4, r5, pc}
 8008f32:	bf00      	nop
 8008f34:	200003c8 	.word	0x200003c8

08008f38 <_getpid_r>:
 8008f38:	f7f9 b902 	b.w	8002140 <_getpid>

08008f3c <__sread>:
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	460c      	mov	r4, r1
 8008f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f44:	f000 f894 	bl	8009070 <_read_r>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	bfab      	itete	ge
 8008f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f50:	181b      	addge	r3, r3, r0
 8008f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f56:	bfac      	ite	ge
 8008f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f5a:	81a3      	strhlt	r3, [r4, #12]
 8008f5c:	bd10      	pop	{r4, pc}

08008f5e <__swrite>:
 8008f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f62:	461f      	mov	r7, r3
 8008f64:	898b      	ldrh	r3, [r1, #12]
 8008f66:	05db      	lsls	r3, r3, #23
 8008f68:	4605      	mov	r5, r0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	4616      	mov	r6, r2
 8008f6e:	d505      	bpl.n	8008f7c <__swrite+0x1e>
 8008f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f74:	2302      	movs	r3, #2
 8008f76:	2200      	movs	r2, #0
 8008f78:	f000 f868 	bl	800904c <_lseek_r>
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f86:	81a3      	strh	r3, [r4, #12]
 8008f88:	4632      	mov	r2, r6
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f92:	f000 b817 	b.w	8008fc4 <_write_r>

08008f96 <__sseek>:
 8008f96:	b510      	push	{r4, lr}
 8008f98:	460c      	mov	r4, r1
 8008f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9e:	f000 f855 	bl	800904c <_lseek_r>
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	bf15      	itete	ne
 8008fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fb2:	81a3      	strheq	r3, [r4, #12]
 8008fb4:	bf18      	it	ne
 8008fb6:	81a3      	strhne	r3, [r4, #12]
 8008fb8:	bd10      	pop	{r4, pc}

08008fba <__sclose>:
 8008fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fbe:	f000 b813 	b.w	8008fe8 <_close_r>
	...

08008fc4 <_write_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4d07      	ldr	r5, [pc, #28]	; (8008fe4 <_write_r+0x20>)
 8008fc8:	4604      	mov	r4, r0
 8008fca:	4608      	mov	r0, r1
 8008fcc:	4611      	mov	r1, r2
 8008fce:	2200      	movs	r2, #0
 8008fd0:	602a      	str	r2, [r5, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f7f9 f8f3 	bl	80021be <_write>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d102      	bne.n	8008fe2 <_write_r+0x1e>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	b103      	cbz	r3, 8008fe2 <_write_r+0x1e>
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}
 8008fe4:	200003c8 	.word	0x200003c8

08008fe8 <_close_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d06      	ldr	r5, [pc, #24]	; (8009004 <_close_r+0x1c>)
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	f7f9 f8ff 	bl	80021f6 <_close>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_close_r+0x1a>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_close_r+0x1a>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	200003c8 	.word	0x200003c8

08009008 <_fstat_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	; (8009028 <_fstat_r+0x20>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	4611      	mov	r1, r2
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	f7f9 f8fa 	bl	800220e <_fstat>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	d102      	bne.n	8009024 <_fstat_r+0x1c>
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	b103      	cbz	r3, 8009024 <_fstat_r+0x1c>
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	bf00      	nop
 8009028:	200003c8 	.word	0x200003c8

0800902c <_isatty_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d06      	ldr	r5, [pc, #24]	; (8009048 <_isatty_r+0x1c>)
 8009030:	2300      	movs	r3, #0
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	f7f9 f8f9 	bl	800222e <_isatty>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_isatty_r+0x1a>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_isatty_r+0x1a>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	200003c8 	.word	0x200003c8

0800904c <_lseek_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d07      	ldr	r5, [pc, #28]	; (800906c <_lseek_r+0x20>)
 8009050:	4604      	mov	r4, r0
 8009052:	4608      	mov	r0, r1
 8009054:	4611      	mov	r1, r2
 8009056:	2200      	movs	r2, #0
 8009058:	602a      	str	r2, [r5, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	f7f9 f8f2 	bl	8002244 <_lseek>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d102      	bne.n	800906a <_lseek_r+0x1e>
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	b103      	cbz	r3, 800906a <_lseek_r+0x1e>
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	bd38      	pop	{r3, r4, r5, pc}
 800906c:	200003c8 	.word	0x200003c8

08009070 <_read_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d07      	ldr	r5, [pc, #28]	; (8009090 <_read_r+0x20>)
 8009074:	4604      	mov	r4, r0
 8009076:	4608      	mov	r0, r1
 8009078:	4611      	mov	r1, r2
 800907a:	2200      	movs	r2, #0
 800907c:	602a      	str	r2, [r5, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	f7f9 f880 	bl	8002184 <_read>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_read_r+0x1e>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_read_r+0x1e>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	200003c8 	.word	0x200003c8

08009094 <_init>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	bf00      	nop
 8009098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909a:	bc08      	pop	{r3}
 800909c:	469e      	mov	lr, r3
 800909e:	4770      	bx	lr

080090a0 <_fini>:
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	bf00      	nop
 80090a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090a6:	bc08      	pop	{r3}
 80090a8:	469e      	mov	lr, r3
 80090aa:	4770      	bx	lr
